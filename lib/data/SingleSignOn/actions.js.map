{"version":3,"sources":["data/SingleSignOn/actions.js"],"names":["triggerSignInRedirect","triggerSignOutRedirect","userExpired","redirectSuccess","userFound","userNotFound","silentRenewError","sessionTerminated","userExpiring","loadingUser","userSignedOut","loadUserError","TRIGGER_SIGNIN_REDIRECT","TRIGGER_SIGNOUT_REDIRECT","USER_EXPIRED","REDIRECT_SUCCESS","USER_FOUND","USER_NOT_FOUND","SILENT_RENEW_ERROR","USER_EXPIRING","SESSION_TERMINATED","LOADING_USER","USER_SIGNED_OUT","LOAD_USER_ERROR","returnUrl","type","user","payload","error"],"mappings":";;;;;QAgBgBA,qB,GAAAA,qB;QAOAC,sB,GAAAA,sB;QAQAC,W,GAAAA,W;QAOAC,e,GAAAA,e;QAQAC,S,GAAAA,S;QAQAC,Y,GAAAA,Y;QAQAC,gB,GAAAA,gB;QAQAC,iB,GAAAA,iB;QAOAC,Y,GAAAA,Y;QAOAC,W,GAAAA,W;QAMAC,a,GAAAA,a;QAMAC,a,GAAAA,a;AAhGhB;AACO,IAAMC,4DAA0B,6BAAhC;AACA,IAAMC,8DAA2B,8BAAjC;;AAEP;AACO,IAAMC,sCAAe,kBAArB;AACA,IAAMC,8CAAmB,sBAAzB;AACA,IAAMC,kCAAa,gBAAnB;AACA,IAAMC,0CAAiB,oBAAvB;AACA,IAAMC,kDAAqB,wBAA3B;AACA,IAAMC,wCAAgB,mBAAtB;AACA,IAAMC,kDAAqB,wBAA3B;AACA,IAAMC,sCAAe,kBAArB;AACA,IAAMC,4CAAkB,qBAAxB;AACA,IAAMC,4CAAkB,qBAAxB;;AAEA,SAASvB,qBAAT,GAAiD;AAAA,MAAlBwB,SAAkB,uEAAN,IAAM;;AACtD,SAAO;AACLC,UAAMb,uBADD;AAELY;AAFK,GAAP;AAID;;AAEM,SAASvB,sBAAT,GAAkD;AAAA,MAAlBuB,SAAkB,uEAAN,IAAM;;AACvD,SAAO;AACLC,UAAMZ,wBADD;AAELW;AAFK,GAAP;AAID;;AAED;AACO,SAAStB,WAAT,GAAuB;AAC5B,SAAO;AACLuB,UAAMX;AADD,GAAP;AAGD;;AAED;AACO,SAASX,eAAT,CAAyBuB,IAAzB,EAA+B;AACpC,SAAO;AACLD,UAAMV,gBADD;AAELY,aAASD;AAFJ,GAAP;AAID;;AAED;AACO,SAAStB,SAAT,CAAmBsB,IAAnB,EAAyB;AAC9B,SAAO;AACLD,UAAMT,UADD;AAELW,aAASD;AAFJ,GAAP;AAID;;AAED;AACO,SAASrB,YAAT,GAAwB;AAC7B,SAAO;AACLoB,UAAMR;AADD,GAAP;AAGD;;AAED;AACA;AACO,SAASX,gBAAT,CAA0BsB,KAA1B,EAAiC;AACtC,SAAO;AACLH,UAAMP,kBADD;AAELS,aAASC;AAFJ,GAAP;AAID;;AAED;AACO,SAASrB,iBAAT,GAA6B;AAClC,SAAO;AACLkB,UAAML;AADD,GAAP;AAGD;;AAED;AACO,SAASZ,YAAT,GAAwB;AAC7B,SAAO;AACLiB,UAAMN;AADD,GAAP;AAGD;;AAED;AACO,SAASV,WAAT,GAAuB;AAC5B,SAAO;AACLgB,UAAMJ;AADD,GAAP;AAGD;;AAEM,SAASX,aAAT,GAAyB;AAC9B,SAAO;AACLe,UAAMH;AADD,GAAP;AAGD;;AAEM,SAASX,aAAT,GAAyB;AAC9B,SAAO;AACLc,UAAMF;AADD,GAAP;AAGD","file":"actions.js","sourcesContent":["// actions\nexport const TRIGGER_SIGNIN_REDIRECT = 'SSO_TRIGGER_SIGNIN_REDIRECT';\nexport const TRIGGER_SIGNOUT_REDIRECT = 'SSO_TRIGGER_SIGNOUT_REDIRECT';\n\n// state changes\nexport const USER_EXPIRED = 'SSO_USER_EXPIRED';\nexport const REDIRECT_SUCCESS = 'SSO_REDIRECT_SUCCESS';\nexport const USER_FOUND = 'SSO_USER_FOUND';\nexport const USER_NOT_FOUND = 'SSO_USER_NOT_FOUND';\nexport const SILENT_RENEW_ERROR = 'SSO_SILENT_RENEW_ERROR';\nexport const USER_EXPIRING = 'SSO_USER_EXPIRING';\nexport const SESSION_TERMINATED = 'SSO_SESSION_TERMINATED';\nexport const LOADING_USER = 'SSO_LOADING_USER';\nexport const USER_SIGNED_OUT = 'SSO_USER_SIGNED_OUT';\nexport const LOAD_USER_ERROR = 'SSO_LOAD_USER_ERROR';\n\nexport function triggerSignInRedirect(returnUrl = null) {\n  return {\n    type: TRIGGER_SIGNIN_REDIRECT,\n    returnUrl,\n  };\n}\n\nexport function triggerSignOutRedirect(returnUrl = null) {\n  return {\n    type: TRIGGER_SIGNOUT_REDIRECT,\n    returnUrl,\n  };\n}\n\n// dispatched when the existing user expired\nexport function userExpired() {\n  return {\n    type: USER_EXPIRED,\n  };\n}\n\n// dispatched after a successful redirect callback\nexport function redirectSuccess(user) {\n  return {\n    type: REDIRECT_SUCCESS,\n    payload: user,\n  };\n}\n\n// dispatched when a user has been found in storage\nexport function userFound(user) {\n  return {\n    type: USER_FOUND,\n    payload: user,\n  };\n}\n\n// dispatched when a user has been found in storage\nexport function userNotFound() {\n  return {\n    type: USER_NOT_FOUND,\n  };\n}\n\n// dispatched when silent renew fails\n// payload: the error\nexport function silentRenewError(error) {\n  return {\n    type: SILENT_RENEW_ERROR,\n    payload: error,\n  };\n}\n\n// dispatched when the user is logged out\nexport function sessionTerminated() {\n  return {\n    type: SESSION_TERMINATED,\n  };\n}\n\n// dispatched when the user is expiring (just before a silent renew is triggered)\nexport function userExpiring() {\n  return {\n    type: USER_EXPIRING,\n  };\n}\n\n// dispatched when a new user is loading\nexport function loadingUser() {\n  return {\n    type: LOADING_USER,\n  };\n}\n\nexport function userSignedOut() {\n  return {\n    type: USER_SIGNED_OUT,\n  };\n}\n\nexport function loadUserError() {\n  return {\n    type: LOAD_USER_ERROR,\n  };\n}\n"]}