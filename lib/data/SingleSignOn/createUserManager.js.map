{"version":3,"sources":["data/SingleSignOn/createUserManager.js"],"names":["memoizeCache","memoize","fn","arg","ret","protocol","window","location","hostname","port","debug","get","userManagerConfig","client_id","redirect_uri","response_type","scope","authority","silent_redirect_uri","automaticSilentRenew","filterProtocolClaims","createCustomUserManager","config","newUserManager","forceSignOutRedirect","signOut","signoutRedirect","signInRedirectWithValidation","signinRedirect","signInRedirect","signOutRedirect","signInSilentCallback","signinSilentCallback","createUserManager"],"mappings":";;;;;;AAAA;;AACA;;;;AACA;;;;;;AAEA,IAAMA,eAAe,EAArB;;AAEA,IAAMC,UAAU,SAAVA,OAAU,CAACC,EAAD;AAAA,SAAQ,UAACC,GAAD,EAAS;AAC/B,QAAMC,MAAMJ,aAAaG,GAAb,KAAqBD,GAAGC,GAAH,CAAjC;AACAH,iBAAaG,GAAb,IAAoBC,GAApB;AACA,WAAOA,GAAP;AACD,GAJe;AAAA,CAAhB;;AAMA,IAAMC,WAAWC,OAAOC,QAAP,CAAgBF,QAAjC;AACA,IAAMG,WAAWF,OAAOC,QAAP,CAAgBC,QAAjC;AACA,IAAMC,OAAOH,OAAOC,QAAP,CAAgBE,IAAhB,SACLH,OAAOC,QAAP,CAAgBE,IADX,GAET,EAFJ;;AAIA,cAAIC,KAAJ,CAAU,0CAAV,EAAsD,iBAAOC,GAAP,CAAW,aAAX,CAAtD;AACA,cAAID,KAAJ,CAAU,8CAAV,EAA0D,iBAAOC,GAAP,CAAW,iBAAX,CAA1D;;AAEA,IAAMC,oBAAoB;AACxBC,aAAW,iBAAOF,GAAP,CAAW,aAAX,CADa;AAExBG,gBAAiBT,QAAjB,UAA8BG,QAA9B,GAAyCC,IAAzC,cAFwB;AAGxBM,iBAAe,gBAHS;AAIxBC,SAAO,kCAJiB;AAKxBC,aAAW,iBAAON,GAAP,CAAW,iBAAX,CALa;AAMxBO,uBAAwBb,QAAxB,UAAqCG,QAArC,GAAgDC,IAAhD,2BANwB;AAOxBU,wBAAsB,IAPE;AAQxBC,wBAAsB;AARE,CAA1B;;AAWA,IAAMC,0BAA0BpB,QAAQ,UAACqB,MAAD,EAAY;AAClD,MAAMC,iBAAiB,4BAAgBD,MAAhB,CAAvB;AACAC,iBAAeC,oBAAf,GAAsC,YAAM;AAC1CD,mBAAeE,OAAf,GAAyB,IAAzB;AACAF,mBAAeG,eAAf;AACD,GAHD;AAIAH,iBAAeI,4BAAf,GAA8C,YAAM;AAClD,QAAIJ,eAAeE,OAAf,KAA2B,IAA/B,EAAqC;AACrCF,mBAAeK,cAAf;AACD,GAHD;AAIA;AACAL,iBAAeM,cAAf,GAAgC;AAAA,WAAMN,eAAeK,cAAf,EAAN;AAAA,GAAhC;AACAL,iBAAeO,eAAf,GAAiC;AAAA,WAAMP,eAAeG,eAAf,EAAN;AAAA,GAAjC;AACAH,iBAAeQ,oBAAf,GAAsC;AAAA,WAAMR,eAAeS,oBAAf,EAAN;AAAA,GAAtC;AACA,SAAOT,cAAP;AACD,CAf+B,CAAhC;;AAiBA,IAAMU,oBAAoB,SAApBA,iBAAoB;AAAA,SACxBZ,wBAAwBT,iBAAxB,CADwB;AAAA,CAA1B;;kBAGeqB,iB","file":"createUserManager.js","sourcesContent":["import { UserManager } from 'oidc-client';\nimport log from 'domain/log';\nimport Config from 'domain/Config';\n\nconst memoizeCache = {};\n\nconst memoize = (fn) => (arg) => {\n  const ret = memoizeCache[arg] || fn(arg);\n  memoizeCache[arg] = ret;\n  return ret;\n};\n\nconst protocol = window.location.protocol;\nconst hostname = window.location.hostname;\nconst port = window.location.port ?\n    `:${window.location.port}` :\n    '';\n\nlog.debug('SingleSignOn - userManager - ssoClientId', Config.get('ssoClientId'));\nlog.debug('SingleSignOn - userManager - ssoAuthorityUrl', Config.get('ssoAuthorityUrl'));\n\nconst userManagerConfig = {\n  client_id: Config.get('ssoClientId'),\n  redirect_uri: `${protocol}//${hostname}${port}/callback`,\n  response_type: 'token id_token',\n  scope: 'openid profile email e1SystemAPI',\n  authority: Config.get('ssoAuthorityUrl'),\n  silent_redirect_uri: `${protocol}//${hostname}${port}/sso-silent-renew.html`,\n  automaticSilentRenew: true,\n  filterProtocolClaims: true,\n};\n\nconst createCustomUserManager = memoize((config) => {\n  const newUserManager = new UserManager(config);\n  newUserManager.forceSignOutRedirect = () => {\n    newUserManager.signOut = true;\n    newUserManager.signoutRedirect();\n  };\n  newUserManager.signInRedirectWithValidation = () => {\n    if (newUserManager.signOut === true) return;\n    newUserManager.signinRedirect();\n  };\n  // fix casing in these inherited methods\n  newUserManager.signInRedirect = () => newUserManager.signinRedirect();\n  newUserManager.signOutRedirect = () => newUserManager.signoutRedirect();\n  newUserManager.signInSilentCallback = () => newUserManager.signinSilentCallback();\n  return newUserManager;\n});\n\nconst createUserManager = () =>\n  createCustomUserManager(userManagerConfig);\n\nexport default createUserManager;\n"]}