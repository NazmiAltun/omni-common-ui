{"version":3,"sources":["data/SingleSignOn/loadUser.js"],"names":["setReduxStore","getReduxStore","getUserCallback","errorCallback","loadUser","reduxStore","newStore","user","expired","dispatch","error","message","store","userManager","Error","getUser","then","catch"],"mappings":";;;;;QAOgBA,a,GAAAA,a;QAKAC,a,GAAAA,a;QAKAC,e,GAAAA,e;QAYAC,a,GAAAA,a;kBAOQC,Q;;AApCxB;;;;AACA;;;;AAEA;AACA,IAAIC,mBAAJ;;AAEA;AACO,SAASL,aAAT,CAAuBM,QAAvB,EAAiC;AACtCD,eAAaC,QAAb;AACD;;AAED;AACO,SAASL,aAAT,GAAyB;AAC9B,SAAOI,UAAP;AACD;;AAED;AACO,SAASH,eAAT,CAAyBK,IAAzB,EAA+B;AACpC,MAAIA,QAAQ,CAAEA,KAAKC,OAAnB,EAA4B;AAC1BH,eAAWI,QAAX,CAAoB,wBAAUF,IAAV,CAApB;AACD,GAFD,MAEO,IAAIA,QAAQA,KAAKC,OAAjB,EAA0B;AAC/BH,eAAWI,QAAX,CAAoB,2BAApB;AACD,GAFM,MAEA;AACLJ,eAAWI,QAAX,CAAoB,4BAApB;AACD;AACD,SAAOF,IAAP;AACD;;AAED;AACO,SAASJ,aAAT,CAAuBO,KAAvB,EAA8B;AACnC,gBAAIA,KAAJ,qCAA4CA,MAAMC,OAAlD;AACAN,aAAWI,QAAX,CAAoB,6BAApB;AACD;;AAED;AACA;AACe,SAASL,QAAT,CAAkBQ,KAAlB,EAAyBC,WAAzB,EAAsC;AACnD,MAAI,CAAED,KAAF,IAAW,CAAEA,MAAMH,QAAvB,EAAiC;AAC/B,UAAM,IAAIK,KAAJ,CAAU,sEAAV,CAAN;AACD;;AAED,MAAI,CAAED,WAAF,IAAiB,CAAEA,YAAYE,OAAnC,EAA4C;AAC1C,UAAM,IAAID,KAAJ,CAAU,sEAAV,CAAN;AACD;;AAEDT,eAAaO,KAAb;;AAEA,SAAOC,YAAYE,OAAZ,GACJC,IADI,CACCd,eADD,EAEJe,KAFI,CAEEd,aAFF,CAAP;AAGD","file":"loadUser.js","sourcesContent":["import log from 'domain/log';\nimport { userFound, userNotFound, userExpired, loadUserError } from './actions';\n\n// stores the redux store here to be accessed by all functions\nlet reduxStore;\n\n// helper function to set the redux store (for testing)\nexport function setReduxStore(newStore) {\n  reduxStore = newStore;\n}\n\n// helper function to get the redux store (for testing)\nexport function getReduxStore() {\n  return reduxStore;\n}\n\n// callback function called when the user has been loaded\nexport function getUserCallback(user) {\n  if (user && ! user.expired) {\n    reduxStore.dispatch(userFound(user));\n  } else if (user && user.expired) {\n    reduxStore.dispatch(userExpired());\n  } else {\n    reduxStore.dispatch(userNotFound());\n  }\n  return user;\n}\n\n// error callback called when the userManager's loadUser() function failed\nexport function errorCallback(error) {\n  log.error(`loadUser: Error in loadUser(): ${error.message}`);\n  reduxStore.dispatch(loadUserError());\n}\n\n// function to load the current user into the store\n// NOTE: use only when silent renew is configured\nexport default function loadUser(store, userManager) {\n  if (! store || ! store.dispatch) {\n    throw new Error('loadUser: You need to pass the redux store into the loadUser helper!');\n  }\n\n  if (! userManager || ! userManager.getUser) {\n    throw new Error('loadUser: You need to pass the userManager into the loadUser helper!');\n  }\n\n  reduxStore = store;\n\n  return userManager.getUser()\n    .then(getUserCallback)\n    .catch(errorCallback);\n}\n"]}