{"version":3,"sources":["setupStore.js"],"names":["setupStore","PRODUCTION","reducer","browserHistory","basename","notificationsTriggerConfig","get","reduxRouterMiddleware","createStoreWithMiddleware","undefined","store","createReducer","window","devToolsExtension","syncBrowserHistory","selectLocationState","state","toJS","rootReducer","routing","singleSignOn","privileges","impersonate","apiCalls","fromJS","locationBeforeTransitions","action","type","merge","payload"],"mappings":";;;;;QAqBgBA,U,GAAAA,U;;AArBhB;;;;AACA;;;;AAEA;;;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;AACA;;;;AACA;;;;;;AAEA,IAAI,CAAEC,UAAN,EAAkB;AAChB;AACD;;AAEM,SAASD,UAAT,CAAoBE,OAApB,EAA6B;AAClC,MAAMC,iBAAiB,mCAAiB,8BAAgB,iDAAhB,CAAjB,EAA8D;AACnFC,cAAU;AADyE,GAA9D,CAAvB;;AAIA,MAAMC,6BAA6B,iBAAOC,GAAP,CAAW,sBAAX,CAAnC;;AAEA,MAAMC,wBAAwB,wCAAiBJ,cAAjB,CAA9B;AACA,MAAMK,4BAA4B,oBAChC,kEAEED,qBAFF,wBAIE,uCAJF,EAKEF,6BACI,6CAA8BA,0BAA9B,CADJ,GAEII,SAPN,CADgC,qBAAlC;;AAYA,MAAMC,QAAQF,0BAA0BG,cAAcT,OAAd,CAA1B,EACVU,OAAOC,iBAAP,IAA4BD,OAAOC,iBAAP,EADlB,CAAd;;AAGA,MAAMC,qBAAqB,4CAAqBX,cAArB,EAAqCO,KAArC,EAA4C;AACrEK,yBAAqB,6BAACC,KAAD;AAAA,aAAWA,MAAMV,GAAN,CAAU,SAAV,EAAqBW,IAArB,EAAX;AAAA;AADgD,GAA5C,CAA3B;;AAIA,SAAO,EAAEP,YAAF,EAASI,sCAAT,EAAP;AACD;;AAED,SAASH,aAAT,CAAuBT,OAAvB,EAAgC;AAC9B,SAAO,qCAAgB;AACrBgB,iBAAa,qCAAgBhB,OAAhB,CADQ;AAErBiB,oBAFqB;AAGrBC,uCAHqB;AAIrBC,mCAJqB;AAKrBC,qCALqB;AAMrBC;AANqB,GAAhB,CAAP;AAQD;;AAED,SAASJ,OAAT,GAAwF;AAAA,MAAvEH,KAAuE,uEAA/D,oBAAUQ,MAAV,CAAiB,EAAEC,2BAA2B,IAA7B,EAAjB,CAA+D;AAAA,MAARC,MAAQ;;AACtF,MAAIA,OAAOC,IAAP,sCAAJ,EAAqC;AACnC,WAAOX,MAAMY,KAAN,CAAY;AACjBH,iCAA2BC,OAAOG;AADjB,KAAZ,CAAP;AAGD;;AAED,SAAOb,KAAP;AACD;;kBAEchB,U","file":"setupStore.js","sourcesContent":["import Immutable from 'immutable';\nimport installDevTools from 'immutable-devtools';\n\nimport thunk from 'redux-thunk';\nimport { createStore, applyMiddleware, compose } from 'redux';\nimport { createHistory, useBasename, useBeforeUnload } from 'history';\nimport { useRouterHistory } from 'react-router';\nimport { syncHistoryWithStore, routerMiddleware, LOCATION_CHANGE } from 'react-router-redux';\nimport { singleSignOnMiddleware, reducer as singleSignOn } from 'containers/SingleSignOn';\nimport { reducer as privileges } from 'containers/Privileges';\nimport { reducer as impersonate } from 'containers/Impersonate';\nimport { combineReducers } from 'redux-immutable';\nimport { reducer as apiCalls } from 'containers/ApiCalls';\nimport createLoggerMiddleware from 'domain/createLoggerMiddleware';\nimport createNotificationsMiddleware from 'domain/createNotificationsMiddleware';\nimport Config from 'domain/Config';\n\nif (! PRODUCTION) {\n  installDevTools(Immutable);\n}\n\nexport function setupStore(reducer) {\n  const browserHistory = useRouterHistory(useBeforeUnload(useBasename(createHistory)))({\n    basename: '',\n  });\n\n  const notificationsTriggerConfig = Config.get('notificationsTrigger');\n\n  const reduxRouterMiddleware = routerMiddleware(browserHistory);\n  const createStoreWithMiddleware = compose(\n    applyMiddleware(\n      singleSignOnMiddleware,\n      reduxRouterMiddleware,\n      thunk,\n      createLoggerMiddleware(),\n      notificationsTriggerConfig ?\n          createNotificationsMiddleware(notificationsTriggerConfig) :\n          undefined,\n    )\n  )(createStore);\n\n  const store = createStoreWithMiddleware(createReducer(reducer),\n      window.devToolsExtension && window.devToolsExtension());\n\n  const syncBrowserHistory = syncHistoryWithStore(browserHistory, store, {\n    selectLocationState: (state) => state.get('routing').toJS(),\n  });\n\n  return { store, syncBrowserHistory };\n}\n\nfunction createReducer(reducer) {\n  return combineReducers({\n    rootReducer: combineReducers(reducer),\n    routing,\n    singleSignOn,\n    privileges,\n    impersonate,\n    apiCalls,\n  });\n}\n\nfunction routing(state = Immutable.fromJS({ locationBeforeTransitions: null }), action) {\n  if (action.type === LOCATION_CHANGE) {\n    return state.merge({\n      locationBeforeTransitions: action.payload,\n    });\n  }\n\n  return state;\n}\n\nexport default setupStore;\n"]}