{"version":3,"sources":["setupApp.jsx"],"names":["setupApp","PRODUCTION","init","instrumentationKey","get","Log","logger","level","WARN","INFO","config","release","COMMIT","environment","tags","version","VERSION","debug","install","routes","reducer","errorMessageMap","store","syncBrowserHistory","set","setMap","gaKey","initialize","titleCase","gaOptions","siteSpeedSampleRate","parsedRoutes","path","component","childRoutes","array","logPageView","document","getElementById","page","window","location","pathname","pageview"],"mappings":";;;;;QA8CgBA,Q,GAAAA,Q;;AA9ChB;;AAEA;;AACA;;;;AACA;;AACA;;AACA;;AAKA;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;;;AAEA;;AAEA,IAAIC,UAAJ,EAAgB;AACd,6BAAQC,IAAR,CAAa,EAAEC,oBAAoB,iBAAOC,GAAP,CAAW,aAAX,CAAtB,EAAb;AACD;;AAED,qBAAKC,GAAL,CAASC,MAAT;AACA,qBAAKD,GAAL,CAASE,KAAT,GAAiBN,aAAa,qBAAKI,GAAL,CAASG,IAAtB,GAA6B,qBAAKH,GAAL,CAASI,IAAvD;;AAEA,kBAAMC,MAAN,CAAa,iBAAON,GAAP,CAAW,WAAX,CAAb,EAAsC;AACpCO,WAASC,MAD2B;AAEpCC,eAAa,iBAAOT,GAAP,CAAW,mBAAX,CAFuB;AAGpCU,QAAM,EAAEC,SAASC,OAAX,EAH8B;AAIpCC,SAAO,CAAEhB;AAJ2B,CAAtC,EAKGiB,OALH;;AAOO,SAASlB,QAAT,OAAwD;AAAA,MAApCmB,MAAoC,QAApCA,MAAoC;AAAA,MAA5BC,OAA4B,QAA5BA,OAA4B;AAAA,MAAnBC,eAAmB,QAAnBA,eAAmB;;AAAA,oBACvB,6BAAWD,OAAX,CADuB;AAAA,MACrDE,KADqD,eACrDA,KADqD;AAAA,MAC9CC,kBAD8C,eAC9CA,kBAD8C;;AAG7D,kBAAMC,GAAN,CAAUF,KAAV;AACA,yBAAaG,MAAb,CAAoBJ,eAApB;;AAEA,MAAMK,QAAQ,iBAAOtB,GAAP,CAAW,OAAX,CAAd;AACA,MAAI,iBAAOA,GAAP,CAAW,OAAX,CAAJ,EAAyB;AACvB,sBAAQuB,UAAR,CAAmBD,KAAnB,EACE;AACET,aAAO,CAAEhB,UADX;AAEE2B,iBAAW,KAFb;AAGEC,iBAAW,EAAEC,qBAAqB,GAAvB;AAHb,KADF;AAMD;;AAED,MAAMC,eAAe,4BACnB;AACEC,UAAM;AADR,GADmB,oDAKnB;AACEC,+CADF;AAEEC,iBAAa,CAAC;AACZD,8BADY;AAEZC,mBAAa,CACX;AACED,kDADF;AAEEC,qBAAa,CAAC;AACZD,mDADY;AAEZC,uBAAa,CAAC;AACZD,iDADY;AAEZC,yBAAa,CAAC;AACZD,iDADY;AAEZC,2BAAa,gBAAGC,KAAH,CAAShB,MAAT,IAAmBA,MAAnB,GAA4B,CAACA,MAAD;AAF7B,aAAD;AAFD,WAAD;AAFD,SAAD;AAFf,OADW,EAcX;AACEa,cAAM,GADR;AAEEC;AAFF,OAdW;AAFD,KAAD;AAFf,GALmB,IA8BlBX,KA9BkB,CAArB;;AAgCA,wBACE;AAAA;AAAA,MAAU,OAAOA,KAAjB;AACE;AAAA;AAAA,QAAsB,OAAOA,KAA7B;AACE,2DAAQ,SAASC,kBAAjB,EAAqC,QAAQQ,YAA7C,EAA2D,UAAUK,WAArE;AADF;AADF,GADF,EAMEC,SAASC,cAAT,CAAwB,MAAxB,CANF;AAQD;;AAED,SAASF,WAAT,GAAuB;AACrB,oBAAQZ,GAAR,CAAY,EAAEe,MAAMC,OAAOC,QAAP,CAAgBC,QAAxB,EAAZ;AACA,oBAAQC,QAAR,CAAiBH,OAAOC,QAAP,CAAgBC,QAAjC;AACD;;kBAEc1C,Q","file":"setupApp.js","sourcesContent":["import 'assets/styles/base.postcss';\n\nimport { setupStore } from './setupStore';\nimport React from 'react';\nimport { render } from 'react-dom';\nimport { Provider } from 'react-redux';\nimport {\n  SingleSignOnProvider,\n  IdleTimeoutHandler,\n  routes as singleSignOnRoutes,\n} from 'containers/SingleSignOn';\nimport { Router, browserHistory } from 'react-router';\nimport Store from 'domain/Store';\nimport parseRoutes from 'domain/parseRoutes';\nimport App from 'components/App';\nimport is from 'is_js';\nimport AuthorizationHandler from 'containers/AuthorizationHandler';\nimport ErrorPageHandler from 'containers/ErrorPageHandler';\nimport LoadingOverlayHandler from 'containers/LoadingOverlayHandler';\nimport SaveBarHandler from 'containers/SaveBarHandler';\nimport NoMatchingRouteErrorHandler from 'containers/NoMatchingRouteErrorHandler';\nimport ErrorMessage from 'domain/ErrorMessage';\nimport ReactAI from 'react-appinsights';\nimport Config from 'domain/Config';\nimport Oidc from 'oidc-client';\nimport ReactGA from 'react-ga';\nimport Raven from 'raven-js';\nimport bindPolyfills from 'domain/Polyfills';\nimport log from 'domain/log';\n\nbindPolyfills();\n\nif (PRODUCTION) {\n  ReactAI.init({ instrumentationKey: Config.get('appInsights') }, browserHistory);\n}\n\nOidc.Log.logger = log;\nOidc.Log.level = PRODUCTION ? Oidc.Log.WARN : Oidc.Log.INFO;\n\nRaven.config(Config.get('sentryDsn'), {\n  release: COMMIT,\n  environment: Config.get('sentryEnvironment'),\n  tags: { version: VERSION },\n  debug: ! PRODUCTION,\n}).install();\n\nexport function setupApp({ routes, reducer, errorMessageMap }) {\n  const { store, syncBrowserHistory } = setupStore(reducer);\n\n  Store.set(store);\n  ErrorMessage.setMap(errorMessageMap);\n\n  const gaKey = Config.get('gaKey');\n  if (Config.get('gaKey')) {\n    ReactGA.initialize(gaKey,\n      {\n        debug: ! PRODUCTION,\n        titleCase: false,\n        gaOptions: { siteSpeedSampleRate: 100 },\n      });\n  }\n\n  const parsedRoutes = parseRoutes([\n    {\n      path: '/health-check',\n    },\n    ...singleSignOnRoutes,\n    {\n      component: IdleTimeoutHandler,\n      childRoutes: [{\n        component: App,\n        childRoutes: [\n          {\n            component: LoadingOverlayHandler,\n            childRoutes: [{\n              component: AuthorizationHandler,\n              childRoutes: [{\n                component: ErrorPageHandler,\n                childRoutes: [{\n                  component: SaveBarHandler,\n                  childRoutes: is.array(routes) ? routes : [routes],\n                }],\n              }],\n            }],\n          },\n          {\n            path: '*',\n            component: NoMatchingRouteErrorHandler,\n          },\n        ],\n      }],\n    },\n  ], store);\n\n  render(\n    <Provider store={store}>\n      <SingleSignOnProvider store={store}>\n        <Router history={syncBrowserHistory} routes={parsedRoutes} onUpdate={logPageView} />\n      </SingleSignOnProvider>\n    </Provider>,\n    document.getElementById('root')\n  );\n}\n\nfunction logPageView() {\n  ReactGA.set({ page: window.location.pathname });\n  ReactGA.pageview(window.location.pathname);\n}\n\nexport default setupApp;\n"]}