{"version":3,"sources":["containers/SaveBarHandler/index.jsx"],"names":["HTTP_METHOD_TRIGGERS","EDIT_MODE_MATCH_REGEXP","RegExp","IS_ACTIVE","get","fnToValue","any","props","function","SaveBarHandler","state","isVisible","nextProps","nextMode","params","mode","nextIsAnyApiCallSaving","isAnyApiCallSaving","buttonsToDisplay","_getButtonsToDisplay","newIsVisible","test","size","setState","currentRoute","getCurrentRouteSegment","currentModeName","length","actionButtonsMap","actionButtonsForMode","actionButtons","Object","assign","keys","filter","buttonLabel","buttonDescriptor","visibleWhen","error","err","warn","path","v","key","indexOf","disableWhen","onClick","registerClick","call","route","_redirect","event","category","action","label","param","pushRoute","buildRoute","children","barClasses","SaveBar","__visible","overlayClasses","SaveBar_overlay","SaveBar_inner","SaveBar_text","SaveBar_inner_buttons","map","isPrimary","_getIsDisabled","_getOnClickHandler","linkHref","toArray","routes","propTypes","bool","isRequired","shape","string","array","func","node","mapStateToProps","mapDispatchToProps","dispatch","some","method","startsWith","find","State","isLoading"],"mappings":"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","file":"index.js","sourcesContent":["import styles from './style.postcss';\n\nimport React, { PureComponent } from 'react';\nimport { push } from 'react-router-redux';\nimport { Map } from 'immutable';\nimport is from 'is_js';\nimport log from 'domain/log';\nimport ReactGA from 'react-ga';\nimport classnames from 'classnames';\nimport PropTypes from 'prop-types';\n\nimport connect from 'domain/connect';\nimport ApiCall from 'containers/ApiCalls';\nimport Config from 'domain/Config';\nimport testClass from 'domain/testClass';\nimport SaveBarButton from './SaveBarButton';\n\nconst HTTP_METHOD_TRIGGERS = ['POST', 'PUT', 'DELETE'];\nconst EDIT_MODE_MATCH_REGEXP = new RegExp('^edit$', 'i');\n\n// config feature flag\nconst IS_ACTIVE = !! Config.get('showSavingBarForApiPostsPuts');\n\n// per-route action button settings may be supplied as functions\nconst fnToValue = (any, props) => {\n  if (is.function(any)) {\n    return any(props);\n  }\n  return any;\n};\n\nclass SaveBarHandler extends PureComponent {\n  constructor() {\n    super();\n    this.state = { isVisible: false };\n  }\n\n  componentWillReceiveProps(nextProps) {\n    const {\n      params: { mode: nextMode },\n      isAnyApiCallSaving: nextIsAnyApiCallSaving,\n    } = nextProps;\n    // CONFIG flag check\n    if (! IS_ACTIVE) return;\n    const buttonsToDisplay = this._getButtonsToDisplay(nextProps);\n    let newIsVisible = false;\n    nextIsAnyApiCallSaving && (newIsVisible = true);\n    // we don't want to show the saving bar when editing but there are no buttons\n    EDIT_MODE_MATCH_REGEXP.test(nextMode) && buttonsToDisplay.size && (newIsVisible = true);\n    if (newIsVisible !== this.state.isVisible) {\n      this.setState({ isVisible: newIsVisible });\n    }\n  }\n\n  _getButtonsToDisplay(props = this.props) {\n    const currentRoute = SaveBarHandler.getCurrentRouteSegment(props);\n    const currentModeName = props.params &&\n        props.params.mode &&\n        props.params.mode.length ?\n            props.params.mode :\n            'default';\n\n    // exit out if not in edit mode; we're not visible.\n    if (! EDIT_MODE_MATCH_REGEXP.test(props.params.mode)) return new Map();\n\n    const actionButtonsMap = {};\n    let actionButtonsForMode;\n    if (currentRoute.actionButtons && currentRoute.actionButtons[currentModeName]) {\n      actionButtonsForMode = currentRoute.actionButtons[currentModeName];\n      Object.assign(actionButtonsMap, actionButtonsForMode);\n    }\n\n    const buttonsToDisplay = Object.keys(actionButtonsMap).filter((buttonLabel) => {\n      const buttonDescriptor = actionButtonsMap[buttonLabel];\n      try {\n        if (is.function(buttonDescriptor.visibleWhen)) {\n          if (buttonDescriptor.visibleWhen.length < 2) {\n            return buttonDescriptor.visibleWhen(props);\n          }\n          log.error('Too many arguments in signature of `visibleWhen`. Got',\n              buttonDescriptor.visibleWhen.length);\n        }\n      } catch (err) {\n        log.warn(`Error in \\`visibleWhen\\` in route \\`${currentRoute.path}\\``, err);\n      }\n\n      return true;\n    });\n\n    return new Map(actionButtonsMap)\n        .filter((v, key) => buttonsToDisplay.indexOf(key) >= 0);\n  }\n\n  _getIsDisabled(buttonDescriptor) {\n    const props = this.props;\n    try {\n      if (is.function(buttonDescriptor.disableWhen)) {\n        if (buttonDescriptor.disableWhen.length < 2) {\n          return buttonDescriptor.disableWhen(props);\n        // handle the older form of this method where there are two args - state and props\n        }\n        log.error('Too many arguments in signature of `disableWhen`. Got',\n            buttonDescriptor.disableWhen.length);\n      }\n    } catch (err) {\n      const currentRoute = SaveBarHandler.getCurrentRouteSegment(this.props);\n      log.warn(`Error in \\`disableWhen\\` in route \\`${currentRoute.path}\\``, err);\n    }\n    return false;\n  }\n\n  _getOnClickHandler(buttonDescriptor, buttonLabel) {\n    if (buttonDescriptor.onClick) {\n      if (buttonDescriptor.onClick.length > 1) {\n        log.warn('Deprecated form of `onClick` handler found. It should now have just one argument for props.',\n            buttonDescriptor);\n      }\n      return () => {\n        registerClick();\n        return buttonDescriptor.onClick.call(this, this.props);\n      };\n    }\n    return (buttonDescriptor.route &&\n      (() => {\n        registerClick();\n        return this._redirect(fnToValue(buttonDescriptor.route, this.props));\n      }));\n    function registerClick() {\n      ReactGA.event({\n        category: 'Navigation',\n        action: 'Clicked action button',\n        label: `Clicked ${buttonLabel} in the bottom save bar`,\n      });\n    }\n  }\n\n  _redirect(param) {\n    const { pushRoute, buildRoute } = this.props;\n    pushRoute(buildRoute(param));\n  }\n\n  render() {\n    const { children, isAnyApiCallSaving } = this.props;  // eslint-disable-line\n    const { isVisible } = this.state;\n    const barClasses = {\n      [styles.SaveBar]: true,\n      [styles.__visible]: !! isVisible,\n    };\n    const overlayClasses = {\n      [styles.SaveBar_overlay]: true,\n      [styles.__visible]: !! isAnyApiCallSaving,\n    };\n    return <div className={classnames(styles.SaveBarHandler,\n      testClass('save-bar-handler'))}>\n      <aside className={classnames(barClasses)}>\n        <div className={styles.SaveBar_inner}>\n          <span className={classnames(styles.SaveBar_text, {\n            [styles.__visible]: !! isAnyApiCallSaving,\n          })}>\n            Saving…\n          </span>\n          <div className={styles.SaveBar_inner_buttons}>\n            {\n              this._getButtonsToDisplay()\n                // eslint-disable-next-line react/no-array-index-key\n                .map((buttonDescriptor, buttonLabel) => <SaveBarButton key={buttonLabel}\n                    label={buttonLabel}\n                    isPrimary={buttonDescriptor.isPrimary}\n                    disabled={this._getIsDisabled(buttonDescriptor)}\n                    onClick={this._getOnClickHandler(buttonDescriptor, buttonLabel)}\n                    linkHref={fnToValue(buttonDescriptor.linkHref, this.props)} />)\n                .toArray()\n            }\n          </div>\n        </div>\n      </aside>\n      <div className={classnames(overlayClasses)} />\n      {children}\n    </div>;\n  }\n}\n\nSaveBarHandler.getCurrentRouteSegment = ({ routes }) =>\n  (routes ? routes[routes.length - 1] : {});\n\nSaveBarHandler.propTypes = {\n  isAnyApiCallSaving: PropTypes.bool.isRequired,\n  params: PropTypes.shape({\n    mode: PropTypes.string,\n  }).isRequired,\n  routes: PropTypes.array.isRequired,\n  pushRoute: PropTypes.func.isRequired,\n  buildRoute: PropTypes.func.isRequired,\n  children: PropTypes.node.isRequired,\n};\n\nfunction mapStateToProps(state) {\n  return {\n    isAnyApiCallSaving: !! isAnyApiCallSaving(state),\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return Object.assign(\n    { pushRoute: (path) => dispatch(push(path)) },\n  );\n}\n\nfunction isAnyApiCallSaving(state) {\n  return !! state.get('apiCalls')\n    .filter((call, key) =>\n      HTTP_METHOD_TRIGGERS.some((method) => key.startsWith(method)))\n    .find((call) => ApiCall.State.isLoading(call));\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SaveBarHandler);\n"]}