{"version":3,"sources":["containers/Header/NotificationsTray/index.jsx"],"names":["NotificationsTray","state","viewingNotification","_onNotificationClicked","bind","_onClickBackToNotifications","_onCalloutOpenStateChanged","_renderCalloutPopupContent","ev","element","currentTarget","notificationId","dataset","setState","props","notifications","get","isOpen","NotificationsTray_popup_slide","__active","__previous","NotificationsTray_popup_heading","size","NotificationsTray_popup_empty","NotificationsTray_popup_list","map","notification","NotificationsTray_notification","NotificationsTray_notification_blurb","blurb","NotificationsTray_notification_time","moment","fromNow","NotificationsTray_notification_chevron","__clickable","NotificationsTray_popup_heading_chevron","getNotificationViewNode","_callout","close","NotificationsTray_popup","comp","NotificationsTray_icon","propTypes","PropTypes","shape","func","isRequired","mapStateToProps","path","source","from","deref"],"mappings":"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","file":"index.js","sourcesContent":["import styles from './style.postcss';\n\nimport React, { PureComponent } from 'react';\nimport Cursor from 'immutable-cursor';\nimport classnames from 'classnames';\nimport Config from 'domain/Config';\nimport connect from 'domain/connect';\nimport Icon from 'components/Icon';\nimport Callout from 'components/Callout';\n\nclass NotificationsTray extends PureComponent {\n  constructor() {\n    super();\n    this.state = { viewingNotification: null };\n    this._onNotificationClicked = this._onNotificationClicked.bind(this);\n    this._onClickBackToNotifications = this._onClickBackToNotifications.bind(this);\n    this._onCalloutOpenStateChanged = this._onCalloutOpenStateChanged.bind(this);\n    this._renderCalloutPopupContent = this._renderCalloutPopupContent.bind(this);\n  }\n\n  _onNotificationClicked(ev) {\n    const element = ev.currentTarget;\n    const { notificationId } = element.dataset;\n    this.setState({ viewingNotification: this.props.notifications.get(notificationId) });\n  }\n\n  _onClickBackToNotifications() {\n    this.setState({ viewingNotification: null });\n  }\n\n  _onCalloutOpenStateChanged(isOpen) {\n    if (! isOpen || ! this.state.viewingNotification) return;\n    this.setState({ viewingNotification: null });\n  }\n\n  _renderCalloutPopupContent() {\n    const { notifications } = this.props;\n    const { viewingNotification } = this.state;\n    return <div>\n      <div className={classnames(styles.NotificationsTray_popup_slide, {\n        [styles.__active]: ! this.state.viewingNotification,\n        [styles.__previous]: !! this.state.viewingNotification,\n      })}>\n        <div className={styles.NotificationsTray_popup_heading}>\n          <h2>Notifications</h2>\n        </div>\n        {! notifications || ! notifications.size ?\n          <div className={styles.NotificationsTray_popup_empty}>\n            <h1>Hello!</h1>\n            <p>You don't have any notifications yet.</p>\n            <aside>New notifications will appear here when <br />\n              teachers add internal notes for your students.</aside>\n          </div> : null}\n        {notifications && notifications.size ?\n          <ul className={styles.NotificationsTray_popup_list}>\n            {notifications.map((notification, notificationId) => <li>\n              <div className={styles.NotificationsTray_notification}\n                  onClick={this._onNotificationClicked}\n                  data-notification-id={notificationId}\n                  role=\"button\"\n                  tabIndex=\"0\">\n                <span className={styles.NotificationsTray_notification_blurb}>\n                  {notification.blurb}\n                </span>\n                <span className={styles.NotificationsTray_notification_time}>\n                  {notification.moment.fromNow()}\n                </span>\n                <Icon className={styles.NotificationsTray_notification_chevron}\n                    id=\"chevron-small-right\" />\n              </div>\n            </li>)}\n          </ul> : null}\n      </div>\n      <div className={classnames(styles.NotificationsTray_popup_slide, {\n        [styles.__active]: !! this.state.viewingNotification,\n      })}>\n        <div className={classnames(styles.NotificationsTray_popup_heading, styles.__clickable)}\n            onClick={this._onClickBackToNotifications}\n            role=\"button\"\n            tabIndex=\"-1\">\n          <Icon className={styles.NotificationsTray_popup_heading_chevron}\n              id=\"chevron-small-left\" />\n          <h2>Back to notifications</h2>\n        </div>\n        {viewingNotification && viewingNotification.getNotificationViewNode &&\n            viewingNotification.getNotificationViewNode(this)}\n      </div>\n    </div>;\n  }\n\n  close() {\n    if (! this._callout) return;\n    this._callout.close();\n  }\n\n  render() {\n    return <Callout popupClassName={styles.NotificationsTray_popup}\n        content={this._renderCalloutPopupContent()}\n        onOpenStateChanged={this._onCalloutOpenStateChanged}\n        ref={(comp) => { this._callout = comp; }}>\n      <div className={styles.NotificationsTray}>\n        <Icon className={styles.NotificationsTray_icon}\n            id=\"bell\" />\n      </div>\n    </Callout>;\n  }\n}\n\nNotificationsTray.propTypes = {\n  notifications: React.PropTypes.shape({\n    map: React.PropTypes.func.isRequired,\n    get: React.PropTypes.func.isRequired,\n  }),\n};\n\nfunction mapStateToProps(state) {\n  const path = Config.get('notificationsTray').source;\n  const notifications = Cursor.from(state, path).deref();\n  return { notifications };\n}\n\nexport default connect(mapStateToProps)(NotificationsTray);\n"]}