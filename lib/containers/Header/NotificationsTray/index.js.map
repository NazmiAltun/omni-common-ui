{"version":3,"sources":["containers/Header/NotificationsTray/index.jsx"],"names":["NotificationsTray","state","viewingNotification","isMarkingMode","notificationIdsToMarkRead","_onNotificationClicked","bind","_onClickBackToNotifications","_onCalloutOpenStateChanged","_renderCalloutPopupContent","_onMarkAsReadClick","_onCancelClick","_onMarkClick","ev","preventDefault","stopPropagation","element","currentTarget","notificationId","dataset","has","setState","add","delete","props","notifications","get","isOpen","size","markNotificationAsRead","includes","NotificationsTray_notification_checkbox","notification","NotificationsTray_notification","_renderNotificationCheckbox","NotificationsTray_notification_blurb","blurb","NotificationsTray_notification_time","moment","fromNow","NotificationsTray_notification_chevron","NotificationsTray_popup_list","map","_renderNotification","checked","keys","NotificationsTray_notification_footer","length","_onCheckAllNotifications","NotificationsTray_notification_footer_checkAll","NotificationsTray_notification_footer_btns","Type","default","NotificationsTray_notification_footer_cancel","primary","NotificationsTray_notification_footer_mark","headerBtnClassName","NotificationsTray_popup_heading_btn","__inActive","NotificationsTray_popup_slide","__active","__previous","NotificationsTray_popup_heading","NotificationsTray_popup_empty","_renderNotifications","_renderNotificationFooter","__clickable","NotificationsTray_popup_heading_secondary","NotificationsTray_popup_heading_chevron","getNotificationViewNode","_callout","close","NotificationsTray_popup","comp","NotificationsTray_icon","NotificationsTray_bubble","propTypes","shape","func","isRequired","accessToken","string","mapStateToProps","path","source","from","deref","mapDispatchToProps","dispatch","markAsReadDispatchConfig","markAsRead","apiUrl","method","notificationIds","data","JSON","stringify","id","model","actionCreator","actionObjectName","url","requestExtras","disableDefault","payload","body","successExtras","failureExtras"],"mappings":"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","file":"index.js","sourcesContent":["import styles from './style.postcss';\n\nimport React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport { Set } from 'immutable';\nimport Cursor from 'immutable-cursor';\nimport { CSSTransitionGroup } from 'react-transition-group';\nimport classnames from 'classnames';\nimport { fetch, buildUrl } from 'domain/Api';\nimport Config from 'domain/Config';\nimport createApiActionCreator from 'domain/createApiActionCreator';\nimport connect from 'domain/connect';\nimport Icon from 'components/Icon';\nimport Callout from 'components/Callout';\nimport Button from 'components/Button';\nimport Checkbox from 'components/Checkbox';\n\nclass NotificationsTray extends PureComponent {\n  constructor() {\n    super();\n    this.state = {\n      viewingNotification: null,\n      isMarkingMode: false,\n      notificationIdsToMarkRead: new Set(),\n    };\n    this._onNotificationClicked = this._onNotificationClicked.bind(this);\n    this._onClickBackToNotifications = this._onClickBackToNotifications.bind(this);\n    this._onCalloutOpenStateChanged = this._onCalloutOpenStateChanged.bind(this);\n    this._renderCalloutPopupContent = this._renderCalloutPopupContent.bind(this);\n    this._onMarkAsReadClick = this._onMarkAsReadClick.bind(this);\n    this._onCancelClick = this._onCancelClick.bind(this);\n    this._onMarkClick = this._onMarkClick.bind(this);\n  }\n\n  _onNotificationClicked(ev) {\n    ev.preventDefault();\n    ev.stopPropagation();\n    const element = ev.currentTarget;\n    const { notificationId } = element.dataset;\n\n    if (this.state.isMarkingMode) {\n      if (! this.state.notificationIdsToMarkRead.has(notificationId)) {\n        return this.setState({\n          notificationIdsToMarkRead: this.state.notificationIdsToMarkRead.add(notificationId),\n        });\n      }\n      return this.setState({\n        notificationIdsToMarkRead: this.state.notificationIdsToMarkRead.delete(notificationId),\n      });\n    }\n    return this.setState({ viewingNotification: this.props.notifications.get(notificationId) });\n  }\n\n  _onClickBackToNotifications() {\n    this.setState({ viewingNotification: null });\n  }\n\n  _onCalloutOpenStateChanged(isOpen) {\n    if (! isOpen || ! this.state.viewingNotification) return;\n    this.setState({ viewingNotification: null });\n  }\n\n  _onMarkAsReadClick() {\n    if (! this.state.isMarkingMode) {\n      this.setState({\n        isMarkingMode: true,\n      });\n    }\n  }\n\n  _onCancelClick() {\n    this.setState({\n      isMarkingMode: false,\n    });\n  }\n\n  _onMarkClick() {\n    if (this.state.notificationIdsToMarkRead.size !== 0) {\n      this.props.markNotificationAsRead(this.state.notificationIdsToMarkRead);\n    }\n    this.setState({\n      notificationIdsToMarkRead: new Set(),\n      isMarkingMode: false,\n    });\n  }\n\n  _renderNotificationCheckbox(notificationId) {\n    if (this.state.isMarkingMode) {\n      return <Checkbox name={notificationId}\n          checked={this.state.notificationIdsToMarkRead.includes(notificationId)}\n          className={styles.NotificationsTray_notification_checkbox}\n          id={notificationId} />;\n    }\n    return null;\n  }\n\n  _renderNotification(notification, notificationId) {\n    return <li>\n      <div className={styles.NotificationsTray_notification}\n          onClick={this._onNotificationClicked}\n          data-notification-id={notificationId}\n          role=\"button\"\n          tabIndex=\"0\">\n        {this._renderNotificationCheckbox(notificationId)}\n        <span className={styles.NotificationsTray_notification_blurb}>\n          {notification.blurb}\n        </span>\n        <span className={styles.NotificationsTray_notification_time}>\n          {notification.moment.fromNow()}\n        </span>\n        <Icon className={styles.NotificationsTray_notification_chevron}\n            id=\"chevron-small-right\" />\n      </div>\n    </li>;\n  }\n\n  _renderNotifications(notifications) {\n    if (notifications && notifications.size) {\n      return <ul className={styles.NotificationsTray_popup_list}>\n        {notifications.map((notification, notificationId) =>\n          this._renderNotification(notification, notificationId)\n        )}\n\n      </ul>;\n    }\n    return null;\n  }\n\n  _onCheckAllNotifications(checked, notifications) {\n    if (checked) {\n      this.setState({\n        notificationIdsToMarkRead: [...notifications.keys()],\n      });\n    } else {\n      this.setState({\n        notificationIdsToMarkRead: [],\n      });\n    }\n  }\n\n  _renderNotificationFooter(notifications) {\n    if (this.state.isMarkingMode) {\n      return <div className={styles.NotificationsTray_notification_footer}>\n        <div>\n          <Checkbox name=\"check-all\"\n              id=\"check-all\"\n              checked={this.state.notificationIdsToMarkRead.length === notifications.size}\n              onChange={(checked) => { this._onCheckAllNotifications(checked, notifications); }}\n              className={styles.NotificationsTray_notification_footer_checkAll} />\n          <span>All</span>\n        </div>\n        <div className={styles.NotificationsTray_notification_footer_btns}>\n          <Button type={Button.Type.default}\n              className={styles.NotificationsTray_notification_footer_cancel}\n              onClick={this._onCancelClick}>\n            Cancel\n          </Button>\n          <Button type={Button.Type.primary}\n              className={styles.NotificationsTray_notification_footer_mark}\n              onClick={this._onMarkClick}>\n            Mark\n          </Button>\n        </div>\n      </div>;\n    }\n    return null;\n  }\n\n  _renderCalloutPopupContent() {\n    const { notifications } = this.props;\n    const { viewingNotification } = this.state;\n    const headerBtnClassName = classnames(styles.NotificationsTray_popup_heading_btn, {\n      [styles.__inActive]: this.state.isMarkingMode,\n    });\n    return <div>\n      <div className={classnames(styles.NotificationsTray_popup_slide, {\n        [styles.__active]: ! this.state.viewingNotification,\n        [styles.__previous]: !! this.state.viewingNotification,\n      })}>\n        <div className={styles.NotificationsTray_popup_heading}>\n          <h2>Notifications</h2>\n          <a className={headerBtnClassName}\n              onClick={this._onMarkAsReadClick}>Mark as read</a>\n        </div>\n        {! notifications || ! notifications.size ?\n          <div className={styles.NotificationsTray_popup_empty}>\n            <h1>Hello!</h1>\n            <p>You don't have any notifications yet.</p>\n            <aside>New notifications will appear here when <br />\n              teachers add internal notes for your students.</aside>\n          </div> : null}\n        {this._renderNotifications(notifications)}\n        {this._renderNotificationFooter(notifications)}\n      </div>\n      <div className={classnames(styles.NotificationsTray_popup_slide, {\n        [styles.__active]: !! this.state.viewingNotification,\n      })}>\n        <div className={classnames(styles.NotificationsTray_popup_heading, styles.__clickable)}\n            onClick={this._onClickBackToNotifications}\n            role=\"button\"\n            tabIndex=\"-1\">\n          <div className={styles.NotificationsTray_popup_heading_secondary}>\n            <Icon className={styles.NotificationsTray_popup_heading_chevron}\n                id=\"chevron-small-left\" />\n            <h2>Back to notifications</h2>\n          </div>\n        </div>\n        {viewingNotification && viewingNotification.getNotificationViewNode &&\n            viewingNotification.getNotificationViewNode(this)}\n      </div>\n    </div>;\n  }\n\n  close() {\n    if (! this._callout) return;\n    this._callout.close();\n  }\n\n  render() {\n    const { notifications } = this.props;\n    return <Callout popupClassName={styles.NotificationsTray_popup}\n        content={this._renderCalloutPopupContent()}\n        onOpenStateChanged={this._onCalloutOpenStateChanged}\n        ref={(comp) => { this._callout = comp; }}>\n      <div className={styles.NotificationsTray}>\n        <Icon className={styles.NotificationsTray_icon}\n            id=\"bell\" />\n        <CSSTransitionGroup transitionName=\"bubble\"\n            transitionEnterTimeout={500}\n            transitionLeaveTimeout={500}>\n          {notifications && notifications.size ?\n            <aside className={styles.NotificationsTray_bubble}>\n              {notifications.size > 99 ? '…' : notifications.size}\n            </aside> : null}\n        </CSSTransitionGroup>\n      </div>\n    </Callout>;\n  }\n}\n\nNotificationsTray.propTypes = {\n  notifications: PropTypes.shape({\n    map: PropTypes.func.isRequired,\n    get: PropTypes.func.isRequired,\n  }),\n  accessToken: PropTypes.string,\n  markNotificationAsRead: PropTypes.func,\n};\n\nfunction mapStateToProps(state) {\n  const path = Config.get('notificationsTray').source;\n  const notifications = Cursor.from(state, path).deref();\n  return { notifications };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  const markAsReadDispatchConfig = Config.get('notificationsTray').markAsRead.dispatch;\n  const apiUrl = buildUrl(markAsReadDispatchConfig.apiUrl);\n  const method = markAsReadDispatchConfig.method;\n  return {\n    markNotificationAsRead: (notificationIds) => {\n      const data = JSON.stringify(notificationIds.map((id) => {\n        const model = { id };\n        return model;\n      }));\n      const actionCreator = createApiActionCreator({\n        actionObjectName: 'MARK_NOTIFICATIONS_READ',  // SUBMIT_MARK_NOTIFICATIONS_READ_REQUEST, SUBMIT_..._SUCCESS\n        url: apiUrl,\n        method,\n        requestExtras: {\n          disableDefault: true,\n          payload: fetch(apiUrl, {\n            method,\n            body: data,\n          }),\n          notificationIds,\n        },\n        successExtras: { disableDefault: true, notificationIds, },\n        failureExtras: { disableDefault: true, notificationIds, },\n      });\n      actionCreator(dispatch);\n    },\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(NotificationsTray);\n"]}