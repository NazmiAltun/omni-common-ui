{"version":3,"sources":["containers/Header/NotificationsTray/index.jsx"],"names":["NotificationsTray","state","open","_renderCalloutPopupContent","bind","notifications","props","NotificationsTray_popup_heading","size","NotificationsTray_popup_empty","NotificationsTray_popup_list","map","notification","NotificationsTray_notification","NotificationsTray_notification_blurb","blurb","NotificationsTray_notification_time","moment","fromNow","NotificationsTray_notification_chevron","NotificationsTray_popup","NotificationsTray_icon","propTypes","PropTypes","shape","func","isRequired","mapStateToProps","path","get","source","from","deref"],"mappings":";;;;;;;;AAAA;;;;AAEA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;;;;;;;IAEMA,iB;;;AACJ,+BAAc;AAAA;;AAAA;;AAEZ,UAAKC,KAAL,GAAa,EAAEC,MAAM,KAAR,EAAb;AACA,UAAKC,0BAAL,GAAkC,MAAKA,0BAAL,CAAgCC,IAAhC,OAAlC;AAHY;AAIb;;;;iDAE4B;AAAA,UACnBC,aADmB,GACD,KAAKC,KADJ,CACnBD,aADmB;;AAE3B,aAAO;AAAA;AAAA;AACL;AAAA;AAAA,YAAK,WAAW,gBAAOE,+BAAvB;AACE;AAAA;AAAA;AAAA;AAAA;AADF,SADK;AAIJ,SAAEF,aAAF,IAAmB,CAAEA,cAAcG,IAAnC,GACC;AAAA;AAAA,YAAK,WAAW,gBAAOC,6BAAvB;AACE;AAAA;AAAA;AAAA;AAAA,WADF;AAEE;AAAA;AAAA;AAAA;AAAA,WAFF;AAGE;AAAA;AAAA;AAAA;AAA8C,qDAA9C;AAAA;AAAA;AAHF,SADD,GAMU,IAVN;AAWJJ,yBAAiBA,cAAcG,IAA/B,GACC;AAAA;AAAA,YAAI,WAAW,gBAAOE,4BAAtB;AACGL,wBAAcM,GAAd,CAAkB,UAACC,YAAD;AAAA,mBAAkB;AAAA;AAAA;AACnC;AAAA;AAAA,kBAAK,WAAW,gBAAOC,8BAAvB;AACE;AAAA;AAAA,oBAAM,WAAW,gBAAOC,oCAAxB;AACGF,+BAAaG;AADhB,iBADF;AAIE;AAAA;AAAA,oBAAM,WAAW,gBAAOC,mCAAxB;AACGJ,+BAAaK,MAAb,CAAoBC,OAApB;AADH,iBAJF;AAOE,gEAAM,WAAW,gBAAOC,sCAAxB;AACI,sBAAG,qBADP;AAPF;AADmC,aAAlB;AAAA,WAAlB;AADH,SADD,GAcS;AAzBL,OAAP;AA2BD;;;6BAEQ;AACP,aAAO;AAAA;AAAA,UAAS,SAAS,KAAKhB,0BAAL,EAAlB;AACH,0BAAgB,gBAAOiB,uBADpB;AAEL;AAAA;AAAA,YAAK,WAAW,gBAAOpB,iBAAvB;AACE,0DAAM,WAAW,gBAAOqB,sBAAxB;AACI,gBAAG,MADP;AADF;AAFK,OAAP;AAOD;;;;;;AAGHrB,kBAAkBsB,SAAlB,GAA8B;AAC5BjB,iBAAe,gBAAMkB,SAAN,CAAgBC,KAAhB,CAAsB;AACnCb,SAAK,gBAAMY,SAAN,CAAgBE,IAAhB,CAAqBC;AADS,GAAtB;AADa,CAA9B;;AAMA,SAASC,eAAT,CAAyB1B,KAAzB,EAAgC;AAC9B,MAAM2B,OAAO,iBAAOC,GAAP,CAAW,mBAAX,EAAgCC,MAA7C;AACA,MAAMzB,gBAAgB,0BAAO0B,IAAP,CAAY9B,KAAZ,EAAmB2B,IAAnB,EAAyBI,KAAzB,EAAtB;AACA,SAAO,EAAE3B,4BAAF,EAAP;AACD;;kBAEc,uBAAQsB,eAAR,EAAyB3B,iBAAzB,C","file":"index.js","sourcesContent":["import styles from './style.postcss';\n\nimport React, { PureComponent } from 'react';\nimport Cursor from 'immutable-cursor';\nimport Config from 'domain/Config';\nimport connect from 'domain/connect';\nimport Icon from 'components/Icon';\nimport Callout from 'components/Callout';\n\nclass NotificationsTray extends PureComponent {\n  constructor() {\n    super();\n    this.state = { open: false };\n    this._renderCalloutPopupContent = this._renderCalloutPopupContent.bind(this);\n  }\n\n  _renderCalloutPopupContent() {\n    const { notifications } = this.props;\n    return <div>\n      <div className={styles.NotificationsTray_popup_heading}>\n        <h2>Notifications</h2>\n      </div>\n      {! notifications || ! notifications.size ?\n        <div className={styles.NotificationsTray_popup_empty}>\n          <h1>Hello!</h1>\n          <p>You don't have any notifications yet.</p>\n          <aside>New notifications will appear here when<br />\n            teachers add internal notes for your students.</aside>\n        </div> : null}\n      {notifications && notifications.size ?\n        <ul className={styles.NotificationsTray_popup_list}>\n          {notifications.map((notification) => <li>\n            <div className={styles.NotificationsTray_notification}>\n              <span className={styles.NotificationsTray_notification_blurb}>\n                {notification.blurb}\n              </span>\n              <span className={styles.NotificationsTray_notification_time}>\n                {notification.moment.fromNow()}\n              </span>\n              <Icon className={styles.NotificationsTray_notification_chevron}\n                  id=\"chevron-small-right\" />\n            </div>\n          </li>)}\n        </ul> : null}\n    </div>;\n  }\n\n  render() {\n    return <Callout content={this._renderCalloutPopupContent()}\n        popupClassName={styles.NotificationsTray_popup}>\n      <div className={styles.NotificationsTray}>\n        <Icon className={styles.NotificationsTray_icon}\n            id=\"bell\" />\n      </div>\n    </Callout>;\n  }\n}\n\nNotificationsTray.propTypes = {\n  notifications: React.PropTypes.shape({\n    map: React.PropTypes.func.isRequired,\n  }),\n};\n\nfunction mapStateToProps(state) {\n  const path = Config.get('notificationsTray').source;\n  const notifications = Cursor.from(state, path).deref();\n  return { notifications };\n}\n\nexport default connect(mapStateToProps)(NotificationsTray);\n"]}