{"version":3,"sources":["containers/Header/component.jsx"],"names":["Header","props","debug","impersonate","classes","__impersonating","Header_burger","e","function","onHamburgerClick","Header_logo","Header_wrap","get","router","routes","propTypes","any","isRequired","array","object","func","mapStateToProps","state","userProfile","impersonated_user_email","email","sub","impersonated_user_id","avatarUrl","impersonated_user_avatar_url","gender","impersonated_user_gender","name","impersonated_user_name","familyName","impersonated_user_family_name","middleName","impersonated_user_middle_name","givenName","impersonated_user_given_name"],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;;;AAEA,IAAMA,SAAS,SAATA,MAAS,CAACC,KAAD,EAAW;AACxB,gBAAIC,KAAJ,CAAU,0BAAV,EAAsCD,MAAME,WAA5C;AACA,MAAMC,UAAU,0BAAW,gBAAOJ,MAAlB,EACZ,yBAAU,QAAV,CADY,sBAET,gBAAOK,eAFE,EAEgBJ,MAAME,WAFtB,EAAhB;AAGA,SAAO;AAAA;AAAA,MAAK,WAAWC,OAAhB;AACL;AAAA;AAAA,QAAK,WAAW,0BAAW,gBAAOE,aAAlB,EAAiC,yBAAU,WAAV,CAAjC,CAAhB;AACI,iBAAS,iBAACC,CAAD;AAAA,iBAAO,gBAAGC,QAAH,CAAYP,MAAMQ,gBAAlB,KAAuCR,MAAMQ,gBAAN,CAAuBF,CAAvB,CAA9C;AAAA,SADb;AAEE,sDAAM,IAAG,QAAT;AAFF,KADK;AAKL,2CAAK,WAAW,gBAAOG,WAAvB,GALK;AAML;AAAA;AAAA,QAAK,WAAW,gBAAOC,WAAvB;AACG,uBAAOC,GAAP,CAAW,mBAAX,KAAmC,CAAEX,MAAME,WAA3C,GACC,gEADD,GAEC,IAHJ;AAIE,0DAAU,aAAaF,MAAME,WAA7B;AACI,gBAAQF,MAAMY,MADlB;AAEI,gBAAQZ,MAAMa,MAFlB;AAJF;AANK,GAAP;AAeD,CApBD;;AAsBAd,OAAOe,SAAP,GAAmB;AACjBF,UAAQ,oBAAUG,GAAV,CAAcC,UADL;AAEjBH,UAAQ,oBAAUI,KAAV,CAAgBD,UAFP;AAGjBd,eAAa,oBAAUgB,MAHN;AAIjBV,oBAAkB,oBAAUW;AAJX,CAAnB;;AAOA,SAASC,eAAT,CAAyBC,KAAzB,EAAgC;AAC9B,MAAMC,cACFD,MAAMV,GAAN,CAAU,cAAV,EAA0BA,GAA1B,CAA8B,MAA9B,KACAU,MAAMV,GAAN,CAAU,cAAV,EAA0BA,GAA1B,CAA8B,MAA9B,EAAsCA,GAAtC,CAA0C,SAA1C,CAFJ;AAGA,MAAIT,oBAAJ;AACA,MAAI,CAAEoB,YAAYC,uBAAlB,EAA2C,OAAO,EAAErB,wBAAF,EAAP;;AAE3CA,gBAAc;AACZsB,WAAOF,YAAYC,uBADP;AAEZE,SAAKH,YAAYI,oBAFL;AAGZC,eAAWL,YAAYM,4BAHX;AAIZC,YAAQP,YAAYQ,wBAJR;AAKZC,UAAMT,YAAYU,sBALN;AAMZC,gBAAYX,YAAYY,6BANZ;AAOZC,gBAAYb,YAAYc,6BAPZ;AAQZC,eAAWf,YAAYgB;AARX,GAAd;AAUA,SAAO,EAAEpC,wBAAF,EAAP;AACD;;kBAEc,sBAAQkB,eAAR,EAAyB,IAAzB,EAA+B,oBAAKrB,MAAL,CAA/B,C","file":"component.js","sourcesContent":["import React from 'react';\nimport pure from 'recompose/pure';\nimport classnames from 'classnames';\nimport styles from './style.postcss';\nimport log from 'domain/log';\nimport { connect } from 'domain/connect';\nimport Icon from 'components/Icon';\nimport is from 'is_js';\nimport Config from 'domain/Config';\nimport testClass from 'domain/testClass';\nimport PropTypes from 'prop-types';\nimport UserInfo from './UserInfo';\nimport NotificationsTray from './NotificationsTray';\n\nconst Header = (props) => {\n  log.debug('Header - impersonateData', props.impersonate);\n  const classes = classnames(styles.Header,\n      testClass('header'),\n      { [styles.__impersonating]: props.impersonate });\n  return <div className={classes}>\n    <div className={classnames(styles.Header_burger, testClass('hamburger'))}\n        onClick={(e) => is.function(props.onHamburgerClick) && props.onHamburgerClick(e)}>\n      <Icon id=\"burger\" />\n    </div>\n    <div className={styles.Header_logo} />\n    <div className={styles.Header_wrap}>\n      {Config.get('notificationsTray') && ! props.impersonate ?\n        <NotificationsTray /> :\n        null}\n      <UserInfo impersonate={props.impersonate}\n          router={props.router}\n          routes={props.routes} />\n    </div>\n  </div>;\n};\n\nHeader.propTypes = {\n  router: PropTypes.any.isRequired,\n  routes: PropTypes.array.isRequired,\n  impersonate: PropTypes.object,\n  onHamburgerClick: PropTypes.func,\n};\n\nfunction mapStateToProps(state) {\n  const userProfile =\n      state.get('singleSignOn').get('user') &&\n      state.get('singleSignOn').get('user').get('profile');\n  let impersonate;\n  if (! userProfile.impersonated_user_email) return { impersonate };\n\n  impersonate = {\n    email: userProfile.impersonated_user_email,\n    sub: userProfile.impersonated_user_id,\n    avatarUrl: userProfile.impersonated_user_avatar_url,\n    gender: userProfile.impersonated_user_gender,\n    name: userProfile.impersonated_user_name,\n    familyName: userProfile.impersonated_user_family_name,\n    middleName: userProfile.impersonated_user_middle_name,\n    givenName: userProfile.impersonated_user_given_name,\n  };\n  return { impersonate };\n}\n\nexport default connect(mapStateToProps, null)(pure(Header));\n"]}