{"version":3,"sources":["containers/Privileges/actions.js"],"names":["havePrivilegesLoaded","fetchPrivilegesIfNeeded","isLoading","FETCH_PRIVILEGES_REQUEST","FETCH_PRIVILEGES_SUCCESS","FETCH_PRIVILEGES_FAILURE","FETCH_PRIVILEGES_INVALIDATE","buildPrivilegesUrl","userId","method","getSSOUserId","state","user","get","sub","dispatch","getState","url","callState","find","State","isValue","hasSucceeded","keyConfig","apiStateKey","Key","create","shouldFetchPrivileges","fetchPrivileges","shouldPerform","debug","privileges","didInvalidate","fetchPrivilegesRequest","payload","then","json","fetchPrivilegesSuccess","catch","error","fetchPrivilegesFailure","createAction","type","apiCallState"],"mappings":"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","file":"actions.js","sourcesContent":["import { fetch, buildUrl } from 'domain/Api';\nimport log from 'domain/log';\nimport ApiCall from 'containers/ApiCalls';\n\nexport const FETCH_PRIVILEGES_REQUEST = 'FETCH_PRIVILEGES_REQUEST';\nexport const FETCH_PRIVILEGES_SUCCESS = 'FETCH_PRIVILEGES_SUCCESS';\nexport const FETCH_PRIVILEGES_FAILURE = 'FETCH_PRIVILEGES_FAILURE';\nexport const FETCH_PRIVILEGES_INVALIDATE = 'FETCH_PRIVILEGES_INVALIDATE';\n\nconst buildPrivilegesUrl = (userId) => buildUrl(`/users/${userId}/privileges`);\nconst method = 'GET';\n\nfunction getSSOUserId(state) {\n  const user = state.get('singleSignOn').get('user');\n\n  // logging out?\n  if (! user) return null;\n\n  const userId = user.get('profile').sub;\n  return userId;\n}\n\nexport function havePrivilegesLoaded() {\n  return (dispatch, getState) => {\n    const state = getState();\n    const userId = getSSOUserId(state);\n    if (! userId) return false;\n    const url = buildPrivilegesUrl(userId);\n    const callState = ApiCall.find(state, { url, method });\n    return callState &&\n        ApiCall.State.isValue(callState) &&\n        ApiCall.State.hasSucceeded(callState);\n  };\n}\n\nexport function fetchPrivilegesIfNeeded() {\n  return (dispatch, getState) => {\n    const state = getState();\n    const userId = getSSOUserId(state);\n    if (! userId) return false;\n    const url = buildPrivilegesUrl(userId);\n    const keyConfig = { method, url };\n    const apiStateKey = ApiCall.Key.create(keyConfig);\n\n    if (! shouldFetchPrivileges(getState())) {\n      return false;\n    }\n\n    return fetchPrivileges();\n\n    function shouldFetchPrivileges() {\n      if (ApiCall.shouldPerform(state, apiStateKey)) {\n        log.debug('fetchPrivilegesIfNeeded - ApiCall.shouldPerform() returned true');\n        return true;\n      }\n\n      const privileges = state.get('privileges');\n      if (privileges.didInvalidate === true) {\n        log.debug('fetchPrivilegesIfNeeded - didInvalidate is true');\n        return true;\n      }\n\n      return false;\n    }\n\n    function fetchPrivileges() {\n      log.debug('fetchPrivilegesIfNeeded - Will fetch');\n      return dispatch(fetchPrivilegesRequest()).payload\n        .then((json) => dispatch(fetchPrivilegesSuccess(json)))\n        .catch((error) => { dispatch(fetchPrivilegesFailure(error)); throw error; });\n    }\n\n    function fetchPrivilegesRequest() {\n      return ApiCall.createAction({\n        type: FETCH_PRIVILEGES_REQUEST,\n        payload: fetch(url),\n        ...keyConfig,\n      });\n    }\n\n    function fetchPrivilegesSuccess(privileges) {\n      return ApiCall.createAction({\n        type: FETCH_PRIVILEGES_SUCCESS,\n        privileges,\n        ...keyConfig,\n      });\n    }\n\n    function fetchPrivilegesFailure(error) {\n      return ApiCall.createAction({\n        type: FETCH_PRIVILEGES_FAILURE,\n        error,\n        ...keyConfig,\n      });\n    }\n  };\n}\n\nexport function isLoading(state) {\n  const userId = getSSOUserId(state);\n  if (! userId) return false;\n  const keyConfig = { method: 'GET', url: buildUrl(`/users/${userId}/privileges`) };\n  const apiCallState = ApiCall.find(state, keyConfig);\n\n  return ! ApiCall.State.isValue(apiCallState) || ApiCall.State.isLoading(apiCallState);\n}\n"]}