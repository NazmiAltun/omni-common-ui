{"version":3,"sources":["containers/ErrorPageHandler/spec.jsx"],"names":["ErrorPage","requireComponent","Config","require","merge","getComponent","ErrorPageHandler","getMapStateToProps","mapStateToProps","describe","props","buildProps","response","error","not","undefined","erroredApi","State","createFailed","erroredApis","Error","clean","spy","location","pathname","beforeEach","it","wrapper","to","have","descendants","context","called","be","false","setProps","args","eql","errorHandlerRendersPopUps","status","state","ownProps","buildState","apiCalls","createLoading","routes","errorPage","isList","equal","isEmpty","config","failedCall1","failedCall2","get","disableDefault","size"],"mappings":"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","file":"spec.js","sourcesContent":["import React from 'react';\nimport { expect } from 'chai';\nimport { mount } from 'enzyme';\nimport ApiCall from 'containers/ApiCalls';\nimport { Map, List } from 'immutable';\nimport Sinon from 'sinon';\nimport AlertDialog from 'components/AlertDialog';\nimport _Config from 'domain/Config';\nimport { ApiError } from 'domain/Api';\nimport is from 'is_js';\n\nconst ErrorPage = () => null;\n// eslint-disable-next-line import/no-webpack-loader-syntax, global-require\nconst requireComponent = (Config) => require('inject-loader?components/ErrorPage&domain/Config!./')({\n  'components/ErrorPage': ErrorPage,\n  'domain/Config': _Config.merge(Config),\n});\n\nconst getComponent = (Config) => requireComponent(Config).ErrorPageHandler;\nconst getMapStateToProps = (Config) => requireComponent(Config).mapStateToProps;\n\ndescribe('<ErrorPageHandler />', () => {\n  describe('component', () => {\n    let props;\n    let ErrorPageHandler;\n\n    const buildProps = (response = {}) => {\n      const error = new ApiError(response);\n      if (is.not.undefined(response.response)) {\n        error.response = response.response;\n      }\n\n      const erroredApi = ApiCall.State.createFailed('id1', error);\n      return {\n        erroredApis: new List([\n          erroredApi,\n          ApiCall.State.createFailed('id2', new Error()),\n        ]),\n        erroredApi,\n        clean: Sinon.spy(),\n        location: {\n          pathname: '/x/y',\n        },\n      };\n    };\n\n    beforeEach(() => {\n      props = buildProps();\n      ErrorPageHandler = getComponent();\n    });\n\n    it('renders its children if no failed ApiCall.State is received as erroredApi', () => {\n      props.erroredApis = new List();\n      props.erroredApi = undefined;\n      const wrapper = mount(<ErrorPageHandler {...props}><div id=\"inner\" /></ErrorPageHandler>);\n      expect(wrapper).to.have.descendants('#inner');\n    });\n\n    it('renders the error page if a failed ApiCall.State is received as erroredApi and has no response', () => {\n      const wrapper = mount(<ErrorPageHandler {...props}><div id=\"inner\" /></ErrorPageHandler>);\n      expect(wrapper).to.have.descendants(ErrorPage);\n      expect(wrapper).to.not.have.descendants('#inner');\n    });\n\n    context('when location.pathname changes, API errors are auto-cleaned', () => {\n      it('does not call clean() on mount', () => {\n        mount(<ErrorPageHandler {...props} />);\n        expect(props.clean.called).to.be.false;\n      });\n\n      it('does not call clean() if location.pathname is the same', () => {\n        const wrapper = mount(<ErrorPageHandler {...props} />);\n        wrapper.setProps({ location: { pathname: '/x/y' } });\n        expect(props.clean.called).to.be.false;\n      });\n\n      it('calls clean() on location.pathname change', () => {\n        const wrapper = mount(<ErrorPageHandler {...props} />);\n        wrapper.setProps({ location: { pathname: '/x' } });  // user clicked a nav crumb, for instance\n        expect(props.clean.args).to.eql([['id1'], ['id2']]);\n      });\n    });\n\n    context('when errorHandlerRendersPopUps config option is true', () => {\n      beforeEach(() => {\n        ErrorPageHandler = getComponent(Map({ errorHandlerRendersPopUps: true }));\n      });\n\n      it('renders the error page if a failed ApiCall.State is received as erroredApi and its code is 500', () => {\n        props = buildProps({ status: 500 });\n        const wrapper = mount(<ErrorPageHandler {...props}><div id=\"inner\" /></ErrorPageHandler>);\n        expect(wrapper).to.have.descendants(ErrorPage);\n        expect(wrapper).to.not.have.descendants('#inner');\n      });\n\n      it('renders the error dialog if a failed ApiCall.State is received as erroredApi ' +\n          'and its code is not 500 and there is an object in the response property', () => {\n        props = buildProps({ status: 400, response: {} });\n        const wrapper = mount(<ErrorPageHandler {...props}><div id=\"inner\" /></ErrorPageHandler>);\n        expect(wrapper).to.have.descendants(AlertDialog);\n        expect(wrapper).to.have.descendants('#inner');\n      });\n\n      it('does not the error dialog if a failed ApiCall.State is received as erroredApi ' +\n          'and its code is not 500 but there is not an object in the response property', () => {\n        props = buildProps({ status: 400, response: 'Some string' });\n        const wrapper = mount(<ErrorPageHandler {...props}><div id=\"inner\" /></ErrorPageHandler>);\n        expect(wrapper).to.have.descendants(ErrorPage);\n        expect(wrapper).to.not.have.descendants('#inner');\n      });\n    });\n\n    context('when errorHandlerRendersPopUps config option is not true', () => {\n      beforeEach(() => {\n        ErrorPageHandler = getComponent(Map({ errorHandlerRendersPopUps: false }));\n      });\n\n      it('renders the error page if a failed ApiCall.State is received as erroredApi and its code is 500', () => {\n        props = buildProps({ status: 500 });\n        const wrapper = mount(<ErrorPageHandler {...props}><div id=\"inner\" /></ErrorPageHandler>);\n        expect(wrapper).to.have.descendants(ErrorPage);\n        expect(wrapper).to.not.have.descendants('#inner');\n      });\n\n      it('renders the error page if a failed ApiCall.State is received as erroredApi and its code is not 500', () => {\n        props = buildProps({ status: 400 });\n        const wrapper = mount(<ErrorPageHandler {...props}><div id=\"inner\" /></ErrorPageHandler>);\n        expect(wrapper).to.have.descendants(ErrorPage);\n        expect(wrapper).to.not.have.descendants('#inner');\n      });\n    });\n  });\n\n  describe('mapStateToProps', () => {\n    let state;\n    let ownProps;\n    let mapStateToProps;\n\n    const buildState = (apiCalls = {}) => new Map({\n      apiCalls: new Map({\n        'GET /some/path': ApiCall.State.createLoading(),\n      }).merge(apiCalls),\n    });\n\n    beforeEach(() => {\n      state = buildState();\n      mapStateToProps = getMapStateToProps();\n      ownProps = {\n        routes: [\n          {},\n          { errorPage: {} },\n          { errorPage: {} },\n        ],\n      };\n    });\n\n    it('returns erroredApis as empty List if no API has failed', () => {\n      const { erroredApis } = mapStateToProps(state, ownProps);\n      expect(List.isList(erroredApis)).to.equal(true, 'is a List');\n      expect(erroredApis.isEmpty()).to.equal(true, 'is empty');\n    });\n\n    it('returns config as undefined if no route has an errorPage property', () => {\n      ownProps.routes = [{}, {}, {}];\n      expect(mapStateToProps(state, ownProps).config).to.be.undefined;\n    });\n\n    it('returns errorPage in the last route with an errorPage property as config', () => {\n      expect(mapStateToProps(state, ownProps).config).to.equal(ownProps.routes[2].errorPage);\n    });\n\n    it('returns erroredApis with failing a list of ApiCall.State ' +\n        'if they exist in the state', () => {\n      const failedCall1 = ApiCall.State.createFailed('GET /my/path', new Error());\n      const failedCall2 = ApiCall.State.createFailed('GET /my/path/2', new Error());\n      state = buildState({\n        'GET /my/path': failedCall1,\n        'GET /my/path/2': failedCall2,\n      });\n      expect(mapStateToProps(state, ownProps).erroredApis.get(0)).to.equal(failedCall1);\n      expect(mapStateToProps(state, ownProps).erroredApis.get(1)).to.equal(failedCall2);\n    });\n\n    it('ignores errores APIs if disableDefault=true for them', () => {\n      const failedCall1 = ApiCall.State.createFailed('GET /my/path', new Error());\n      const failedCall2 = ApiCall.State.createFailed('GET /my/path/2', new Error(), { disableDefault: true });\n      state = buildState({\n        'GET /my/path': failedCall1,\n        'GET /my/path/2': failedCall2,\n      });\n      const { erroredApis } = mapStateToProps(state, ownProps);\n      expect(erroredApis.size).to.equal(1);\n      expect(erroredApis.get(0)).to.equal(failedCall1);\n    });\n  });\n});\n"]}