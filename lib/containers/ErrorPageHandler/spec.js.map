{"version":3,"sources":["containers/ErrorPageHandler/spec.jsx"],"names":["jest","mock","describe","props","buildProps","response","error","not","undefined","erroredApi","State","createFailed","erroredApis","Error","clean","fn","location","pathname","beforeEach","test","wrapper","expect","find","toHaveLength","toHaveBeenCalled","setProps","calls","toEqual","merge","errorHandlerRendersPopUps","status","state","ownProps","buildState","apiCalls","createLoading","routes","errorPage","isList","toBe","isEmpty","config","toBeUndefined","failedCall1","failedCall2","get","disableDefault","size"],"mappings":"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","file":"spec.js","sourcesContent":["import React from 'react';\nimport { mount } from 'enzyme';\nimport ApiCall from 'containers/ApiCalls';\nimport { Map, List } from 'immutable';\nimport AlertDialog from 'components/AlertDialog';\nimport Config from 'domain/Config';\nimport { ApiError } from 'domain/Api';\nimport is from 'is_js';\nimport ErrorPage from 'components/ErrorPage';\nimport { ErrorPageHandler, mapStateToProps } from './';\n\njest.mock('components/ErrorPage', () => () => null);\njest.mock('oidc-client');\n\ndescribe('component', () => {\n  let props;\n\n  const buildProps = (response = {}) => {\n    const error = new ApiError(response);\n    if (is.not.undefined(error)) {\n      error.response = response.response;\n    }\n\n    const erroredApi = ApiCall.State.createFailed('id1', error);\n    return {\n      erroredApis: new List([\n        erroredApi,\n        ApiCall.State.createFailed('id2', new Error()),\n      ]),\n      erroredApi,\n      clean: jest.fn(),\n      location: {\n        pathname: '/x/y',\n      },\n    };\n  };\n\n  beforeEach(() => {\n    props = buildProps();\n  });\n\n  test('renders its children if no failed ApiCall.State is received as erroredApi', () => {\n    props.erroredApis = new List();\n    props.erroredApi = undefined;\n    const wrapper = mount(<ErrorPageHandler {...props}><div id=\"inner\" /></ErrorPageHandler>);\n    expect(wrapper.find('#inner')).toHaveLength(1);\n  });\n\n  test('renders the error page if a failed ApiCall.State is received as erroredApi and has no response', () => {\n    const wrapper = mount(<ErrorPageHandler {...props}><div id=\"inner\" /></ErrorPageHandler>);\n    expect(wrapper.find(ErrorPage)).toHaveLength(1);\n    expect(wrapper.find('#inner')).toHaveLength(0);\n  });\n\n  describe('when location.pathname changes, API errors are auto-cleaned', () => {\n    test('does not call clean() on mount', () => {\n      mount(<ErrorPageHandler {...props} />);\n      expect(props.clean).not.toHaveBeenCalled();\n    });\n\n    test('does not call clean() if location.pathname is the same', () => {\n      const wrapper = mount(<ErrorPageHandler {...props} />);\n      wrapper.setProps({ location: { pathname: '/x/y' } });\n      expect(props.clean).not.toHaveBeenCalled();\n    });\n\n    test('calls clean() on location.pathname change', () => {\n      const wrapper = mount(<ErrorPageHandler {...props} />);\n      wrapper.setProps({ location: { pathname: '/x' } });  // user clicked a nav crumb, for instance\n      expect(props.clean.mock.calls).toEqual([['id1'], ['id2']]);\n    });\n  });\n\n  describe('when errorHandlerRendersPopUps config option is true', () => {\n    beforeEach(() => {\n      Config.merge({ errorHandlerRendersPopUps: true });\n    });\n\n    test('renders the error page if a failed ApiCall.State is received as erroredApi and its code is 500', () => {\n      props = buildProps({ status: 500 });\n      const wrapper = mount(<ErrorPageHandler {...props}><div id=\"inner\" /></ErrorPageHandler>);\n      expect(wrapper.find(ErrorPage)).toHaveLength(1);\n      expect(wrapper.find('#inner')).toHaveLength(0);\n    });\n\n    test('renders the error dialog if a failed ApiCall.State is received as erroredApi ' +\n        'and its code is not 500 and there is an object in the response property', () => {\n      props = buildProps({ status: 400, response: {} });\n      const wrapper = mount(<ErrorPageHandler {...props}><div id=\"inner\" /></ErrorPageHandler>);\n      expect(wrapper.find(AlertDialog)).toHaveLength(1);\n      expect(wrapper.find('#inner')).toHaveLength(1);\n    });\n\n    test('does not the error dialog if a failed ApiCall.State is received as erroredApi ' +\n        'and its code is not 500 but there is not an object in the response property', () => {\n      props = buildProps({ status: 400, response: 'Some string' });\n      const wrapper = mount(<ErrorPageHandler {...props}><div id=\"inner\" /></ErrorPageHandler>);\n      expect(wrapper.find(ErrorPage)).toHaveLength(1);\n      expect(wrapper.find('#inner')).toHaveLength(0);\n    });\n  });\n\n  describe('when errorHandlerRendersPopUps config option is not true', () => {\n    beforeEach(() => {\n      Config.merge({ errorHandlerRendersPopUps: true });\n    });\n\n    test('renders the error page if a failed ApiCall.State is received as erroredApi and its code is 500', () => {\n      props = buildProps({ status: 500 });\n      const wrapper = mount(<ErrorPageHandler {...props}><div id=\"inner\" /></ErrorPageHandler>);\n      expect(wrapper.find(ErrorPage)).toHaveLength(1);\n      expect(wrapper.find('#inner')).toHaveLength(0);\n    });\n\n    test('renders the error page if a failed ApiCall.State is received as erroredApi and its code is not 500', () => {\n      props = buildProps({ status: 400 });\n      const wrapper = mount(<ErrorPageHandler {...props}><div id=\"inner\" /></ErrorPageHandler>);\n      expect(wrapper.find(ErrorPage)).toHaveLength(1);\n      expect(wrapper.find('#inner')).toHaveLength(0);\n    });\n  });\n});\n\ndescribe('mapStateToProps', () => {\n  let state;\n  let ownProps;\n\n  const buildState = (apiCalls = {}) => new Map({\n    apiCalls: new Map({\n      'GET /some/path': ApiCall.State.createLoading(),\n    }).merge(apiCalls),\n  });\n\n  beforeEach(() => {\n    state = buildState();\n    ownProps = {\n      routes: [\n        {},\n        { errorPage: {} },\n        { errorPage: {} },\n      ],\n    };\n  });\n\n  test('returns erroredApis as empty List if no API has failed', () => {\n    const { erroredApis } = mapStateToProps(state, ownProps);\n    expect(List.isList(erroredApis)).toBe(true);\n    expect(erroredApis.isEmpty()).toBe(true);\n  });\n\n  test('returns config as undefined if no route has an errorPage property', () => {\n    ownProps.routes = [{}, {}, {}];\n    expect(mapStateToProps(state, ownProps).config).toBeUndefined();\n  });\n\n  test('returns errorPage in the last route with an errorPage property as config', () => {\n    expect(mapStateToProps(state, ownProps).config).toBe(ownProps.routes[2].errorPage);\n  });\n\n  test('returns erroredApis with failing a list of ApiCall.State ' +\n      'if they exist in the state', () => {\n    const failedCall1 = ApiCall.State.createFailed('GET /my/path', new Error());\n    const failedCall2 = ApiCall.State.createFailed('GET /my/path/2', new Error());\n    state = buildState({\n      'GET /my/path': failedCall1,\n      'GET /my/path/2': failedCall2,\n    });\n    expect(mapStateToProps(state, ownProps).erroredApis.get(0)).toBe(failedCall1);\n    expect(mapStateToProps(state, ownProps).erroredApis.get(1)).toBe(failedCall2);\n  });\n\n  test('ignores errores APIs if disableDefault=true for them', () => {\n    const failedCall1 = ApiCall.State.createFailed('GET /my/path', new Error());\n    const failedCall2 = ApiCall.State.createFailed('GET /my/path/2', new Error(), { disableDefault: true });\n    state = buildState({\n      'GET /my/path': failedCall1,\n      'GET /my/path/2': failedCall2,\n    });\n    const { erroredApis } = mapStateToProps(state, ownProps);\n    expect(erroredApis.size).toBe(1);\n    expect(erroredApis.get(0)).toBe(failedCall1);\n  });\n});\n"]}