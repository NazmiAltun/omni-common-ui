{"version":3,"sources":["containers/LoadingOverlayHandler/index.jsx"],"names":["HTTP_METHOD_TRIGGERS","REQUEST_DURATION_THRESHOLD_MS","IS_ACTIVE","get","e","LoadingOverlayHandler","state","isThrobberVisible","_updateState","nextProps","props","isAnyApiCallLoadingBeyondThreshold","isAnyApiCallLoading","setState","clearTimeout","timer","setTimeout","loadingApiCalls","getIsAnyApiCallLoadingBeyondThreshold","children","classes","pace","propTypes","shape","filter","func","bool","isRequired","node","mapStateToProps","getLoadingApiCalls","Boolean","call","key","startsWith","State","isLoading","disableDefault","object","size","apiCalls","Date","getTime","timestamp","find"],"mappings":"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","file":"index.js","sourcesContent":["import styles from './style.postcss';\n\nimport React, { PureComponent } from 'react';\nimport classnames from 'classnames';\nimport is from 'is_js';\n\nimport connect from 'domain/connect';\nimport ApiCall from 'containers/ApiCalls';\nimport Config from 'domain/Config';\nimport PropTypes from 'prop-types';\n\nconst HTTP_METHOD_TRIGGERS = 'GET';\nconst REQUEST_DURATION_THRESHOLD_MS = 100;\n\n// config feature flag\nlet IS_ACTIVE;\ntry {\n  IS_ACTIVE = !! Config.get('showLoadingOverlayForApiGets'); // replaced by webpack\n} catch (e) {\n  IS_ACTIVE = false;\n}\n\nclass LoadingOverlayHandler extends PureComponent {\n  constructor() {\n    super();\n    this.state = { isThrobberVisible: false };\n  }\n\n  componentDidMount() {\n    this._updateState();\n  }\n\n  componentWillReceiveProps(nextProps) {\n    this._updateState(nextProps);\n  }\n\n  _updateState(props = this.props) {\n    const { isAnyApiCallLoadingBeyondThreshold, isAnyApiCallLoading } = props;\n    if (! IS_ACTIVE) return; // CONFIG flag check\n    if (isAnyApiCallLoadingBeyondThreshold) {\n      this.setState({ isThrobberVisible: true });\n    } else if (isAnyApiCallLoading) {\n      clearTimeout(this.timer);\n      this.timer = setTimeout(() => {\n        const { loadingApiCalls } = this.props;\n        if (! getIsAnyApiCallLoadingBeyondThreshold(loadingApiCalls)) return;\n        this.setState({ isThrobberVisible: true });\n      }, REQUEST_DURATION_THRESHOLD_MS);\n    } else if (! isAnyApiCallLoading) {\n      clearTimeout(this.timer);\n      this.setState({ isThrobberVisible: false });\n    }\n  }\n\n  render() {\n    const { children } = this.props;\n    const classes = {\n      pace: true,\n      'pace-inactive': ! this.state.isThrobberVisible,\n    };\n    return <div className={styles.LoadingOverlayHandler}>\n      <div className={classnames(classes)}>\n        <div className=\"pace-activity\" />\n      </div>\n      {children}\n    </div>;\n  }\n}\n\nLoadingOverlayHandler.propTypes = {\n  loadingApiCalls: PropTypes.shape({\n    filter: PropTypes.func,\n  }),\n  isAnyApiCallLoading: PropTypes.bool.isRequired,\n  isAnyApiCallLoadingBeyondThreshold: PropTypes.bool.isRequired,\n  children: PropTypes.node.isRequired,\n};\n\nfunction mapStateToProps(state) {\n  const loadingApiCalls = getLoadingApiCalls(state);\n  const isAnyApiCallLoadingBeyondThreshold =\n      Boolean(loadingApiCalls && getIsAnyApiCallLoadingBeyondThreshold(loadingApiCalls));\n  return {\n    loadingApiCalls,\n    isAnyApiCallLoading: !! loadingApiCalls,\n    isAnyApiCallLoadingBeyondThreshold,\n  };\n}\n\nfunction getLoadingApiCalls(state) {\n  const loadingApiCalls = state.get('apiCalls')\n    .filter((call, key) => key.startsWith(HTTP_METHOD_TRIGGERS))\n    .filter((call) => ApiCall.State.isLoading(call))\n    .filter((call) => ! call.disableDefault);\n  if (is.object(loadingApiCalls) && loadingApiCalls.size) {\n    return loadingApiCalls;\n  }\n  return null;\n}\n\nfunction getIsAnyApiCallLoadingBeyondThreshold(apiCalls) {\n  if (! apiCalls) return false;\n  return !! apiCalls.filter((call) =>\n      new Date().getTime() - call.timestamp.getTime() >= REQUEST_DURATION_THRESHOLD_MS)\n    .find(() => true);\n}\n\nexport default connect(mapStateToProps)(LoadingOverlayHandler);\n"]}