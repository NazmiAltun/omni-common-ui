{"version":3,"sources":["containers/SingleSignOn/userManager.js"],"names":["protocol","window","location","hostname","port","debug","get","userManagerConfig","client_id","redirect_uri","response_type","scope","authority","silent_redirect_uri","automaticSilentRenew","filterProtocolClaims","loadUserInfo","customUserManager","userManager","newUserManager","forceSignoutRedirect","signOut","signoutRedirect","signinRedirectWithValidation","signinRedirect"],"mappings":";;;;;;AAAA;;AACA;;;;AACA;;;;;;AAEA,IAAMA,WAAWC,OAAOC,QAAP,CAAgBF,QAAjC;AACA,IAAMG,WAAWF,OAAOC,QAAP,CAAgBC,QAAjC;AACA,IAAMC,OAAOH,OAAOC,QAAP,CAAgBE,IAAhB,SACLH,OAAOC,QAAP,CAAgBE,IADX,GAET,EAFJ;;AAIA,cAAIC,KAAJ,CAAU,0CAAV,EAAsD,iBAAOC,GAAP,CAAW,aAAX,CAAtD;AACA,cAAID,KAAJ,CAAU,8CAAV,EAA0D,iBAAOC,GAAP,CAAW,iBAAX,CAA1D;;AAEA,IAAMC,oBAAoB;AACxBC,aAAW,iBAAOF,GAAP,CAAW,aAAX,CADa;AAExBG,gBAAiBT,QAAjB,UAA8BG,QAA9B,GAAyCC,IAAzC,cAFwB;AAGxBM,iBAAe,gBAHS;AAIxBC,SAAO,kCAJiB;AAKxBC,aAAW,iBAAON,GAAP,CAAW,iBAAX,CALa;AAMxBO,uBAAwBb,QAAxB,UAAqCG,QAArC,GAAgDC,IAAhD,kBANwB;AAOxBU,wBAAsB,IAPE;AAQxBC,wBAAsB,IARE;AASxBC,gBAAc;AATU,CAA1B;;AAYA,IAAMC,oBAAoB,SAApBA,iBAAoB,CAACC,WAAD,EAAiB;AACzC,MAAMC,iBAAiBD,WAAvB;AACAC,iBAAeC,oBAAf,GAAsC,YAAM;AAC1CD,mBAAeE,OAAf,GAAyB,IAAzB;AACAF,mBAAeG,eAAf;AACD,GAHD;AAIAH,iBAAeI,4BAAf,GAA8C,YAAM;AAClD,QAAIJ,eAAeE,OAAf,KAA2B,IAA/B,EAAqC;AACrCF,mBAAeK,cAAf;AACD,GAHD;;AAKA,SAAOL,cAAP;AACD,CAZD;;AAcA,IAAMD,cAAcD,kBAAkB,kCAAkBV,iBAAlB,CAAlB,CAApB;;kBAGeW,W","file":"userManager.js","sourcesContent":["import { createUserManager } from 'redux-oidc';\nimport log from 'domain/log';\nimport Config from 'domain/Config';\n\nconst protocol = window.location.protocol;\nconst hostname = window.location.hostname;\nconst port = window.location.port ?\n    `:${window.location.port}` :\n    '';\n\nlog.debug('SingleSignOn - userManager - ssoClientId', Config.get('ssoClientId'));\nlog.debug('SingleSignOn - userManager - ssoAuthorityUrl', Config.get('ssoAuthorityUrl'));\n\nconst userManagerConfig = {\n  client_id: Config.get('ssoClientId'),\n  redirect_uri: `${protocol}//${hostname}${port}/callback`,\n  response_type: 'token id_token',\n  scope: 'openid profile email e1SystemAPI',\n  authority: Config.get('ssoAuthorityUrl'),\n  silent_redirect_uri: `${protocol}//${hostname}${port}/silent-renew`,\n  automaticSilentRenew: true,\n  filterProtocolClaims: true,\n  loadUserInfo: true,\n};\n\nconst customUserManager = (userManager) => {\n  const newUserManager = userManager;\n  newUserManager.forceSignoutRedirect = () => {\n    newUserManager.signOut = true;\n    newUserManager.signoutRedirect();\n  };\n  newUserManager.signinRedirectWithValidation = () => {\n    if (newUserManager.signOut === true) return;\n    newUserManager.signinRedirect();\n  };\n\n  return newUserManager;\n};\n\nconst userManager = customUserManager(createUserManager(userManagerConfig));\n\n\nexport default userManager;\n"]}