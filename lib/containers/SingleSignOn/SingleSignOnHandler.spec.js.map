{"version":3,"sources":["containers/SingleSignOn/SingleSignOnHandler.spec.jsx"],"names":["jest","mock","global","sessionStorage","props","userManager","SingleSignOnHandler","mountComponent","beforeEach","fetchPrivilegesIfNeeded","fn","user","expired","profile","sub","describe","resetModules","Config","require","merge","featureLogin","test","expect","signinRedirect","not","toHaveBeenCalled","wrapper","find","toHaveLength","signinRedirectWithValidation"],"mappings":"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","file":"SingleSignOnHandler.spec.js","sourcesContent":["import React from 'react';\nimport { mount } from 'enzyme';\n\njest.mock('./userManager');\n\nglobal.sessionStorage = {};\n\nlet props;\nlet userManager;\nlet SingleSignOnHandler;\n\nconst mountComponent = () => mount(<SingleSignOnHandler {...props}>\n  <div id=\"inner\" />\n</SingleSignOnHandler>);\n\nbeforeEach(() => {\n  props = {\n    fetchPrivilegesIfNeeded: jest.fn(),\n    user: {\n      expired: false,\n      profile: {\n        sub: '123',\n      },\n    },\n  };\n});\n\ndescribe('when featureLogin is false', () => {\n  beforeEach(() => {\n    jest.resetModules();\n    const Config = require('domain/Config');\n    userManager = require('./userManager');\n\n    Config.merge({ featureLogin: false });\n    SingleSignOnHandler = require('./SingleSignOnHandler').SingleSignOnHandler;\n  });\n\n  test('does not call userManager.signinRedirect() even if the user is not valid', () => {\n    props.user = null;\n    mountComponent();\n    expect(userManager.signinRedirect).not.toHaveBeenCalled();\n  });\n\n  test('does not call userManager.signinRedirect() even if the user is expired', () => {\n    props.user.expired = true;\n    mountComponent();\n    expect(userManager.signinRedirect).not.toHaveBeenCalled();\n  });\n\n  test('does not call fetchPrivilegesIfNeeded even if the user is fine', () => {\n    mountComponent();\n    expect(props.fetchPrivilegesIfNeeded).not.toHaveBeenCalled();\n  });\n\n  test('renders its children if the user is fine', () => {\n    const wrapper = mountComponent();\n    expect(wrapper.find('#inner')).toHaveLength(1);\n  });\n\n  test('renders its children even if the user is not valid', () => {\n    props.user = null;\n    const wrapper = mountComponent();\n    expect(wrapper.find('#inner')).toHaveLength(1);\n  });\n});\n\ndescribe('when featureLogin is true', () => {\n  beforeEach(() => {\n    jest.resetModules();\n    const Config = require('domain/Config');\n    userManager = require('./userManager');\n\n    Config.merge({ featureLogin: true });\n    SingleSignOnHandler = require('./SingleSignOnHandler').SingleSignOnHandler;\n  });\n\n  test('calls userManager.signinRedirectWithValidation() if the user is not valid', () => {\n    props.user = null;\n    mountComponent();\n    expect(userManager.signinRedirectWithValidation).toHaveBeenCalled();\n  });\n\n  test('calls userManager.signinRedirectWithValidation() if the user is expired', () => {\n    props.user.expired = true;\n    mountComponent();\n    expect(userManager.signinRedirectWithValidation).toHaveBeenCalled();\n  });\n\n  test('calls fetchPrivilegesIfNeeded if the user is fine', () => {\n    mountComponent();\n    expect(props.fetchPrivilegesIfNeeded).toHaveBeenCalled();\n  });\n\n  test('renders its children if the user is fine', () => {\n    const wrapper = mountComponent();\n    expect(wrapper.find('#inner')).toHaveLength(1);\n  });\n\n  test('does not render its children if the user is not valid', () => {\n    props.user = null;\n    const wrapper = mountComponent();\n    expect(wrapper.find('#inner')).toHaveLength(0);\n  });\n});\n"]}