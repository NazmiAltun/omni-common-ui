{"version":3,"sources":["containers/SingleSignOn/SingleSignOnHandler.jsx"],"names":["MockSingleSignOnHandler","props","children","propTypes","PropTypes","node","SingleSignOnHandlerImpl","_setLastUrlPath","_checkUserAndPrivileges","nextProps","_isUserValid","signinRedirectWithValidation","_logUser","debug","fetchPrivilegesIfNeeded","user","profile","userId","sub","email","set","setUserContext","id","location","pathname","path","sessionStorage","lastUrlPath","search","expired","object","func","isRequired","mapStateToProps","state","get","mapDispatchToProps","dispatch","SingleSignOnHandler"],"mappings":";;;;;;;;;AAAA;;;;AACA;;AACA;;AACA;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;;;;;;;AAEA,IAAMA,0BAA0B,SAA1BA,uBAA0B,CAACC,KAAD;AAAA,SAAWA,MAAMC,QAAjB;AAAA,CAAhC;;AAEAF,wBAAwBG,SAAxB,GAAoC;AAClCD,YAAU,gBAAME,SAAN,CAAgBC;AADQ,CAApC;;IAIMC,uB;;;;;;;;;;;yCACiB;AACnB,WAAKC,eAAL;AACD;;;wCAEmB;AAClB,WAAKC,uBAAL,CAA6B,KAAKP,KAAlC;AACD;;;8CAEyBQ,S,EAAW;AACnC,WAAKD,uBAAL,CAA6BC,SAA7B;AACD;;;4CAEuBR,K,EAAO;AAC7B,UAAI,CAAE,KAAKS,YAAL,EAAN,EAA2B;AACzB,eAAO,sBAAYC,4BAAZ,EAAP;AACD;;AAED,WAAKC,QAAL,CAAcX,KAAd;AACA,oBAAIY,KAAJ,CAAU,2DAAV;AACAZ,YAAMa,uBAAN;AACD;;;6BAEQb,K,EAAO;AACd,UAAI,CAAEA,MAAMc,IAAZ,EAAkB;AAChB;AACD;;AAED,UAAMA,OAAOd,MAAMc,IAAN,CAAWC,OAAxB;AACA,UAAMC,SAASF,KAAKG,GAApB;AANc,UAONC,KAPM,GAOIJ,IAPJ,CAONI,KAPM;;;AASd,wBAAQC,GAAR,CAAY,EAAEH,cAAF,EAAZ;AACA,wBAAMI,cAAN,CAAqB,EAAEF,YAAF,EAASG,IAAIL,MAAb,EAArB;AACD;;;sCAEiB;AAChB,UAAIM,SAASC,QAAT,KAAsB,iBAAOC,IAAjC,EAAuC;AACrC,sBAAIZ,KAAJ,+CAAsD,iBAAOY,IAA7D;AACA;AACD;;AAEDC,qBAAeC,WAAf,GAA6BJ,SAASC,QAAT,GAAoBD,SAASK,MAA1D;AACD;;;mCAEc;AAAA,UACLb,IADK,GACI,KAAKd,KADT,CACLc,IADK;;AAEb,aAAOA,QAAQ,CAAEA,KAAKc,OAAtB;AACD;;;6BAEQ;AACP,UAAI,KAAKnB,YAAL,EAAJ,EAAyB;AACvB,sBAAIG,KAAJ,CAAU,qCAAV,EAAiD,KAAKZ,KAAL,CAAWc,IAA5D;AACA,eAAO,KAAKd,KAAL,CAAWC,QAAlB;AACD;;AAED,aAAO,IAAP;AACD;;;;;;AAGHI,wBAAwBH,SAAxB,GAAoC;AAClCD,YAAU,gBAAME,SAAN,CAAgBC,IADQ;AAElCU,QAAM,gBAAMX,SAAN,CAAgB0B,MAFY;AAGlChB,2BAAyB,gBAAMV,SAAN,CAAgB2B,IAAhB,CAAqBC;AAHZ,CAApC;;AAMA,SAASC,eAAT,CAAyBC,KAAzB,EAAgC;AAC9B,MAAMnB,OAAOmB,MAAMC,GAAN,CAAU,cAAV,EAA0BpB,IAAvC;AACA,SAAO,EAAEA,UAAF,EAAP;AACD;;AAED,SAASqB,kBAAT,CAA4BC,QAA5B,EAAsC;AACpC,SAAO,oDAAsCA,QAAtC,CAAP;AACD;;AAEM,IAAMC,oDAAsB,iBAAOH,GAAP,CAAW,cAAX,MAA+B,IAA/B,GAC/BnC,uBAD+B,GAE/BM,uBAFG;;kBAIQ,yBAAQ2B,eAAR,EAAyBG,kBAAzB,EAA6CE,mBAA7C,C","file":"SingleSignOnHandler.js","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport { actions as privilegesActions } from 'containers/Privileges';\nimport log from 'domain/log';\nimport routes from './routes';\nimport userManager from './userManager';\nimport Config from 'domain/Config';\nimport ReactGA from 'react-ga';\nimport Raven from 'raven-js';\n\nconst MockSingleSignOnHandler = (props) => props.children;\n\nMockSingleSignOnHandler.propTypes = {\n  children: React.PropTypes.node,\n};\n\nclass SingleSignOnHandlerImpl extends Component {\n  componentWillMount() {\n    this._setLastUrlPath();\n  }\n\n  componentDidMount() {\n    this._checkUserAndPrivileges(this.props);\n  }\n\n  componentWillReceiveProps(nextProps) {\n    this._checkUserAndPrivileges(nextProps);\n  }\n\n  _checkUserAndPrivileges(props) {\n    if (! this._isUserValid()) {\n      return userManager.signinRedirectWithValidation();\n    }\n\n    this._logUser(props);\n    log.debug('SingleSignOnHandler - Will call fetchPrivilegesIfNeeded()');\n    props.fetchPrivilegesIfNeeded();\n  }\n\n  _logUser(props) {\n    if (! props.user) {\n      return;\n    }\n\n    const user = props.user.profile;\n    const userId = user.sub;\n    const { email } = user;\n\n    ReactGA.set({ userId });\n    Raven.setUserContext({ email, id: userId });\n  }\n\n  _setLastUrlPath() {\n    if (location.pathname === routes.path) {\n      log.debug(`SingleSignOnHandler - New lastUrlPath is ${routes.path}. Will not modify it.`);\n      return;\n    }\n\n    sessionStorage.lastUrlPath = location.pathname + location.search;\n  }\n\n  _isUserValid() {\n    const { user } = this.props;\n    return user && ! user.expired;\n  }\n\n  render() {\n    if (this._isUserValid()) {\n      log.debug('SingleSignOnHandler - User is valid', this.props.user);\n      return this.props.children;\n    }\n\n    return null;\n  }\n}\n\nSingleSignOnHandlerImpl.propTypes = {\n  children: React.PropTypes.node,\n  user: React.PropTypes.object,\n  fetchPrivilegesIfNeeded: React.PropTypes.func.isRequired,\n};\n\nfunction mapStateToProps(state) {\n  const user = state.get('singleSignOn').user;\n  return { user };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return bindActionCreators(privilegesActions, dispatch);\n}\n\nexport const SingleSignOnHandler = Config.get('featureLogin') !== true ?\n    MockSingleSignOnHandler :\n    SingleSignOnHandlerImpl;\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SingleSignOnHandler);\n"]}