{"version":3,"sources":["containers/Impersonate/component.jsx"],"names":["suffix","Impersonate","props","state","impersonateEmail","emailChanged","_handleSwitchClick","bind","_handleEmailChange","clearImpersonateData","postedImpersonate","token","setState","e","target","value","error","clean","apiKey","cleanError","response","postImpersonateState","errorCode","get","undefined","data","success","inputClasses","Impersonate_title","Impersonate_field","Impersonate_buttonContainer","Type","primary","button","close","_renderErrorPopup","propTypes","object","func","string","isRequired","mapStateToProps","user","id_token","mapDispatchToProps","dispatch","email","key"],"mappings":"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","file":"component.js","sourcesContent":["import styles from './style.postcss';\n\nimport React, { PureComponent } from 'react';\nimport { connect } from 'react-redux';\nimport classnames from 'classnames';\nimport { postImpersonate, clearImpersonateData, getTokenEndPoint } from './actions';\nimport TextInput from 'components/TextInput';\nimport Button from 'components/Button';\nimport testClass from 'domain/testClass';\nimport AlertDialog from 'components/AlertDialog';\nimport ApiCall from 'containers/ApiCalls';\nimport PropTypes from 'prop-types';\n\nconst suffix = '@ef.com';\n\nclass Impersonate extends PureComponent {\n  constructor(props) {\n    super(props);\n    this.state = {\n      impersonateEmail: '',\n      emailChanged: false,\n    };\n\n    this._handleSwitchClick.bind(this);\n    this._handleEmailChange.bind(this);\n  }\n\n  componentWillUnmount() {\n    this.props.clearImpersonateData();\n  }\n\n  _handleSwitchClick() {\n    this.props.postedImpersonate(this.state.impersonateEmail + suffix, this.props.token);\n    this.setState({ emailChanged: false });\n  }\n\n  _handleEmailChange(e) {\n    this.setState({ impersonateEmail: e.target.value, emailChanged: true });\n  }\n\n  _renderErrorPopup() {\n    const error = this.props.error;\n    if (! error) return;\n    const { clean, apiKey } = this.props;\n    const cleanError = () => clean(apiKey);\n\n    return <AlertDialog isWarning\n        content1={error.response.error}\n        okButtonContent=\"OK\"\n        onButtonClick={cleanError} />;\n  }\n\n  render() {\n    const { postImpersonateState } = this.props;\n    const errorCode = postImpersonateState ? postImpersonateState.get('error') : undefined;\n    const data = postImpersonateState ? postImpersonateState.get('data') : undefined;\n\n    if (data) {\n      this.props.success();\n    }\n\n    const inputClasses = classnames({ [styles.error]: ! this.state.emailChanged && errorCode },\n        testClass('impersonate-dialog-input'));\n\n    return <div className={styles.Impersonate}>\n      <p className={styles.Impersonate_title}>Switch User</p>\n      <div>\n        <TextInput labelName=\"Email\"\n            className={styles.Impersonate_field}\n            inputClassName={inputClasses}\n            suffix={suffix}\n            onChange={(e) => this._handleEmailChange(e)} />\n      </div>\n      <Button.Container className={styles.Impersonate_buttonContainer}\n          align=\"center\">\n        <Button type={Button.Type.primary}\n            className={classnames(styles.button, testClass('impersonate-dialog-switch'))}\n            disabled={! this.state.impersonateEmail}\n            onClick={() => this._handleSwitchClick()}>\n          SWITCH\n        </Button>\n        <Button className={styles.button}\n            onClick={() => this.props.close()}>\n          CANCEL\n        </Button>\n      </Button.Container>\n      {this._renderErrorPopup()}\n    </div>;\n  }\n}\n\nImpersonate.propTypes = {\n  postImpersonateState: PropTypes.object,\n  close: PropTypes.func,\n  success: PropTypes.func,\n  postedImpersonate: PropTypes.func,\n  clearImpersonateData: PropTypes.func,\n  token: PropTypes.string,\n  apiKey: PropTypes.string,\n  error: PropTypes.object,\n  clean: PropTypes.func.isRequired,\n};\n\nfunction mapStateToProps(state) {\n  const apiKey = `POST ${getTokenEndPoint()}`;\n  const error = state.get('apiCalls').get(apiKey) && state.get('apiCalls').get(apiKey).error;\n  return {\n    postImpersonateState: state.get('impersonate')\n      .get('postedImpersonate')\n      .get('impersonate'),\n    token: state.get('singleSignOn').user.id_token,\n    error,\n    apiKey,\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    postedImpersonate: (email, token) =>\n      dispatch(postImpersonate(email, token)),\n    clearImpersonateData: () => dispatch(clearImpersonateData()),\n    clean: (key) => dispatch(ApiCall.clean(key)),\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Impersonate);\n"]}