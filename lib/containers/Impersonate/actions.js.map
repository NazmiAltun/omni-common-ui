{"version":3,"sources":["containers/Impersonate/actions.js"],"names":["postImpersonate","getTokenEndPoint","clearImpersonateData","POST_IMPERSONATE_REQUEST","POST_IMPERSONATE_SUCCESS","POST_IMPERSONATE_FAILURE","CLEAR_IMPERSONATE_DATA","email","token","dispatch","url","method","postImpersonateRequest","payload","then","response","postImpersonateSuccess","catch","error","postImpersonateFailure","body","stringify","grant_type","scope","_getSingleSingOnScope","impersonated_user_email","param","headers","Accept","Authorization","get","createAction","type","disableDefault","settings","_scope","_metadata","token_endpoint"],"mappings":";;;;;;QAWgBA,e,GAAAA,e;QA2DAC,gB,GAAAA,gB;QAIAC,oB,GAAAA,oB;;AA1EhB;;AACA;;AACA;;;;AACA;;;;AACA;;;;;;AAEO,IAAMC,8DAA2B,0BAAjC;AACA,IAAMC,8DAA2B,0BAAjC;AACA,IAAMC,8DAA2B,0BAAjC;AACA,IAAMC,0DAAyB,wBAA/B;;AAEA,SAASN,eAAT,CAAyBO,KAAzB,EAAgCC,KAAhC,EAAuC;AAC5C,SAAO,UAACC,QAAD,EAAc;AACnB,QAAMC,MAAMT,kBAAZ;AACA,QAAMU,SAAS,MAAf;;AAEAF,aAASG,wBAAT,EAAmCC,OAAnC,CACGC,IADH,CACQ,UAACC,QAAD;AAAA,aAAcN,SAASO,uBAAuBD,QAAvB,CAAT,CAAd;AAAA,KADR,EAEGE,KAFH,CAES,UAACC,KAAD;AAAA,aAAWT,SAASU,uBAAuBD,KAAvB,CAAT,CAAX;AAAA,KAFT;;AAIA,aAASN,sBAAT,GAAkC;AAChC,UAAMQ,OAAO,sBAAYC,SAAZ,CAAsB;AACjCC,oBAAY,eADqB;AAEjCC,eAAOC,uBAF0B;AAGjChB,oBAHiC;AAIjCiB,iCAAyBlB;AAJQ,OAAtB,CAAb;;AAOA,UAAMmB,QAAQ;AACZf,sBADY;AAEZgB,iBAAS;AACP,0BAAgB,eADT;AAEPC,kBAAQ,EAFD;AAGPC,yBAAe,iBAAOC,GAAP,CAAW,gCAAX;AAHR,SAFG;AAOZV;AAPY,OAAd;AASA,aAAO,mBAAQW,YAAR,CAAqB;AAC1BC,cAAM7B,wBADoB;AAE1BU,iBAAS,gBAAMH,GAAN,EAAWgB,KAAX,CAFiB;AAG1BhB,gBAH0B;AAI1BC;AAJ0B,OAArB,CAAP;AAMD;;AAED,aAASK,sBAAT,CAAgCD,QAAhC,EAA0C;AACxC,aAAO,mBAAQgB,YAAR,CAAqB;AAC1BC,cAAM5B,wBADoB;AAE1BS,iBAASE,QAFiB;AAG1BL,gBAH0B;AAI1BC;AAJ0B,OAArB,CAAP;AAMD;;AAED,aAASQ,sBAAT,CAAgCD,KAAhC,EAAuC;AACrC,aAAO,mBAAQa,YAAR,CAAqB;AAC1BC,cAAM3B,wBADoB;AAE1Ba,oBAF0B;AAG1BR,gBAH0B;AAI1BC,sBAJ0B;AAK1BsB,wBAAgB;AALU,OAArB,CAAP;AAOD;AACF,GAnDD;;AAqDA,WAAST,qBAAT,GAAiC;AAC/B,WAAO,uCAAoBU,QAApB,CAA6BC,MAApC;AACD;AACF;;AAEM,SAASlC,gBAAT,GAA4B;AACjC,SAAO,uCAAoBiC,QAApB,CAA6BE,SAA7B,CAAuCC,cAA9C;AACD;;AAEM,SAASnC,oBAAT,GAAgC;AACrC,SAAO;AACL8B,UAAM1B;AADD,GAAP;AAGD","file":"actions.js","sourcesContent":["import { fetch } from 'domain/Api';\nimport { createUserManager } from 'data/SingleSignOn';\nimport Config from 'domain/Config';\nimport ApiCall from 'containers/ApiCalls';\nimport QueryString from 'query-string';\n\nexport const POST_IMPERSONATE_REQUEST = 'POST_IMPERSONATE_REQUEST';\nexport const POST_IMPERSONATE_SUCCESS = 'POST_IMPERSONATE_SUCCESS';\nexport const POST_IMPERSONATE_FAILURE = 'POST_IMPERSONATE_FAILURE';\nexport const CLEAR_IMPERSONATE_DATA = 'CLEAR_IMPERSONATE_DATA';\n\nexport function postImpersonate(email, token) {\n  return (dispatch) => {\n    const url = getTokenEndPoint();\n    const method = 'POST';\n\n    dispatch(postImpersonateRequest()).payload\n      .then((response) => dispatch(postImpersonateSuccess(response)))\n      .catch((error) => dispatch(postImpersonateFailure(error)));\n\n    function postImpersonateRequest() {\n      const body = QueryString.stringify({\n        grant_type: 'impersonation',\n        scope: _getSingleSingOnScope(),\n        token,\n        impersonated_user_email: email,\n      });\n\n      const param = {\n        method,\n        headers: {\n          'Content-Type': 'charset=utf-8',\n          Accept: '',\n          Authorization: Config.get('impersonateClientAuthorization'),\n        },\n        body,\n      };\n      return ApiCall.createAction({\n        type: POST_IMPERSONATE_REQUEST,\n        payload: fetch(url, param),\n        url,\n        method,\n      });\n    }\n\n    function postImpersonateSuccess(response) {\n      return ApiCall.createAction({\n        type: POST_IMPERSONATE_SUCCESS,\n        payload: response,\n        url,\n        method,\n      });\n    }\n\n    function postImpersonateFailure(error) {\n      return ApiCall.createAction({\n        type: POST_IMPERSONATE_FAILURE,\n        error,\n        url,\n        method,\n        disableDefault: true,\n      });\n    }\n  };\n\n  function _getSingleSingOnScope() {\n    return createUserManager().settings._scope;\n  }\n}\n\nexport function getTokenEndPoint() {\n  return createUserManager().settings._metadata.token_endpoint;\n}\n\nexport function clearImpersonateData() {\n  return {\n    type: CLEAR_IMPERSONATE_DATA,\n  };\n}\n"]}