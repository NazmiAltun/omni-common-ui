{"version":3,"sources":["containers/Permission/index.jsx"],"names":["Permission","props","hasPrivilege","state","permissionId","children","mapStateToProps","propTypes","string","node"],"mappings":";;;;;;AAAA;;AACA;;;;AACA;;;;AACA;;;;;;AAEA,IAAMA,aAAa,SAAbA,UAAa,CAACC,KAAD,EAAW;AAC5B,MAAI,CAAE,2BAAiBC,YAAjB,CAA8BD,MAAME,KAApC,EAA2CF,MAAMG,YAAjD,CAAN,EAAsE;AACpE,WAAO,IAAP;AACD;;AAED,SAAOH,MAAMI,QAAb;AACD,CAND;;AAQA,SAASC,eAAT,CAAyBH,KAAzB,EAAgC;AAC9B,SAAO,EAAEA,YAAF,EAAP;AACD;;AAEDH,WAAWO,SAAX,GAAuB;AACrBH,gBAAc,oBAAUI,MADH;AAErBH,YAAU,oBAAUI;AAFC,CAAvB;;kBAKe,uBAAQH,eAAR,EAAyB,qBAAKN,UAAL,CAAzB,C","file":"index.js","sourcesContent":["import { pure } from 'recompose';\nimport connect from 'domain/connect';\nimport PrivilegeChecker from 'domain/PrivilegeChecker';\nimport PropTypes from 'prop-types';\n\nconst Permission = (props) => {\n  if (! PrivilegeChecker.hasPrivilege(props.state, props.permissionId)) {\n    return null;\n  }\n\n  return props.children;\n};\n\nfunction mapStateToProps(state) {\n  return { state };\n}\n\nPermission.propTypes = {\n  permissionId: PropTypes.string,\n  children: PropTypes.node,\n};\n\nexport default connect(mapStateToProps)(pure(Permission));\n"]}