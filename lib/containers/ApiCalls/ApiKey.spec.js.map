{"version":3,"sources":["containers/ApiCalls/ApiKey.spec.js"],"names":["describe","test","apiAction","create","type","method","url","key","expect","toBe","toThrowError"],"mappings":";;AAAA;;;;AACA;;;;;;AAEAA,SAAS,WAAT,EAAsB,YAAM;AAC1BC,OAAK,qCAAL,EAA4C,YAAM;AAChD,QAAMC,YAAY,oBAAUC,MAAV,CAAiB,EAAEC,MAAM,cAAR,EAAwBC,QAAQ,KAAhC,EAAuCC,KAAK,OAA5C,EAAjB,CAAlB;AACA,QAAMC,MAAM,iBAAOJ,MAAP,CAAcD,SAAd,CAAZ;AACAM,WAAOD,GAAP,EAAYE,IAAZ,CAAiB,WAAjB;AACD,GAJD;;AAMAR,OAAK,gDAAL,EAAuD,YAAM;AAC3DO,WAAO;AAAA,aAAM,iBAAOL,MAAP,CAAc,EAAd,CAAN;AAAA,KAAP,EAAgCO,YAAhC;AACD,GAFD;;AAIAV,WAAS,6BAAT,EAAwC,YAAM;AAC5CC,SAAK,wEAAL,EAA+E,YAAM;AACnFO,aAAO;AAAA,eAAM,iBAAOL,MAAP,CAAc,EAAEE,QAAQ,CAAV,EAAaC,KAAK,EAAlB,EAAd,CAAN;AAAA,OAAP,EAAoDI,YAApD;AACD,KAFD;;AAIAT,SAAK,qEAAL,EAA4E,YAAM;AAChFO,aAAO;AAAA,eAAM,iBAAOL,MAAP,CAAc,EAAEE,QAAQ,KAAV,EAAiBC,KAAK,EAAtB,EAAd,CAAN;AAAA,OAAP,EAAwDI,YAAxD;AACD,KAFD;;AAIAT,SAAK,mEAAL,EAA0E,YAAM;AAC9E,UAAMM,MAAM,iBAAOJ,MAAP,CAAc,EAAEE,QAAQ,KAAV,EAAiBC,KAAK,OAAtB,EAAd,CAAZ;AACAE,aAAOD,GAAP,EAAYE,IAAZ,CAAiB,WAAjB;AACD,KAHD;;AAKAR,SAAK,mCAAL,EAA0C,YAAM;AAC9C,UAAMM,MAAM,iBAAOJ,MAAP,CAAc,EAAEE,QAAQ,KAAV,EAAiBC,KAAK,OAAtB,EAAd,CAAZ;AACAE,aAAOD,GAAP,EAAYE,IAAZ,CAAiB,WAAjB;AACD,KAHD;;AAKAR,SAAK,iCAAL,EAAwC,YAAM;AAC5C,UAAMM,MAAM,iBAAOJ,MAAP,CAAc,EAAEE,QAAQ,KAAV,EAAiBC,KAAK,OAAtB,EAAd,CAAZ;AACAE,aAAOD,GAAP,EAAYE,IAAZ,CAAiB,WAAjB;AACD,KAHD;AAID,GAvBD;AAwBD,CAnCD","file":"ApiKey.spec.js","sourcesContent":["import ApiKey from './ApiKey';\nimport ApiAction from './ApiAction';\n\ndescribe('#create()', () => {\n  test('accepts an ApiAction as an argument', () => {\n    const apiAction = ApiAction.create({ type: 'CALL_REQUEST', method: 'get', url: '/path' });\n    const key = ApiKey.create(apiAction);\n    expect(key).toBe('GET /path');\n  });\n\n  test('throws if not passed an ApiAction or an object', () => {\n    expect(() => ApiKey.create('')).toThrowError();\n  });\n\n  describe('when passed a normal object', () => {\n    test('throws if the object does not contain a method property of type string', () => {\n      expect(() => ApiKey.create({ method: 1, url: '' })).toThrowError();\n    });\n\n    test('throws if the object does not contain a url property of type string', () => {\n      expect(() => ApiKey.create({ method: 'get', url: {} })).toThrowError();\n    });\n\n    test('accepts an object with two arguments (method, url) as an argument', () => {\n      const key = ApiKey.create({ method: 'GET', url: '/path' });\n      expect(key).toBe('GET /path');\n    });\n\n    test('converts the method to upper case', () => {\n      const key = ApiKey.create({ method: 'get', url: '/path' });\n      expect(key).toBe('GET /path');\n    });\n\n    test('converts the path to lower case', () => {\n      const key = ApiKey.create({ method: 'GET', url: '/Path' });\n      expect(key).toBe('GET /path');\n    });\n  });\n});\n"]}