{"version":3,"sources":["containers/ApiCalls/ApiKey.spec.js"],"names":["describe","it","apiAction","create","type","method","url","key","to","equal","throw","context"],"mappings":";;AAAA;;AACA;;;;AACA;;;;;;AAEAA,SAAS,SAAT,EAAoB,YAAM;AACxBA,WAAS,QAAT,EAAmB,YAAM;AACvBA,aAAS,WAAT,EAAsB,YAAM;AAC1BC,SAAG,qCAAH,EAA0C,YAAM;AAC9C,YAAMC,YAAY,oBAAUC,MAAV,CAAiB,EAAEC,MAAM,cAAR,EAAwBC,QAAQ,KAAhC,EAAuCC,KAAK,OAA5C,EAAjB,CAAlB;AACA,YAAMC,MAAM,iBAAOJ,MAAP,CAAcD,SAAd,CAAZ;AACA,0BAAOK,GAAP,EAAYC,EAAZ,CAAeC,KAAf,CAAqB,WAArB;AACD,OAJD;;AAMAR,SAAG,gDAAH,EAAqD,YAAM;AACzD,0BAAO;AAAA,iBAAM,iBAAOE,MAAP,CAAc,EAAd,CAAN;AAAA,SAAP,EAAgCK,EAAhC,CAAmCE,KAAnC;AACD,OAFD;;AAIAC,cAAQ,6BAAR,EAAuC,YAAM;AAC3CV,WAAG,wEAAH,EAA6E,YAAM;AACjF,4BAAO;AAAA,mBAAM,iBAAOE,MAAP,CAAc,EAAEE,QAAQ,CAAV,EAAaC,KAAK,EAAlB,EAAd,CAAN;AAAA,WAAP,EAAoDE,EAApD,CAAuDE,KAAvD;AACD,SAFD;;AAIAT,WAAG,qEAAH,EAA0E,YAAM;AAC9E,4BAAO;AAAA,mBAAM,iBAAOE,MAAP,CAAc,EAAEE,QAAQ,KAAV,EAAiBC,KAAK,EAAtB,EAAd,CAAN;AAAA,WAAP,EAAwDE,EAAxD,CAA2DE,KAA3D;AACD,SAFD;;AAIAT,WAAG,mEAAH,EAAwE,YAAM;AAC5E,cAAMM,MAAM,iBAAOJ,MAAP,CAAc,EAAEE,QAAQ,KAAV,EAAiBC,KAAK,OAAtB,EAAd,CAAZ;AACA,4BAAOC,GAAP,EAAYC,EAAZ,CAAeC,KAAf,CAAqB,WAArB;AACD,SAHD;;AAKAR,WAAG,mCAAH,EAAwC,YAAM;AAC5C,cAAMM,MAAM,iBAAOJ,MAAP,CAAc,EAAEE,QAAQ,KAAV,EAAiBC,KAAK,OAAtB,EAAd,CAAZ;AACA,4BAAOC,GAAP,EAAYC,EAAZ,CAAeC,KAAf,CAAqB,WAArB;AACD,SAHD;;AAKAR,WAAG,iCAAH,EAAsC,YAAM;AAC1C,cAAMM,MAAM,iBAAOJ,MAAP,CAAc,EAAEE,QAAQ,KAAV,EAAiBC,KAAK,OAAtB,EAAd,CAAZ;AACA,4BAAOC,GAAP,EAAYC,EAAZ,CAAeC,KAAf,CAAqB,WAArB;AACD,SAHD;AAID,OAvBD;AAwBD,KAnCD;AAoCD,GArCD;AAsCD,CAvCD","file":"ApiKey.spec.js","sourcesContent":["import { expect } from 'chai';\nimport ApiKey from './ApiKey';\nimport ApiAction from './ApiAction';\n\ndescribe('ApiCall', () => {\n  describe('ApiKey', () => {\n    describe('#create()', () => {\n      it('accepts an ApiAction as an argument', () => {\n        const apiAction = ApiAction.create({ type: 'CALL_REQUEST', method: 'get', url: '/path' });\n        const key = ApiKey.create(apiAction);\n        expect(key).to.equal('GET /path');\n      });\n\n      it('throws if not passed an ApiAction or an object', () => {\n        expect(() => ApiKey.create('')).to.throw();\n      });\n\n      context('when passed a normal object', () => {\n        it('throws if the object does not contain a method property of type string', () => {\n          expect(() => ApiKey.create({ method: 1, url: '' })).to.throw();\n        });\n\n        it('throws if the object does not contain a url property of type string', () => {\n          expect(() => ApiKey.create({ method: 'get', url: {} })).to.throw();\n        });\n\n        it('accepts an object with two arguments (method, url) as an argument', () => {\n          const key = ApiKey.create({ method: 'GET', url: '/path' });\n          expect(key).to.equal('GET /path');\n        });\n\n        it('converts the method to upper case', () => {\n          const key = ApiKey.create({ method: 'get', url: '/path' });\n          expect(key).to.equal('GET /path');\n        });\n\n        it('converts the path to lower case', () => {\n          const key = ApiKey.create({ method: 'GET', url: '/Path' });\n          expect(key).to.equal('GET /path');\n        });\n      });\n    });\n  });\n});\n"]}