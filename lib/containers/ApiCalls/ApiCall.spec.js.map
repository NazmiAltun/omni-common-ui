{"version":3,"sources":["containers/ApiCalls/ApiCall.spec.js"],"names":["test","expect","API_CALL_CLEAN","toBe","Key","Action","State","toThrowError","describe","call1","createLoading","call2","createSucceeded","call3","createFailed","state","apiCalls","create","method","url","key","find","undefined","shouldPerform","originalCreate","afterEach","jest","fn","originalAction","type","createAction","toHaveBeenCalledWith","action","clean","errors","getErrors","size"],"mappings":"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","file":"ApiCall.spec.js","sourcesContent":["import ApiCall from './ApiCall';\nimport _ApiKey from './ApiKey';\nimport _ApiAction from './ApiAction';\nimport _ApiState from './ApiState';\nimport { Map } from 'immutable';\n\ntest('exposes API_CALL_CLEAN action type', () => {\n  expect(ApiCall.API_CALL_CLEAN).toBe('API_CALL_CLEAN');\n});\n\ntest('exposes ApiKey as Key', () => {\n  expect(ApiCall.Key).toBe(_ApiKey);\n});\n\ntest('exposes ApiAction as Action', () => {\n  expect(ApiCall.Action).toBe(_ApiAction);\n});\n\ntest('exposes ApiState as State', () => {\n  expect(ApiCall.State).toBe(_ApiState);\n});\n\ntest('does not allow to reassign its inner classes', () => {\n  expect(() => { ApiCall.State = {}; }).toThrowError();\n  expect(() => { ApiCall.Action = {}; }).toThrowError();\n  expect(() => { ApiCall.Key = {}; }).toThrowError();\n});\n\ndescribe('#find()', () => {\n  const call1 = ApiCall.State.createLoading();\n  const call2 = ApiCall.State.createSucceeded();\n  const call3 = ApiCall.State.createFailed();\n  const state = new Map({\n    apiCalls: new Map({\n      [ApiCall.Key.create({ method: 'GET', url: '/path/1' })]: call1,\n      [ApiCall.Key.create({ method: 'POST', url: '/path/1' })]: call2,\n      [ApiCall.Key.create({ method: 'GET', url: '/path/2' })]: call3,\n    }),\n  });\n\n  test('returns the state for the API call with the provided key', () => {\n    const key = ApiCall.Key.create({ method: 'GET', url: '/path/1' });\n    expect(ApiCall.find(state, key)).toBe(call1);\n  });\n\n  test('builds the key by itself if provided an object', () => {\n    expect(ApiCall.find(state, { method: 'POST', url: '/path/1' })).toBe(call2);\n  });\n});\n\ndescribe('#shouldPerform()', () => {\n  const call1 = ApiCall.State.createLoading();\n  const call2 = ApiCall.State.createSucceeded();\n  const call3 = ApiCall.State.createFailed();\n  const state = new Map({\n    apiCalls: new Map({\n      [ApiCall.Key.create({ method: 'GET', url: '/path/1' })]: call1,\n      [ApiCall.Key.create({ method: 'POST', url: '/path/1' })]: call2,\n      [ApiCall.Key.create({ method: 'GET', url: '/path/2' })]: call3,\n      [ApiCall.Key.create({ method: 'GET', url: '/path/3' })]: undefined,\n    }),\n  });\n\n  test('returns whether an API call should be performed or not', () => {\n    expect(ApiCall.shouldPerform(state, 'GET /path/1')).toBe(false);\n    expect(ApiCall.shouldPerform(state, 'POST /path/1')).toBe(false);\n    expect(ApiCall.shouldPerform(state, 'GET /path/2')).toBe(false);\n    expect(ApiCall.shouldPerform(state, 'GET /path/3')).toBe(true);\n    expect(ApiCall.shouldPerform(state, 'GET /new/path')).toBe(true);\n  });\n\n  test('builds the key by itself if provided an object', () => {\n    expect(ApiCall.shouldPerform(state, { method: 'POST', url: '/path/1' })).toBe(false);\n  });\n});\n\ndescribe('#createAction()', () => {\n  const originalCreate = ApiCall.Action.create;\n\n  afterEach(() => {\n    ApiCall.Action.create = originalCreate;\n  });\n\n  test('calls ApiCall.Action.create()', () => {\n    ApiCall.Action.create = jest.fn();\n    const originalAction = { type: 'CALL_REQUEST', url: '/path', method: 'GET' };\n    ApiCall.createAction(originalAction);\n    expect(ApiCall.Action.create).toHaveBeenCalledWith(originalAction);\n  });\n});\n\ndescribe('#clean()', () => {\n  test('returns an action of API_CALL_CLEAN type with the passed key', () => {\n    const action = ApiCall.clean('key');\n    expect(action.type).toBe(ApiCall.API_CALL_CLEAN);\n    expect(action.key).toBe('key');\n  });\n});\n\ndescribe('#getErrors()', () => {\n  const state = new Map({\n    apiCalls: new Map({\n      [ApiCall.Key.create({ method: 'GET', url: '/path/1' })]: ApiCall.State.createLoading(),\n      [ApiCall.Key.create({ method: 'POST', url: '/path/1' })]: ApiCall.State.createFailed(),\n      [ApiCall.Key.create({ method: 'GET', url: '/path/2' })]: ApiCall.State.createFailed(),\n      [ApiCall.Key.create({ method: 'GET', url: '/path/3' })]: ApiCall.State.createSucceeded(),\n    }),\n  });\n\n  test('returns all errored API calls', () => {\n    const errors = ApiCall.getErrors(state);\n    expect(errors.size).toBe(2);\n  });\n});\n"]}