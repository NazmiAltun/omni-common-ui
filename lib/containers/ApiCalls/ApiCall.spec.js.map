{"version":3,"sources":["containers/ApiCalls/ApiCall.spec.js"],"names":["describe","it","API_CALL_CLEAN","to","equal","Key","Action","State","throw","call1","createLoading","call2","createSucceeded","call3","createFailed","state","apiCalls","create","method","url","key","find","undefined","shouldPerform","be","false","originalCreate","afterEach","spy","originalAction","type","createAction","args","eql","action","clean","errors","getErrors","size"],"mappings":";;AAAA;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;AACA;;;;;;;;AAEAA,SAAS,SAAT,EAAoB,YAAM;AACxBC,KAAG,oCAAH,EAAyC,YAAM;AAC7C,sBAAO,kBAAQC,cAAf,EAA+BC,EAA/B,CAAkCC,KAAlC,CAAwC,gBAAxC;AACD,GAFD;;AAIAH,KAAG,uBAAH,EAA4B,YAAM;AAChC,sBAAO,kBAAQI,GAAf,EAAoBF,EAApB,CAAuBC,KAAvB;AACD,GAFD;;AAIAH,KAAG,6BAAH,EAAkC,YAAM;AACtC,sBAAO,kBAAQK,MAAf,EAAuBH,EAAvB,CAA0BC,KAA1B;AACD,GAFD;;AAIAH,KAAG,2BAAH,EAAgC,YAAM;AACpC,sBAAO,kBAAQM,KAAf,EAAsBJ,EAAtB,CAAyBC,KAAzB;AACD,GAFD;;AAIAH,KAAG,8CAAH,EAAmD,YAAM;AACvD,sBAAO,YAAM;AAAE,wBAAQM,KAAR,GAAgB,EAAhB;AAAqB,KAApC,EAAsCJ,EAAtC,CAAyCK,KAAzC;AACA,sBAAO,YAAM;AAAE,wBAAQF,MAAR,GAAiB,EAAjB;AAAsB,KAArC,EAAuCH,EAAvC,CAA0CK,KAA1C;AACA,sBAAO,YAAM;AAAE,wBAAQH,GAAR,GAAc,EAAd;AAAmB,KAAlC,EAAoCF,EAApC,CAAuCK,KAAvC;AACD,GAJD;;AAMAR,WAAS,SAAT,EAAoB,YAAM;AAAA;;AACxB,QAAMS,QAAQ,kBAAQF,KAAR,CAAcG,aAAd,EAAd;AACA,QAAMC,QAAQ,kBAAQJ,KAAR,CAAcK,eAAd,EAAd;AACA,QAAMC,QAAQ,kBAAQN,KAAR,CAAcO,YAAd,EAAd;AACA,QAAMC,QAAQ,mBAAQ;AACpBC,gBAAU,qDACP,kBAAQX,GAAR,CAAYY,MAAZ,CAAmB,EAAEC,QAAQ,KAAV,EAAiBC,KAAK,SAAtB,EAAnB,CADO,EACiDV,KADjD,yBAEP,kBAAQJ,GAAR,CAAYY,MAAZ,CAAmB,EAAEC,QAAQ,MAAV,EAAkBC,KAAK,SAAvB,EAAnB,CAFO,EAEkDR,KAFlD,yBAGP,kBAAQN,GAAR,CAAYY,MAAZ,CAAmB,EAAEC,QAAQ,KAAV,EAAiBC,KAAK,SAAtB,EAAnB,CAHO,EAGiDN,KAHjD;AADU,KAAR,CAAd;;AAQAZ,OAAG,0DAAH,EAA+D,YAAM;AACnE,UAAMmB,MAAM,kBAAQf,GAAR,CAAYY,MAAZ,CAAmB,EAAEC,QAAQ,KAAV,EAAiBC,KAAK,SAAtB,EAAnB,CAAZ;AACA,wBAAO,kBAAQE,IAAR,CAAaN,KAAb,EAAoBK,GAApB,CAAP,EAAiCjB,EAAjC,CAAoCC,KAApC,CAA0CK,KAA1C;AACD,KAHD;;AAKAR,OAAG,gDAAH,EAAqD,YAAM;AACzD,wBAAO,kBAAQoB,IAAR,CAAaN,KAAb,EAAoB,EAAEG,QAAQ,MAAV,EAAkBC,KAAK,SAAvB,EAApB,CAAP,EAAgEhB,EAAhE,CAAmEC,KAAnE,CAAyEO,KAAzE;AACD,KAFD;AAGD,GApBD;;AAsBAX,WAAS,kBAAT,EAA6B,YAAM;AAAA;;AACjC,QAAMS,QAAQ,kBAAQF,KAAR,CAAcG,aAAd,EAAd;AACA,QAAMC,QAAQ,kBAAQJ,KAAR,CAAcK,eAAd,EAAd;AACA,QAAMC,QAAQ,kBAAQN,KAAR,CAAcO,YAAd,EAAd;AACA,QAAMC,QAAQ,mBAAQ;AACpBC,gBAAU,uDACP,kBAAQX,GAAR,CAAYY,MAAZ,CAAmB,EAAEC,QAAQ,KAAV,EAAiBC,KAAK,SAAtB,EAAnB,CADO,EACiDV,KADjD,0BAEP,kBAAQJ,GAAR,CAAYY,MAAZ,CAAmB,EAAEC,QAAQ,MAAV,EAAkBC,KAAK,SAAvB,EAAnB,CAFO,EAEkDR,KAFlD,0BAGP,kBAAQN,GAAR,CAAYY,MAAZ,CAAmB,EAAEC,QAAQ,KAAV,EAAiBC,KAAK,SAAtB,EAAnB,CAHO,EAGiDN,KAHjD,0BAIP,kBAAQR,GAAR,CAAYY,MAAZ,CAAmB,EAAEC,QAAQ,KAAV,EAAiBC,KAAK,SAAtB,EAAnB,CAJO,EAIiDG,SAJjD;AADU,KAAR,CAAd;;AASArB,OAAG,wDAAH,EAA6D,YAAM;AACjE,wBAAO,kBAAQsB,aAAR,CAAsBR,KAAtB,EAA6B,aAA7B,CAAP,EAAoDZ,EAApD,CAAuDC,KAAvD,CAA6D,KAA7D,EAAoE,SAApE;AACA,wBAAO,kBAAQmB,aAAR,CAAsBR,KAAtB,EAA6B,cAA7B,CAAP,EAAqDZ,EAArD,CAAwDC,KAAxD,CAA8D,KAA9D,EAAqE,WAArE;AACA,wBAAO,kBAAQmB,aAAR,CAAsBR,KAAtB,EAA6B,aAA7B,CAAP,EAAoDZ,EAApD,CAAuDC,KAAvD,CAA6D,KAA7D,EAAoE,QAApE;AACA,wBAAO,kBAAQmB,aAAR,CAAsBR,KAAtB,EAA6B,aAA7B,CAAP,EAAoDZ,EAApD,CAAuDC,KAAvD,CAA6D,IAA7D,EAAmE,cAAnE;AACA,wBAAO,kBAAQmB,aAAR,CAAsBR,KAAtB,EAA6B,eAA7B,CAAP,EAAsDZ,EAAtD,CAAyDC,KAAzD,CAA+D,IAA/D,EAAqE,kBAArE;AACD,KAND;;AAQAH,OAAG,gDAAH,EAAqD,YAAM;AACzD,wBAAO,kBAAQsB,aAAR,CAAsBR,KAAtB,EAA6B,EAAEG,QAAQ,MAAV,EAAkBC,KAAK,SAAvB,EAA7B,CAAP,EAAyEhB,EAAzE,CAA4EqB,EAA5E,CAA+EC,KAA/E;AACD,KAFD;AAGD,GAxBD;;AA0BAzB,WAAS,iBAAT,EAA4B,YAAM;AAChC,QAAM0B,iBAAiB,kBAAQpB,MAAR,CAAeW,MAAtC;;AAEAU,cAAU,YAAM;AACd,wBAAQrB,MAAR,CAAeW,MAAf,GAAwBS,cAAxB;AACD,KAFD;;AAIAzB,OAAG,+BAAH,EAAoC,YAAM;AACxC,wBAAQK,MAAR,CAAeW,MAAf,GAAwB,gBAAMW,GAAN,EAAxB;AACA,UAAMC,iBAAiB,EAAEC,MAAM,cAAR,EAAwBX,KAAK,OAA7B,EAAsCD,QAAQ,KAA9C,EAAvB;AACA,wBAAQa,YAAR,CAAqBF,cAArB;AACA,wBAAO,kBAAQvB,MAAR,CAAeW,MAAf,CAAsBe,IAAtB,CAA2B,CAA3B,CAAP,EAAsC7B,EAAtC,CAAyC8B,GAAzC,CAA6C,CAACJ,cAAD,CAA7C;AACD,KALD;AAMD,GAbD;;AAeA7B,WAAS,UAAT,EAAqB,YAAM;AACzBC,OAAG,8DAAH,EAAmE,YAAM;AACvE,UAAMiC,SAAS,kBAAQC,KAAR,CAAc,KAAd,CAAf;AACA,wBAAOD,OAAOJ,IAAd,EAAoB3B,EAApB,CAAuBC,KAAvB,CAA6B,kBAAQF,cAArC;AACA,wBAAOgC,OAAOd,GAAd,EAAmBjB,EAAnB,CAAsBC,KAAtB,CAA4B,KAA5B;AACD,KAJD;AAKD,GAND;;AAQAJ,WAAS,cAAT,EAAyB,YAAM;AAAA;;AAC7B,QAAMe,QAAQ,mBAAQ;AACpBC,gBAAU,uDACP,kBAAQX,GAAR,CAAYY,MAAZ,CAAmB,EAAEC,QAAQ,KAAV,EAAiBC,KAAK,SAAtB,EAAnB,CADO,EACiD,kBAAQZ,KAAR,CAAcG,aAAd,EADjD,0BAEP,kBAAQL,GAAR,CAAYY,MAAZ,CAAmB,EAAEC,QAAQ,MAAV,EAAkBC,KAAK,SAAvB,EAAnB,CAFO,EAEkD,kBAAQZ,KAAR,CAAcO,YAAd,EAFlD,0BAGP,kBAAQT,GAAR,CAAYY,MAAZ,CAAmB,EAAEC,QAAQ,KAAV,EAAiBC,KAAK,SAAtB,EAAnB,CAHO,EAGiD,kBAAQZ,KAAR,CAAcO,YAAd,EAHjD,0BAIP,kBAAQT,GAAR,CAAYY,MAAZ,CAAmB,EAAEC,QAAQ,KAAV,EAAiBC,KAAK,SAAtB,EAAnB,CAJO,EAIiD,kBAAQZ,KAAR,CAAcK,eAAd,EAJjD;AADU,KAAR,CAAd;;AASAX,OAAG,+BAAH,EAAoC,YAAM;AACxC,UAAMmC,SAAS,kBAAQC,SAAR,CAAkBtB,KAAlB,CAAf;AACA,wBAAOqB,OAAOE,IAAd,EAAoBnC,EAApB,CAAuBC,KAAvB,CAA6B,CAA7B;AACD,KAHD;AAID,GAdD;AAeD,CA7GD","file":"ApiCall.spec.js","sourcesContent":["import { expect } from 'chai';\nimport ApiCall from './ApiCall';\nimport _ApiKey from './ApiKey';\nimport _ApiAction from './ApiAction';\nimport _ApiState from './ApiState';\nimport { Map } from 'immutable';\nimport Sinon from 'sinon';\n\ndescribe('ApiCall', () => {\n  it('exposes API_CALL_CLEAN action type', () => {\n    expect(ApiCall.API_CALL_CLEAN).to.equal('API_CALL_CLEAN');\n  });\n\n  it('exposes ApiKey as Key', () => {\n    expect(ApiCall.Key).to.equal(_ApiKey);\n  });\n\n  it('exposes ApiAction as Action', () => {\n    expect(ApiCall.Action).to.equal(_ApiAction);\n  });\n\n  it('exposes ApiState as State', () => {\n    expect(ApiCall.State).to.equal(_ApiState);\n  });\n\n  it('does not allow to reassign its inner classes', () => {\n    expect(() => { ApiCall.State = {}; }).to.throw();\n    expect(() => { ApiCall.Action = {}; }).to.throw();\n    expect(() => { ApiCall.Key = {}; }).to.throw();\n  });\n\n  describe('#find()', () => {\n    const call1 = ApiCall.State.createLoading();\n    const call2 = ApiCall.State.createSucceeded();\n    const call3 = ApiCall.State.createFailed();\n    const state = new Map({\n      apiCalls: new Map({\n        [ApiCall.Key.create({ method: 'GET', url: '/path/1' })]: call1,\n        [ApiCall.Key.create({ method: 'POST', url: '/path/1' })]: call2,\n        [ApiCall.Key.create({ method: 'GET', url: '/path/2' })]: call3,\n      }),\n    });\n\n    it('returns the state for the API call with the provided key', () => {\n      const key = ApiCall.Key.create({ method: 'GET', url: '/path/1' });\n      expect(ApiCall.find(state, key)).to.equal(call1);\n    });\n\n    it('builds the key by itself if provided an object', () => {\n      expect(ApiCall.find(state, { method: 'POST', url: '/path/1' })).to.equal(call2);\n    });\n  });\n\n  describe('#shouldPerform()', () => {\n    const call1 = ApiCall.State.createLoading();\n    const call2 = ApiCall.State.createSucceeded();\n    const call3 = ApiCall.State.createFailed();\n    const state = new Map({\n      apiCalls: new Map({\n        [ApiCall.Key.create({ method: 'GET', url: '/path/1' })]: call1,\n        [ApiCall.Key.create({ method: 'POST', url: '/path/1' })]: call2,\n        [ApiCall.Key.create({ method: 'GET', url: '/path/2' })]: call3,\n        [ApiCall.Key.create({ method: 'GET', url: '/path/3' })]: undefined,\n      }),\n    });\n\n    it('returns whether an API call should be performed or not', () => {\n      expect(ApiCall.shouldPerform(state, 'GET /path/1')).to.equal(false, 'loading');\n      expect(ApiCall.shouldPerform(state, 'POST /path/1')).to.equal(false, 'succeeded');\n      expect(ApiCall.shouldPerform(state, 'GET /path/2')).to.equal(false, 'failed');\n      expect(ApiCall.shouldPerform(state, 'GET /path/3')).to.equal(true, 'should fetch');\n      expect(ApiCall.shouldPerform(state, 'GET /new/path')).to.equal(true, 'should fetch new');\n    });\n\n    it('builds the key by itself if provided an object', () => {\n      expect(ApiCall.shouldPerform(state, { method: 'POST', url: '/path/1' })).to.be.false;\n    });\n  });\n\n  describe('#createAction()', () => {\n    const originalCreate = ApiCall.Action.create;\n\n    afterEach(() => {\n      ApiCall.Action.create = originalCreate;\n    });\n\n    it('calls ApiCall.Action.create()', () => {\n      ApiCall.Action.create = Sinon.spy();\n      const originalAction = { type: 'CALL_REQUEST', url: '/path', method: 'GET' };\n      ApiCall.createAction(originalAction);\n      expect(ApiCall.Action.create.args[0]).to.eql([originalAction]);\n    });\n  });\n\n  describe('#clean()', () => {\n    it('returns an action of API_CALL_CLEAN type with the passed key', () => {\n      const action = ApiCall.clean('key');\n      expect(action.type).to.equal(ApiCall.API_CALL_CLEAN);\n      expect(action.key).to.equal('key');\n    });\n  });\n\n  describe('#getErrors()', () => {\n    const state = new Map({\n      apiCalls: new Map({\n        [ApiCall.Key.create({ method: 'GET', url: '/path/1' })]: ApiCall.State.createLoading(),\n        [ApiCall.Key.create({ method: 'POST', url: '/path/1' })]: ApiCall.State.createFailed(),\n        [ApiCall.Key.create({ method: 'GET', url: '/path/2' })]: ApiCall.State.createFailed(),\n        [ApiCall.Key.create({ method: 'GET', url: '/path/3' })]: ApiCall.State.createSucceeded(),\n      }),\n    });\n\n    it('returns all errored API calls', () => {\n      const errors = ApiCall.getErrors(state);\n      expect(errors.size).to.equal(2);\n    });\n  });\n});\n"]}