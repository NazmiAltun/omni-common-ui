{"version":3,"sources":["containers/ApiCalls/ApiCall.js"],"names":["ApiCall","state","key","object","builtKey","Key","create","find","get","State","shouldPerform","action","Action","Object","freeze","type","API_CALL_CLEAN","getAllErrors","filter","call","disableDefault","hasFailed","param","Error"],"mappings":";;;;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;;;;;IAEqBA,O;;;;;;;yBACPC,K,EAAOC,G,EAAK;AACtB,UAAI,gBAAGC,MAAH,CAAUD,GAAV,CAAJ,EAAoB;AAClB,YAAME,WAAWJ,QAAQK,GAAR,CAAYC,MAAZ,CAAmBJ,GAAnB,CAAjB;AACA,eAAOF,QAAQO,IAAR,CAAaN,KAAb,EAAoBG,QAApB,CAAP;AACD;;AAED,aAAOH,MAAMO,GAAN,CAAU,UAAV,EAAsBA,GAAtB,CAA0BN,GAA1B,CAAP;AACD;;;kCAEoBD,K,EAAOC,G,EAAK;AAC/B,aAAOF,QAAQS,KAAR,CAAcC,aAAd,CAA4BV,QAAQO,IAAR,CAAaN,KAAb,EAAoBC,GAApB,CAA5B,CAAP;AACD;;;iCAEmBS,M,EAAQ;AAC1B,aAAOX,QAAQY,MAAR,CAAeN,MAAf,CAAsBK,MAAtB,CAAP;AACD;;;0BAEYT,G,EAAK;AAChB,aAAOW,OAAOC,MAAP,CAAc;AACnBC,cAAMf,QAAQgB,cADK;AAEnBd;AAFmB,OAAd,CAAP;AAID;;;8BAEgBD,K,EAAO;AACtB,aAAOD,QAAQiB,YAAR,CAAqBhB,KAArB,EAA4BiB,MAA5B,CAAmC,UAACC,IAAD;AAAA,eAAU,CAAEA,KAAKC,cAAjB;AAAA,OAAnC,CAAP;AACD;;;iCAEmBnB,K,EAAO;AACzB,aAAOA,MAAMO,GAAN,CAAU,UAAV,EAAsBU,MAAtB,CAA6B,UAACC,IAAD;AAAA,eAAUnB,QAAQS,KAAR,CAAcY,SAAd,CAAwBF,IAAxB,CAAV;AAAA,OAA7B,CAAP;AACD;;;wBAE2B;AAC1B,aAAO,gBAAP;AACD;;;wBAEmB;AAClB;AACD,K;sBAUiBG,K,EAAO;AACvB,YAAM,IAAIC,KAAJ,CAAU,0BAAV,CAAN;AACD;;;wBAVgB;AACf;AACD,K;sBAUcD,K,EAAO;AACpB,YAAM,IAAIC,KAAJ,CAAU,0BAAV,CAAN;AACD;;;wBAVkB;AACjB;AACD,K;sBAUgBD,K,EAAO;AACtB,YAAM,IAAIC,KAAJ,CAAU,0BAAV,CAAN;AACD;;;;;;kBA3DkBvB,O","file":"ApiCall.js","sourcesContent":["import _ApiKey from './ApiKey';\nimport _ApiAction from './ApiAction';\nimport _ApiState from './ApiState';\nimport is from 'is_js';\n\nexport default class ApiCall {\n  static find(state, key) {\n    if (is.object(key)) {\n      const builtKey = ApiCall.Key.create(key);\n      return ApiCall.find(state, builtKey);\n    }\n\n    return state.get('apiCalls').get(key);\n  }\n\n  static shouldPerform(state, key) {\n    return ApiCall.State.shouldPerform(ApiCall.find(state, key));\n  }\n\n  static createAction(action) {\n    return ApiCall.Action.create(action);\n  }\n\n  static clean(key) {\n    return Object.freeze({\n      type: ApiCall.API_CALL_CLEAN,\n      key,\n    });\n  }\n\n  static getErrors(state) {\n    return ApiCall.getAllErrors(state).filter((call) => ! call.disableDefault);\n  }\n\n  static getAllErrors(state) {\n    return state.get('apiCalls').filter((call) => ApiCall.State.hasFailed(call));\n  }\n\n  static get API_CALL_CLEAN() {\n    return 'API_CALL_CLEAN';\n  }\n\n  static get Action() {\n    return _ApiAction;\n  }\n\n  static get Key() {\n    return _ApiKey;\n  }\n\n  static get State() {\n    return _ApiState;\n  }\n\n  static set Action(param) {\n    throw new Error('Not allowed to reassign!');\n  }\n\n  static set Key(param) {\n    throw new Error('Not allowed to reassign!');\n  }\n\n  static set State(param) {\n    throw new Error('Not allowed to reassign!');\n  }\n}\n"]}