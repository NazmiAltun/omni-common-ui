{"version":3,"sources":["containers/ApiCalls/ApiState.js"],"names":["STATE_LOADING","STATE_SUCCEEDED","STATE_FAILED","NotAnInstanceOfApiCallValue","Error","ApiStateRecord","values","Object","assign","disableDefault","timestamp","Date","status","undefined","error","id","ApiState","value","isValue","state","isLoading","hasSucceeded","hasFailed","get"],"mappings":";;;;;;;;;AAAA;;;;;;;;AAEA,IAAMA,gBAAgB,SAAtB;AACA,IAAMC,kBAAkB,WAAxB;AACA,IAAMC,eAAe,QAArB;;IAEaC,2B,WAAAA,2B;;;;;;;;;;EAAoCC,K;;IAE3CC,c;;;AAOJ,4BAAyB;AAAA,QAAbC,MAAa,uEAAJ,EAAI;;AAAA;;AAAA,2HACjBC,OAAOC,MAAP,CAAc,EAAd,EACFF,MADE,EAEF,EAAEG,gBAAgB,CAAC,CAAEH,OAAOG,cAA5B,EAFE,EAGF,EAAEC,WAAW,IAAIC,IAAJ,EAAb,EAHE,CADiB;AAKxB;;;EAZ0B,uBAAO;AAClCC,UAAQC,SAD0B;AAElCC,SAAOD,SAF2B;AAGlCH,aAAWG,SAHuB;AAIlCE,MAAIF,SAJ8B;AAKlCJ,kBAAgBI;AALkB,CAAP,C;;IAeRG,Q;;;;;;;oCACID,E,EAAI;AACzB,aAAO,IAAIV,cAAJ,CAAmB,EAAEU,MAAF,EAAMH,QAAQX,eAAd,EAAnB,CAAP;AACD;;;iCAEmBc,E,EAAID,K,EAAgC;AAAA,qFAAJ,EAAI;AAAA,UAAvBL,cAAuB,QAAvBA,cAAuB;;AACtD,aAAO,IAAIJ,cAAJ,CAAmB;AACxBU,cADwB;AAExBH,gBAAQV,YAFgB;AAGxBY,oBAHwB;AAIxBL;AAJwB,OAAnB,CAAP;AAMD;;;kCAEoBM,E,EAA6B;AAAA,sFAAJ,EAAI;AAAA,UAAvBN,cAAuB,SAAvBA,cAAuB;;AAChD,aAAO,IAAIJ,cAAJ,CAAmB,EAAEU,MAAF,EAAMH,QAAQZ,aAAd,EAA6BS,8BAA7B,EAAnB,CAAP;AACD;;;4BAEcQ,K,EAAO;AACpB,aAAOA,iBAAiBZ,cAAxB;AACD;;;8BAEgBY,K,EAAO;AACtB,UAAI,CAAED,SAASE,OAAT,CAAiBD,KAAjB,CAAN,EAA+B;AAC7B,cAAM,IAAId,2BAAJ,EAAN;AACD;;AAED,aAAOc,MAAML,MAAN,KAAiBZ,aAAxB;AACD;;;iCAEmBiB,K,EAAO;AACzB,UAAI,CAAED,SAASE,OAAT,CAAiBD,KAAjB,CAAN,EAA+B;AAC7B,cAAM,IAAId,2BAAJ,EAAN;AACD;;AAED,aAAOc,MAAML,MAAN,KAAiBX,eAAxB;AACD;;;8BAEgBgB,K,EAAO;AACtB,UAAI,CAAED,SAASE,OAAT,CAAiBD,KAAjB,CAAN,EAA+B;AAC7B,cAAM,IAAId,2BAAJ,EAAN;AACD;;AAED,aAAOc,MAAML,MAAN,KAAiBV,YAAxB;AACD;;;kCAEoBiB,K,EAAO;AAC1B,UAAI,CAAEH,SAASE,OAAT,CAAiBC,KAAjB,CAAN,EAA+B;AAC7B,eAAO,IAAP;AACD;;AAED,aAAO,CAAEH,SAASI,SAAT,CAAmBD,KAAnB,CAAF,IACH,CAAEH,SAASK,YAAT,CAAsBF,KAAtB,CADC,IAEH,CAAEH,SAASM,SAAT,CAAmBH,KAAnB,CAFN;AAGD;;;iCAEmBA,K,EAAO;AACzBA,YAAMI,GAAN,CAAU,WAAV;AACD;;;;;;kBA1DkBP,Q","file":"ApiState.js","sourcesContent":["import { Record } from 'immutable';\n\nconst STATE_LOADING = 'loading';\nconst STATE_SUCCEEDED = 'succeeded';\nconst STATE_FAILED = 'failed';\n\nexport class NotAnInstanceOfApiCallValue extends Error { }\n\nclass ApiStateRecord extends Record({\n  status: undefined,\n  error: undefined,\n  timestamp: undefined,\n  id: undefined,\n  disableDefault: undefined,\n}) {\n  constructor(values = {}) {\n    super(Object.assign({},\n        values,\n        { disableDefault: !! values.disableDefault },\n        { timestamp: new Date() }));\n  }\n}\n\nexport default class ApiState {\n  static createSucceeded(id) {\n    return new ApiStateRecord({ id, status: STATE_SUCCEEDED });\n  }\n\n  static createFailed(id, error, { disableDefault } = {}) {\n    return new ApiStateRecord({\n      id,\n      status: STATE_FAILED,\n      error,\n      disableDefault,\n    });\n  }\n\n  static createLoading(id, { disableDefault } = {}) {\n    return new ApiStateRecord({ id, status: STATE_LOADING, disableDefault });\n  }\n\n  static isValue(value) {\n    return value instanceof ApiStateRecord;\n  }\n\n  static isLoading(value) {\n    if (! ApiState.isValue(value)) {\n      throw new NotAnInstanceOfApiCallValue();\n    }\n\n    return value.status === STATE_LOADING;\n  }\n\n  static hasSucceeded(value) {\n    if (! ApiState.isValue(value)) {\n      throw new NotAnInstanceOfApiCallValue();\n    }\n\n    return value.status === STATE_SUCCEEDED;\n  }\n\n  static hasFailed(value) {\n    if (! ApiState.isValue(value)) {\n      throw new NotAnInstanceOfApiCallValue();\n    }\n\n    return value.status === STATE_FAILED;\n  }\n\n  static shouldPerform(state) {\n    if (! ApiState.isValue(state)) {\n      return true;\n    }\n\n    return ! ApiState.isLoading(state) &&\n        ! ApiState.hasSucceeded(state) &&\n        ! ApiState.hasFailed(state);\n  }\n\n  static getTimestamp(state) {\n    state.get('timestamp');\n  }\n}\n"]}