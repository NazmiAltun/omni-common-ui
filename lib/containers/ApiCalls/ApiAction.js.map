{"version":3,"sources":["containers/ApiCalls/ApiAction.js"],"names":["TYPE_REQUEST","TYPE_SUCCESS","TYPE_FAILURE","TYPE_ANY","InvalidAction","Error","FINGERPRINT","Symbol","TIMESTAMP","ApiAction","originalAction","action","Object","assign","not","object","string","url","toLowerCase","method","test","toUpperCase","type","isFailure","existy","error","newAction","Date","freeze","replace"],"mappings":"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","file":"ApiAction.js","sourcesContent":["import is from 'is_js';\nimport log from 'domain/log';\n\nconst TYPE_REQUEST = /_REQUEST$/i;\nconst TYPE_SUCCESS = /_SUCCESS$/i;\nconst TYPE_FAILURE = /_FAILURE$/i;\nconst TYPE_ANY = /(_REQUEST|_SUCCESS|_FAILURE)$/i;\n\nclass InvalidAction extends Error { }\n\nconst FINGERPRINT = Symbol('ApiAction');\nconst TIMESTAMP = Symbol('ApiAction/Timestamp');\n\nexport default class ApiAction {\n  static create(originalAction) {\n    const action = Object.assign({}, originalAction);\n    if (is.not.object(action)) {\n      throw new InvalidAction('An action should be an object');\n    }\n\n    if (is.not.string(action.url)) {\n      throw new InvalidAction('The action should have a url property of type string');\n    }\n\n    action.url = action.url.toLowerCase();\n\n    if (is.not.string(action.method)) {\n      throw new InvalidAction('The action should have a method property of type string');\n    }\n\n    if (! /GET|PUT|DELETE|POST/i.test(action.method)) {\n      throw new InvalidAction('The action should have a method property of type string');\n    }\n\n    action.method = action.method.toUpperCase();\n\n    if (is.not.string(action.type)) {\n      throw new InvalidAction('The action should have a type property of type string. ' +\n          `Got one with a type of ${typeof action.type}`);\n    }\n\n    if (! TYPE_ANY.test(action.type)) {\n      throw new InvalidAction('The type property of an action should end ' +\n          `with _REQUEST, _SUCCESS or _FAILURE. Got ${action.type}`);\n    }\n\n    if (/[a-z]/.test(action.type)) {\n      throw new InvalidAction('The type property of an action ' +\n          `should not contain lower case letter. Got ${action.type}`);\n    }\n\n    if (ApiAction.isFailure(action) && is.not.existy(action.error)) {\n      throw new InvalidAction('action.error should be defined for failed calls');\n    }\n\n    if (is.existy(action.error) && ! (action.error instanceof Error)) {\n      action.error = new Error(action.error);\n    }\n\n    const newAction = Object.assign(action, {\n      [FINGERPRINT]: true,\n      [TIMESTAMP]: new Date(),\n    });\n\n    if (ApiAction.isFailure(newAction)) {\n      log.error(newAction.error);\n    }\n\n    return Object.freeze(newAction);\n  }\n\n  static isApiAction(object) {\n    if (is.not.object(object)) {\n      return false;\n    }\n\n    return !! object[FINGERPRINT];\n  }\n\n  static isStarted(action) {\n    return TYPE_REQUEST.test(action.type);\n  }\n\n  static isSuccess(action) {\n    return TYPE_SUCCESS.test(action.type);\n  }\n\n  static isFailure(action) {\n    return TYPE_FAILURE.test(action.type);\n  }\n\n  static getApiType(action) {\n    return action.type.replace(TYPE_ANY, '');\n  }\n\n  static getTimestamp(action) {\n    return action[TIMESTAMP];\n  }\n}\n"]}