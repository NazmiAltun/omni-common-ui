{"version":3,"sources":["containers/ApiCalls/reducer.spec.js"],"names":["Key","State","describe","state","beforeEach","it","to","equal","set","clean","get","be","undefined","action","createAction","type","url","method","key","create","value","isValue","isLoading","hasSucceeded","hasFailed","error","id","Error"],"mappings":";;AAAA;;AACA;;;;AACA;;;;IAEQA,G,cAAAA,G;IAAKC,K,cAAAA,K;;;AAEbC,SAAS,UAAT,EAAqB,YAAM;AACzBA,WAAS,SAAT,EAAoB,YAAM;AACxB,QAAIC,cAAJ;;AAEAC,eAAW,YAAM;AACfD,cAAQ,qBAAR;AACD,KAFD;;AAIAE,OAAG,0DAAH,EAA+D,YAAM;AACnE,wBAAO,eAAQF,KAAR,EAAe,EAAf,CAAP,EAA2BG,EAA3B,CAA8BC,KAA9B,CAAoCJ,KAApC;AACD,KAFD;;AAIAE,OAAG,yDAAH,EAA8D,YAAM;AAClEF,cAAQA,MAAMK,GAAN,CAAU,KAAV,EAAiB,OAAjB,CAAR;AACA,wBAAO,eAAQL,KAAR,EAAe,WAAQM,KAAR,CAAc,KAAd,CAAf,EAAqCC,GAArC,CAAyC,KAAzC,CAAP,EAAwDJ,EAAxD,CAA2DK,EAA3D,CAA8DC,SAA9D;AACD,KAHD;;AAKAP,OAAG,qEAAH,EAA0E,YAAM;AAC9E,UAAMQ,SAAS,WAAQC,YAAR,CAAqB;AAClCC,cAAM,eAD4B;AAElCC,aAAK,KAF6B;AAGlCC,gBAAQ;AAH0B,OAArB,CAAf;;AAMA,UAAMC,MAAMlB,IAAImB,MAAJ,CAAWN,MAAX,CAAZ;AACA,UAAMO,QAAQ,eAAQjB,KAAR,EAAeU,MAAf,EAAuBH,GAAvB,CAA2BQ,GAA3B,CAAd;AACA,wBAAOjB,MAAMoB,OAAN,CAAcD,KAAd,CAAP,EAA6Bd,EAA7B,CAAgCC,KAAhC,CAAsC,IAAtC,EAA4C,YAA5C;AACA,wBAAON,MAAMqB,SAAN,CAAgBF,KAAhB,CAAP,EAA+Bd,EAA/B,CAAkCC,KAAlC,CAAwC,IAAxC,EAA8C,YAA9C;AACA,wBAAON,MAAMsB,YAAN,CAAmBH,KAAnB,CAAP,EAAkCd,EAAlC,CAAqCC,KAArC,CAA2C,KAA3C,EAAkD,eAAlD;AACA,wBAAON,MAAMuB,SAAN,CAAgBJ,KAAhB,CAAP,EAA+Bd,EAA/B,CAAkCC,KAAlC,CAAwC,KAAxC,EAA+C,YAA/C;AACA,wBAAOa,MAAMK,KAAb,EAAoBnB,EAApB,CAAuBC,KAAvB,CAA6BK,SAA7B,EAAwC,oBAAxC;AACA,wBAAOQ,MAAMM,EAAb,EAAiBpB,EAAjB,CAAoBC,KAApB,CAA0BW,GAA1B,EAA+B,gBAA/B;AACD,KAfD;;AAiBAb,OAAG,qEAAH,EAA0E,YAAM;AAC9E,UAAMQ,SAAS,WAAQC,YAAR,CAAqB;AAClCC,cAAM,eAD4B;AAElCC,aAAK,KAF6B;AAGlCC,gBAAQ;AAH0B,OAArB,CAAf;;AAMA,UAAMC,MAAMlB,IAAImB,MAAJ,CAAWN,MAAX,CAAZ;AACA,UAAMO,QAAQ,eAAQjB,KAAR,EAAeU,MAAf,EAAuBH,GAAvB,CAA2BQ,GAA3B,CAAd;AACA,wBAAOjB,MAAMoB,OAAN,CAAcD,KAAd,CAAP,EAA6Bd,EAA7B,CAAgCC,KAAhC,CAAsC,IAAtC,EAA4C,YAA5C;AACA,wBAAON,MAAMqB,SAAN,CAAgBF,KAAhB,CAAP,EAA+Bd,EAA/B,CAAkCC,KAAlC,CAAwC,KAAxC,EAA+C,YAA/C;AACA,wBAAON,MAAMsB,YAAN,CAAmBH,KAAnB,CAAP,EAAkCd,EAAlC,CAAqCC,KAArC,CAA2C,IAA3C,EAAiD,eAAjD;AACA,wBAAON,MAAMuB,SAAN,CAAgBJ,KAAhB,CAAP,EAA+Bd,EAA/B,CAAkCC,KAAlC,CAAwC,KAAxC,EAA+C,YAA/C;AACA,wBAAOa,MAAMK,KAAb,EAAoBnB,EAApB,CAAuBC,KAAvB,CAA6BK,SAA7B,EAAwC,oBAAxC;AACA,wBAAOQ,MAAMM,EAAb,EAAiBpB,EAAjB,CAAoBC,KAApB,CAA0BW,GAA1B,EAA+B,gBAA/B;AACD,KAfD;;AAiBAb,OAAG,mEAAH,EAAwE,YAAM;AAC5E,UAAMQ,SAAS,WAAQC,YAAR,CAAqB;AAClCC,cAAM,eAD4B;AAElCU,eAAO,IAAIE,KAAJ,EAF2B;AAGlCX,aAAK,KAH6B;AAIlCC,gBAAQ;AAJ0B,OAArB,CAAf;;AAOA,UAAMC,MAAMlB,IAAImB,MAAJ,CAAWN,MAAX,CAAZ;AACA,UAAMO,QAAQ,eAAQjB,KAAR,EAAeU,MAAf,EAAuBH,GAAvB,CAA2BQ,GAA3B,CAAd;AACA,wBAAOjB,MAAMoB,OAAN,CAAcD,KAAd,CAAP,EAA6Bd,EAA7B,CAAgCC,KAAhC,CAAsC,IAAtC,EAA4C,YAA5C;AACA,wBAAON,MAAMqB,SAAN,CAAgBF,KAAhB,CAAP,EAA+Bd,EAA/B,CAAkCC,KAAlC,CAAwC,KAAxC,EAA+C,YAA/C;AACA,wBAAON,MAAMsB,YAAN,CAAmBH,KAAnB,CAAP,EAAkCd,EAAlC,CAAqCC,KAArC,CAA2C,KAA3C,EAAkD,eAAlD;AACA,wBAAON,MAAMuB,SAAN,CAAgBJ,KAAhB,CAAP,EAA+Bd,EAA/B,CAAkCC,KAAlC,CAAwC,IAAxC,EAA8C,YAA9C;AACA,wBAAOa,MAAMK,KAAb,EAAoBnB,EAApB,CAAuBC,KAAvB,CAA6BM,OAAOY,KAApC,EAA2C,oBAA3C;AACA,wBAAOL,MAAMM,EAAb,EAAiBpB,EAAjB,CAAoBC,KAApB,CAA0BW,GAA1B,EAA+B,gBAA/B;AACD,KAhBD;AAiBD,GAnED;AAoED,CArED","file":"reducer.spec.js","sourcesContent":["import { expect } from 'chai';\nimport ApiCall, { reducer } from './';\nimport { Map } from 'immutable';\n\nconst { Key, State } = ApiCall;\n\ndescribe('ApiCalls', () => {\n  describe('reducer', () => {\n    let state;\n\n    beforeEach(() => {\n      state = Map();\n    });\n\n    it('does not modify the state if the action is not an Action', () => {\n      expect(reducer(state, {})).to.equal(state);\n    });\n\n    it('removes an entry when API_CALL_CLEAN action is received', () => {\n      state = state.set('key', 'value');\n      expect(reducer(state, ApiCall.clean('key')).get('key')).to.be.undefined;\n    });\n\n    it('sets the proper map item to loading when received a _REQUEST action', () => {\n      const action = ApiCall.createAction({\n        type: 'FETCH_REQUEST',\n        url: 'url',\n        method: 'GET',\n      });\n\n      const key = Key.create(action);\n      const value = reducer(state, action).get(key);\n      expect(State.isValue(value)).to.equal(true, 'type check');\n      expect(State.isLoading(value)).to.equal(true, 'is loading');\n      expect(State.hasSucceeded(value)).to.equal(false, 'has succeeded');\n      expect(State.hasFailed(value)).to.equal(false, 'has failed');\n      expect(value.error).to.equal(undefined, 'error is undefined');\n      expect(value.id).to.equal(key, 'state.id = key');\n    });\n\n    it('sets the proper map item to success when received a _SUCCESS action', () => {\n      const action = ApiCall.createAction({\n        type: 'FETCH_SUCCESS',\n        url: 'url',\n        method: 'GET',\n      });\n\n      const key = Key.create(action);\n      const value = reducer(state, action).get(key);\n      expect(State.isValue(value)).to.equal(true, 'type check');\n      expect(State.isLoading(value)).to.equal(false, 'is loading');\n      expect(State.hasSucceeded(value)).to.equal(true, 'has succeeded');\n      expect(State.hasFailed(value)).to.equal(false, 'has failed');\n      expect(value.error).to.equal(undefined, 'error is undefined');\n      expect(value.id).to.equal(key, 'state.id = key');\n    });\n\n    it('sets the proper map item to error when received a _FAILURE action', () => {\n      const action = ApiCall.createAction({\n        type: 'FETCH_FAILURE',\n        error: new Error(),\n        url: 'url',\n        method: 'GET',\n      });\n\n      const key = Key.create(action);\n      const value = reducer(state, action).get(key);\n      expect(State.isValue(value)).to.equal(true, 'type check');\n      expect(State.isLoading(value)).to.equal(false, 'is loading');\n      expect(State.hasSucceeded(value)).to.equal(false, 'has succeeded');\n      expect(State.hasFailed(value)).to.equal(true, 'has failed');\n      expect(value.error).to.equal(action.error, 'error is the error');\n      expect(value.id).to.equal(key, 'state.id = key');\n    });\n  });\n});\n"]}