{"version":3,"sources":["containers/ApiCalls/reducer.spec.js"],"names":["Key","State","state","beforeEach","test","expect","toBe","set","clean","get","toBeUndefined","action","createAction","type","url","method","key","create","value","isValue","isLoading","hasSucceeded","hasFailed","error","undefined","id","Error"],"mappings":"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","file":"reducer.spec.js","sourcesContent":["import ApiCall, { reducer } from './';\nimport { Map } from 'immutable';\n\nconst { Key, State } = ApiCall;\n\nlet state;\n\nbeforeEach(() => {\n  state = Map();\n});\n\ntest('does not modify the state if the action is not an Action', () => {\n  expect(reducer(state, {})).toBe(state);\n});\n\ntest('removes an entry when API_CALL_CLEAN action is received', () => {\n  state = state.set('key', 'value');\n  expect(reducer(state, ApiCall.clean('key')).get('key')).toBeUndefined();\n});\n\ntest('sets the proper map item to loading when received a _REQUEST action', () => {\n  const action = ApiCall.createAction({\n    type: 'FETCH_REQUEST',\n    url: 'url',\n    method: 'GET',\n  });\n\n  const key = Key.create(action);\n  const value = reducer(state, action).get(key);\n  expect(State.isValue(value)).toBe(true);\n  expect(State.isLoading(value)).toBe(true);\n  expect(State.hasSucceeded(value)).toBe(false);\n  expect(State.hasFailed(value)).toBe(false);\n  expect(value.error).toBe(undefined);\n  expect(value.id).toBe(key);\n});\n\ntest('sets the proper map item to success when received a _SUCCESS action', () => {\n  const action = ApiCall.createAction({\n    type: 'FETCH_SUCCESS',\n    url: 'url',\n    method: 'GET',\n  });\n\n  const key = Key.create(action);\n  const value = reducer(state, action).get(key);\n  expect(State.isValue(value)).toBe(true);\n  expect(State.isLoading(value)).toBe(false);\n  expect(State.hasSucceeded(value)).toBe(true);\n  expect(State.hasFailed(value)).toBe(false);\n  expect(value.error).toBe(undefined);\n  expect(value.id).toBe(key);\n});\n\ntest('sets the proper map item to error when received a _FAILURE action', () => {\n  const action = ApiCall.createAction({\n    type: 'FETCH_FAILURE',\n    error: new Error(),\n    url: 'url',\n    method: 'GET',\n  });\n\n  const key = Key.create(action);\n  const value = reducer(state, action).get(key);\n  expect(State.isValue(value)).toBe(true);\n  expect(State.isLoading(value)).toBe(false);\n  expect(State.hasSucceeded(value)).toBe(false);\n  expect(State.hasFailed(value)).toBe(true);\n  expect(value.error).toBe(action.error);\n  expect(value.id).toBe(key);\n});\n"]}