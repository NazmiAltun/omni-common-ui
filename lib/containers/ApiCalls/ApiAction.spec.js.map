{"version":3,"sources":["containers/ApiCalls/ApiAction.spec.js"],"names":["buildAction","configParam","Object","assign","type","error","Error","url","method","test","expect","create","toThrowError","undefined","not","action","toBe","originalAction","callAction","otherProp","toBeInstanceOf","jest","fn","mock","calls","toEqual","describe","isApiAction","isStarted","isSuccess","isFailure"],"mappings":"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","file":"ApiAction.spec.js","sourcesContent":["import ApiAction from './ApiAction';\nimport log from 'domain/log';\n\nconst buildAction = (configParam = {}) => Object.assign({},\n  {\n    type: 'CALL_FAILURE',\n    error: new Error(),\n    url: '/some/path',\n    method: 'GET',\n  },\n  configParam);\n\ntest('throws an error if nothing is passed', () => {\n  expect(() => ApiAction.create()).toThrowError();\n});\n\ntest('throws an error if a parameter that is not an object is passed', () => {\n  expect(() => ApiAction.create('some string')).toThrowError();\n});\n\ntest('throws an error if the action does not have a url property', () => {\n  expect(() => ApiAction.create(buildAction({ url: undefined }))).toThrowError();\n});\n\ntest('throws an error if the url property is not a string', () => {\n  expect(() => ApiAction.create(buildAction({ url: {} }))).toThrowError();\n});\n\ntest('throws an error if the action does not have a method proptery', () => {\n  expect(() => ApiAction.create(buildAction({ method: undefined }))).toThrowError();\n});\n\ntest('throws an error if the method property is not GET, PUT, POST or DELETE', () => {\n  expect(() => ApiAction.create(buildAction({ method: 'some string' }))).toThrowError();\n  expect(() => ApiAction.create(buildAction({ method: 'GET' }))).not.toThrowError();\n  expect(() => ApiAction.create(buildAction({ method: 'PUT' }))).not.toThrowError();\n  expect(() => ApiAction.create(buildAction({ method: 'POST' }))).not.toThrowError();\n  expect(() => ApiAction.create(buildAction({ method: 'DELETE' }))).not.toThrowError();\n});\n\ntest('throws an error if the action does not have a type proptery', () => {\n  expect(() => ApiAction.create(buildAction({ type: undefined }))).toThrowError();\n});\n\ntest('throws an error if the type proptery has lower case letters', () => {\n  expect(() => ApiAction.create(buildAction({ type: 'Call_REQUEST' }))).toThrowError();\n});\n\ntest('throws an error ' +\n    'if the type property does not end with _REQUEST, _SUCCESS or _FAILURE', () => {\n  expect(() => ApiAction.create(buildAction({ type: 'some string' }))).toThrowError();\n  expect(() => ApiAction.create(buildAction({ type: 'CALL_REQUEST' }))).not.toThrowError();\n  expect(() => ApiAction.create(buildAction({ type: 'CALL_SUCCESS' }))).not.toThrowError();\n  expect(() => ApiAction.create(buildAction({ type: 'CALL_FAILURE' }))).not.toThrowError();\n});\n\ntest('returns the wrapped action if the provided one is valid', () => {\n  const action = ApiAction.create(buildAction());\n  expect(action.url).toBe('/some/path');\n  expect(action.method).toBe('GET');\n});\n\ntest('does not return the same object instance it receives', () => {\n  const originalAction = buildAction();\n  const action = ApiAction.create(originalAction);\n  expect(originalAction).not.toBe(action);\n});\n\ntest('converts the provided URL to lower case', () => {\n  const action = ApiAction.create(buildAction({ url: '/some/Path' }));\n  expect(action.url).toBe('/some/path');\n});\n\ntest('converts the provided method to upper case', () => {\n  const action = ApiAction.create(buildAction({ method: 'get' }));\n  expect(action.method).toBe('GET');\n});\n\ntest('allows to access all the properties of the original action', () => {\n  const callAction = ApiAction.create(buildAction({ otherProp: 1 }));\n  expect(callAction.otherProp).toBe(1);\n});\n\ntest('throws an error if a _FAILURE action does not have an error property', () => {\n  expect(() => ApiAction.create(buildAction({ error: undefined }))).toThrowError();\n  expect(() => ApiAction.create(buildAction({ error: null }))).toThrowError();\n  expect(() => ApiAction.create(buildAction({ error: '' }))).not.toThrowError();\n});\n\ntest('converts action.error into an instance of Error if it\\'s not already the case', () => {\n  expect(ApiAction.create(buildAction({ error: '' })).error).toBeInstanceOf(Error);\n});\n\ntest('logs the error of a failure action', () => {\n  log.error = jest.fn();\n  const error = new Error('an error');\n  ApiAction.create(buildAction({ error }));\n  expect(log.error.mock.calls).toEqual([[error]]);\n});\n\ndescribe('#isApiAction()', () => {\n  test('returns true an action was created with ApiAction.create()', () => {\n    const originalAction = buildAction({ type: 'CALL_REQUEST' });\n    const callAction = ApiAction.create(originalAction);\n    expect(ApiAction.isApiAction(callAction)).toBe(true);\n    expect(ApiAction.isApiAction(originalAction)).toBe(false);\n  });\n});\n\ndescribe('#isStarted()', () => {\n  test('returns true if action.type ends with _REQUEST', () => {\n    const callAction = ApiAction.create(buildAction({ type: 'CALL_REQUEST' }));\n    expect(ApiAction.isStarted(callAction)).toBe(true);\n    expect(ApiAction.isSuccess(callAction)).toBe(false);\n    expect(ApiAction.isFailure(callAction)).toBe(false);\n  });\n});\n\ndescribe('#isSuccess()', () => {\n  test('returns true if action.type ends with _SUCCESS', () => {\n    const callAction = ApiAction.create(buildAction({ type: 'CALL_SUCCESS' }));\n    expect(ApiAction.isStarted(callAction)).toBe(false);\n    expect(ApiAction.isSuccess(callAction)).toBe(true);\n    expect(ApiAction.isFailure(callAction)).toBe(false);\n  });\n});\n\ndescribe('#isFailure()', () => {\n  test('returns true if action.type ends with _FAILURE', () => {\n    const callAction = ApiAction.create(buildAction());\n    expect(ApiAction.isStarted(callAction)).toBe(false);\n    expect(ApiAction.isSuccess(callAction)).toBe(false);\n    expect(ApiAction.isFailure(callAction)).toBe(true);\n  });\n});\n"]}