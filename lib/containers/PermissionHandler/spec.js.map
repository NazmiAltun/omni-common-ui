{"version":3,"sources":["containers/PermissionHandler/spec.jsx"],"names":["describe","doRequire","Config","require","merge","PermissionHandler","context","before","featureLogin","it","wrapper","to","have","descendants","contain","be","empty","throw","canAccess","spy","props","permissionChecks","havePrivilegesLoaded","called","true","args","eql","stub","returns","equal","mapStateToProps","permissionChecks1","permissionChecks2","routes","result"],"mappings":"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","file":"spec.js","sourcesContent":["import React from 'react';\nimport { shallow } from 'enzyme';\nimport { expect } from 'chai';\nimport Sinon from 'sinon';\nimport _Config from 'domain/Config';\n\ndescribe('<PermissionHandler />', () => {\n  // eslint-disable-next-line import/no-webpack-loader-syntax, global-require\n  const doRequire = (Config) => require('inject?domain/Config!./')({\n    'domain/Config': _Config.merge(Config),\n  });\n\n  describe('component', () => {\n    let PermissionHandler;\n\n    context('when featureLogin is not true', () => {\n      before(() => {\n        PermissionHandler = doRequire({ featureLogin: false }).PermissionHandler;\n      });\n\n      it('renders its children', () => {\n        const wrapper = shallow(<PermissionHandler><div id=\"inner\" /></PermissionHandler>);\n        expect(wrapper).to.have.descendants('#inner');\n      });\n    });\n\n    context('when featureLogin is true', () => {\n      before(() => {\n        PermissionHandler = doRequire({ featureLogin: true }).PermissionHandler;\n      });\n\n      it('does nothing if no route is provided', () => {\n        const wrapper = shallow(<PermissionHandler havePrivilegesLoaded={() => true}>\n          <div id=\"inner\" />\n        </PermissionHandler>);\n        expect(wrapper).to.contain(<div id=\"inner\" />);\n      });\n\n      it('renders nothing if privileges have not been loaded', () => {\n        const wrapper = shallow(<PermissionHandler havePrivilegesLoaded={() => false}>\n          <div id=\"inner\" />\n        </PermissionHandler>);\n        expect(wrapper).to.be.empty;\n      });\n\n      it('throws if permissionChecks.canAccess is not a function', () => {\n        expect(() => shallow(<PermissionHandler permissionChecks={[{}]}\n            havePrivilegesLoaded={() => true} />)).to.throw();\n      });\n\n      it('calls permissionChecks.canAccess passing all props if it is a function', () => {\n        const canAccess = Sinon.spy();\n        const props = { permissionChecks: [{ canAccess }], havePrivilegesLoaded: () => true };\n        shallow(<PermissionHandler {...props} />);\n        expect(canAccess.called).to.be.true;\n        expect(canAccess.args[0]).to.eql([props]);\n      });\n\n      it('calls canAccess() for all routes until one returns false', () => {\n        const props = {\n          permissionChecks: [\n            { canAccess: Sinon.stub().returns(true) },\n            { canAccess: Sinon.stub().returns(false) },\n            { canAccess: Sinon.stub().returns(false) },\n          ],\n          havePrivilegesLoaded: () => true,\n        };\n        shallow(<PermissionHandler {...props} />);\n        expect(props.permissionChecks[0].canAccess.called).to.equal(true, 'first');\n        expect(props.permissionChecks[1].canAccess.called).to.equal(true, 'second');\n        expect(props.permissionChecks[2].canAccess.called).to.equal(false, 'third');\n      });\n    });\n  });\n\n  describe('mapStateToProps()', () => {\n    let mapStateToProps;\n\n    before(() => {\n      mapStateToProps = doRequire({ featureLogin: true }).mapStateToProps;\n    });\n\n    it('returns permissionChecks as an array with all routes that have a canAccess()', () => {\n      const permissionChecks1 = { canAccess: () => {} };\n      const permissionChecks2 = { canAccess: () => {} };\n      const routes = [{}, permissionChecks1, {}, permissionChecks2];\n      const result = mapStateToProps(null, { routes });\n      expect(result.permissionChecks).to.eql([permissionChecks1, permissionChecks2]);\n    });\n\n    it('returns permissionChecks as an array with one route ' +\n        'if there is only one that has a canAccess()', () => {\n      const permissionChecks1 = { canAccess: () => {} };\n      const routes = [{}, permissionChecks1, {}];\n      const result = mapStateToProps(null, { routes });\n      expect(result.permissionChecks).to.eql([permissionChecks1]);\n    });\n\n    it('throws if permissionChecks has a canAccess property that is not a function', () => {\n      const permissionChecks = { canAccess: '' };\n      const routes = [{}, permissionChecks, {}];\n      expect(() => mapStateToProps(null, { routes })).to.throw();\n    });\n\n    it('returns permissionChecks as an empty array if no route has canAccess()', () => {\n      expect(mapStateToProps(null, { routes: [{}, {}, {}] }).permissionChecks).to.eql([]);\n    });\n  });\n});\n"]}