{"version":3,"sources":["containers/AuthorizationHandler/index.jsx"],"names":["mapStateToProps","AuthorizationHandler","props","user","permissionChecks","children","havePrivilegesLoaded","get","profile","userId","sub","email","set","setUserContext","id","debug","fetchPrivilegesIfNeeded","undefined","forbiddenRoute","find","canAccess","propTypes","shape","function","arrayOf","func","isRequired","node","state","routes","filter","route","not","existy","PRODUCTION","Error","config","mapDispatchToProps","dispatch"],"mappings":"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","file":"index.js","sourcesContent":["import React from 'react';\nimport ReactGA from 'react-ga';\nimport PropTypes from 'prop-types';\nimport pure from 'recompose/pure';\nimport Raven from 'raven-js';\nimport connect from 'domain/connect';\nimport is from 'is_js';\nimport { actions as privilegesActions } from 'containers/Privileges';\nimport { bindActionCreators } from 'redux';\nimport AuthorisationErrorPage from 'components/AuthorisationErrorPage';\nimport ErrorPageConfig from 'domain/ErrorPageConfig';\nimport Config from 'domain/Config';\nimport log from 'domain/log';\n\nexport const AuthorizationHandler = (props) => {\n  const { user, permissionChecks, children, havePrivilegesLoaded } = props;\n\n  if (Config.get('featureLogin')) {\n    const profile = user.get('profile');\n    const userId = profile.sub;\n    const email = profile.email;\n\n    ReactGA.set({ userId });\n    Raven.setUserContext({ email, id: userId });\n  } else {\n    return children;\n  }\n\n  if (! havePrivilegesLoaded()) {\n    log.debug('PermissionHandler - Will call fetchPrivilegesIfNeeded()');\n    props.fetchPrivilegesIfNeeded();\n    return null;\n  }\n\n  if (is.undefined(permissionChecks)) {\n    return children;\n  }\n\n  const forbiddenRoute = permissionChecks.find(({ canAccess }) => ! canAccess(props));\n  if (is.undefined(forbiddenRoute)) {\n    return children;\n  }\n\n  return <AuthorisationErrorPage {...props} />;\n};\n\nAuthorizationHandler.propTypes = {\n  user: PropTypes.shape({\n    get: PropTypes.function,\n  }),\n  permissionChecks: PropTypes.arrayOf(PropTypes.shape({\n    canAccess: PropTypes.func.isRequired,\n  })),\n  children: PropTypes.node,\n  havePrivilegesLoaded: PropTypes.func.isRequired,\n  fetchPrivilegesIfNeeded: PropTypes.func.isRequired,\n};\n\nexport function mapStateToProps(state, { routes }) {\n  const user = state.get('singleSignOn').get('user');\n  const permissionChecks = routes.filter((route) => {\n    if (is.not.existy(route.canAccess)) {\n      return false;\n    }\n\n    if (! PRODUCTION) {\n      if (is.not.function(route.canAccess)) {\n        throw new Error('canAccess in the route configuration should be a function');\n      }\n    }\n\n    return true;\n  });\n\n  return { user, permissionChecks, config: ErrorPageConfig.get(routes) };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return bindActionCreators(privilegesActions, dispatch);\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(pure(AuthorizationHandler));\n"]}