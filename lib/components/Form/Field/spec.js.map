{"version":3,"sources":["components/Form/Field/spec.jsx"],"names":["test","wrapper","expect","find","__error","toHaveLength","errorMessage","text","toBe","errorClass","Field_wrap_inputContainer_validationError","__required"],"mappings":"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","file":"spec.js","sourcesContent":["import styles from './style.postcss';\n\nimport React from 'react';\nimport { shallow, mount } from 'enzyme';\nimport { Field } from './';\n\ntest('applies error style if showError returns true', () => {\n  const wrapper = shallow(<Field showError={() => true}\n      showRequired={() => false}\n      getErrorMessage={() => ''} />);\n  expect(wrapper.find(`.${styles.__error}`)).toHaveLength(1);\n});\n\ntest('does not apply error style if showError returns false', () => {\n  const wrapper = shallow(<Field showError={() => false}\n      showRequired={() => false}\n      getErrorMessage={() => ''} />);\n  expect(wrapper.find(`.${styles.__error}`)).toHaveLength(0);\n});\n\ntest('shows the error message provided by getErrorMessage if showError returns true', () => {\n  const errorMessage = 'This is not a valid email';\n  const wrapper = shallow(<Field showError={() => true}\n      showRequired={() => false}\n      getErrorMessage={() => errorMessage} />);\n  expect(wrapper.text()).toBe(errorMessage);\n});\n\ntest('does not show the error message provided by getErrorMessage ' +\n    'if showError returns false', () => {\n  const wrapper = shallow(<Field showError={() => false}\n      showRequired={() => false}\n      getErrorMessage={() => ''} />);\n  const errorClass = styles.Field_wrap_inputContainer_validationError;\n  expect(wrapper.find(`.${errorClass}`)).toHaveLength(0);\n});\n\ntest('applies required styles if showRequired retuns true', () => {\n  const wrapper = mount(<Field showError={() => false}\n      showRequired={() => true}\n      getErrorMessage={() => ''} />);\n  expect(wrapper.find(`.${styles.__required}`)).toHaveLength(1);\n});\n\ntest('does not apply required styles if showRequired retuns false', () => {\n  const wrapper = mount(<Field showError={() => false}\n      showRequired={() => false}\n      getErrorMessage={() => ''} />);\n  expect(wrapper.find(`.${styles.__required}`)).toHaveLength(0);\n});\n\ntest('does not use a label if useLabel is not provided', () => {\n  const wrapper = mount(<Field showError={() => false}\n      showRequired={() => false}\n      getErrorMessage={() => ''} />);\n  expect(wrapper.find('label')).toHaveLength(0);\n});\n\ntest('uses a label if useLabel is provided', () => {\n  const wrapper = mount(<Field showError={() => false}\n      showRequired={() => false}\n      getErrorMessage={() => ''}\n      useLabel />);\n  expect(wrapper.find('label')).toHaveLength(1);\n});\n"]}