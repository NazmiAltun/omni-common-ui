{"version":3,"sources":["components/Form/Field/spec.jsx"],"names":["requiredPropNoops","showError","showRequired","getErrorMessage","describe","test","wrapper","expect","find","Field","toHaveLength","Field_wrap_label","__error","errorMessage","text","toBe","errorClass","Field_wrap_inputContainer_validationError","__required","__stackedHorizontally","Field_wrap","__stackedVertically"],"mappings":"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","file":"spec.js","sourcesContent":["import styles from './style.postcss';\n\nimport React from 'react';\nimport { shallow, mount } from 'enzyme';\nimport { Field } from './';\n\nconst requiredPropNoops = {\n  showError: () => false,\n  showRequired: () => false,\n  getErrorMessage: () => '',\n};\n\ndescribe('applies className and labelTextClassName', () => {\n  test('applies className to itself', () => {\n    const wrapper = mount(<Field {...requiredPropNoops} className=\"fieldextra\" />);\n    expect(wrapper.find(`.${styles.Field}.fieldextra`)).toHaveLength(1);\n  });\n\n  test('applies labelTextClassName to label span', () => {\n    const wrapper = mount(<Field {...requiredPropNoops} labelTextClassName=\"labelextra\" />);\n    expect(wrapper.find(`.${styles.Field_wrap_label}.labelextra`)).toHaveLength(1);\n  });\n});\n\ndescribe('applies the error state style', () => {\n  test('applies error style if showError returns true', () => {\n    const wrapper = shallow(<Field {...requiredPropNoops} showError={() => true} />);\n    expect(wrapper.find(`.${styles.__error}`)).toHaveLength(1);\n  });\n\n  test('does not apply error style if showError returns false', () => {\n    const wrapper = shallow(<Field {...requiredPropNoops} />);\n    expect(wrapper.find(`.${styles.__error}`)).toHaveLength(0);\n  });\n\n  test('shows the error message provided by getErrorMessage ' +\n      'if showError returns true', () => {\n    const errorMessage = 'This is not a valid email';\n    const wrapper = shallow(<Field showError={() => true}\n        showRequired={() => false}\n        getErrorMessage={() => errorMessage} />);\n    expect(wrapper.text()).toBe(errorMessage);\n  });\n\n  test('does not show the error message provided by getErrorMessage ' +\n      'if showError returns false', () => {\n    const wrapper = shallow(<Field {...requiredPropNoops} />);\n    const errorClass = styles.Field_wrap_inputContainer_validationError;\n    expect(wrapper.find(`.${errorClass}`)).toHaveLength(0);\n  });\n});\n\ndescribe('applies the required field style', () => {\n  test('applies required styles if showRequired returns true', () => {\n    const wrapper = mount(<Field showError={() => false}\n        showRequired={() => true}\n        getErrorMessage={() => ''} />);\n    expect(wrapper.find(`.${styles.__required}`)).toHaveLength(1);\n  });\n\n  test('does not apply required styles if showRequired returns false', () => {\n    const wrapper = mount(<Field {...requiredPropNoops} />);\n    expect(wrapper.find(`.${styles.__required}`)).toHaveLength(0);\n  });\n});\n\ndescribe('allows for an optional label to be provided', () => {\n  test('does not use a label if useLabel is not provided', () => {\n    const wrapper = mount(<Field {...requiredPropNoops} />);\n    expect(wrapper.find('label')).toHaveLength(0);\n  });\n\n  test('uses a label if useLabel is provided', () => {\n    const wrapper = mount(<Field {...requiredPropNoops} useLabel />);\n    expect(wrapper.find('label')).toHaveLength(1);\n  });\n});\n\ndescribe('allows field stack mode to be changed', () => {\n  test('does not apply Field.__stackedHorizontally by default', () => {\n    const wrapper = mount(<Field {...requiredPropNoops} />);\n    expect(wrapper.find(`.${styles.Field}.${styles.__stackedHorizontally}`)).toHaveLength(0);\n  });\n\n  test('does not apply Field_wrap.__stackedVertically by default', () => {\n    const wrapper = mount(<Field {...requiredPropNoops} />);\n    expect(wrapper.find(`.${styles.Field_wrap}.${styles.__stackedVertically}`)).toHaveLength(0);\n  });\n\n  test('applies Field.__stackedHorizontally when enabled', () => {\n    const wrapper = mount(<Field {...requiredPropNoops} neighborStackMode=\"horizontal\" />);\n    expect(wrapper.find(`.${styles.Field}.${styles.__stackedHorizontally}`)).toHaveLength(1);\n  });\n\n  test('applies Field_wrap.__stackedVertically when enabled', () => {\n    const wrapper = mount(<Field {...requiredPropNoops} innerStackMode=\"vertical\" />);\n    expect(wrapper.find(`.${styles.Field_wrap}.${styles.__stackedVertically}`)).toHaveLength(1);\n  });\n});\n"]}