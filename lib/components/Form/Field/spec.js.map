{"version":3,"sources":["components/Form/Field/spec.jsx"],"names":["describe","it","wrapper","find","__error","to","have","length","errorMessage","text","equal","errorClass","Field_wrap_inputContainer_validationError","__required"],"mappings":"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","file":"spec.js","sourcesContent":["import styles from './style.postcss';\n\nimport React from 'react';\nimport { expect } from 'chai';\nimport { shallow, mount } from 'enzyme';\nimport Field from './';\n\ndescribe('Form', () => {\n  describe('Field', () => {\n    it('applies error style if showError returns true', () => {\n      const wrapper = shallow(<Field showError={() => true}\n          showRequired={() => false}\n          getErrorMessage={() => ''} />);\n      expect(wrapper.find(`.${styles.__error}`)).to.have.length(1);\n    });\n\n    it('does not apply error style if showError returns false', () => {\n      const wrapper = shallow(<Field showError={() => false}\n          showRequired={() => false}\n          getErrorMessage={() => ''} />);\n      expect(wrapper.find(`.${styles.__error}`)).to.have.length(0);\n    });\n\n    it('shows the error message provided by getErrorMessage if showError returns true', () => {\n      const errorMessage = 'This is not a valid email';\n      const wrapper = shallow(<Field showError={() => true}\n          showRequired={() => false}\n          getErrorMessage={() => errorMessage} />);\n      expect(wrapper.text()).to.equal(errorMessage);\n    });\n\n    it('does not show the error message provided by getErrorMessage ' +\n        'if showError returns false', () => {\n      const wrapper = shallow(<Field showError={() => false}\n          showRequired={() => false}\n          getErrorMessage={() => ''} />);\n      const errorClass = styles.Field_wrap_inputContainer_validationError;\n      expect(wrapper.find(`.${errorClass}`)).to.have.length(0);\n    });\n\n    it('applies required styles if showRequired retuns true', () => {\n      const wrapper = mount(<Field showError={() => false}\n          showRequired={() => true}\n          getErrorMessage={() => ''} />);\n      expect(wrapper.find(`.${styles.__required}`)).to.have.length(1);\n    });\n\n    it('does not apply required styles if showRequired retuns false', () => {\n      const wrapper = mount(<Field showError={() => false}\n          showRequired={() => false}\n          getErrorMessage={() => ''} />);\n      expect(wrapper.find(`.${styles.__required}`)).to.have.length(0);\n    });\n\n    it('does not use a label if useLabel is not provided', () => {\n      const wrapper = mount(<Field showError={() => false}\n          showRequired={() => false}\n          getErrorMessage={() => ''} />);\n      expect(wrapper.find('label')).to.have.length(0);\n    });\n\n    it('uses a label if useLabel is provided', () => {\n      const wrapper = mount(<Field showError={() => false}\n          showRequired={() => false}\n          getErrorMessage={() => ''}\n          useLabel />);\n      expect(wrapper.find('label')).to.have.length(1);\n    });\n  });\n});\n"]}