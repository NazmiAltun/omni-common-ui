{"version":3,"sources":["components/Form/CheckboxList/index.jsx"],"names":["CheckboxList","props","setValue","e","option","checked","currentTarget","newValue","getValue","concat","filter","it","cmp","name","label","items","validations","validationError","getErrorMessage","showError","showRequired","map","item","handleChange","indexOf","a","b","propTypes","func","isRequired","string","array"],"mappings":";;;;;;;;AAAA;;AAEA;;;;AACA;;AACA;;;;AACA;;;;AACA;;;;;;;;;;;;IAEMA,Y;;;;;;;;;;;wCAKgB;AAClB,WAAKC,KAAL,CAAWC,QAAX,CAAoB,EAApB;AACD;;;iCAEYC,C,EAAGC,M,EAAQ;AACtB,UAAMC,UAAUF,EAAEG,aAAF,CAAgBD,OAAhC;;AAEA,UAAIE,WAAW,EAAf;AACA,UAAIF,OAAJ,EAAa;AACXE,mBAAW,KAAKN,KAAL,CAAWO,QAAX,GAAsBC,MAAtB,CAA6BL,MAA7B,CAAX;AACD,OAFD,MAEO;AACLG,mBAAW,KAAKN,KAAL,CAAWO,QAAX,GAAsBE,MAAtB,CAA6B,UAACC,EAAD;AAAA,iBAAQ,CAAEX,aAAaY,GAAb,CAAiBD,EAAjB,EAAqBP,MAArB,CAAV;AAAA,SAA7B,CAAX;AACD;;AAED,WAAKH,KAAL,CAAWC,QAAX,CAAoBK,QAApB;AACD;;;6BAEQ;AAAA;;AAAA,mBACsD,KAAKN,KAD3D;AAAA,UACCY,IADD,UACCA,IADD;AAAA,UACOC,KADP,UACOA,KADP;AAAA,UACcC,KADd,UACcA,KADd;AAAA,UACqBC,WADrB,UACqBA,WADrB;AAAA,UACkCC,eADlC,UACkCA,eADlC;;AAEP,UAAMZ,UAAU,KAAKJ,KAAL,CAAWO,QAAX,MAAyB,EAAzC;;AAEA,aAAO;AAAA;AAAA,UAAO,OAAOM,KAAd;AACH,2BAAiB;AAAA,mBAAM,OAAKb,KAAL,CAAWiB,eAAX,EAAN;AAAA,WADd;AAEH,qBAAW;AAAA,mBAAM,OAAKjB,KAAL,CAAWkB,SAAX,EAAN;AAAA,WAFR;AAGH,uBAAaH,WAHV;AAIH,2BAAiBC,eAJd;AAKH,wBAAc;AAAA,mBAAM,OAAKhB,KAAL,CAAWmB,YAAX,EAAN;AAAA,WALX;AAOHL,cAAMM,GAAN,CAAU,UAACC,IAAD;AAAA,iBACR,oDAAU,KAAKT,IAAf;AACI,kBAAMA,IADV;AAEI,kBAAMS,IAFV;AAGI,uBAAW,mBAACnB,CAAD;AAAA,qBAAO,OAAKoB,YAAL,CAAkBpB,CAAlB,EAAqBmB,IAArB,CAAP;AAAA,aAHf;AAII,qBAASjB,QAAQmB,OAAR,CAAgBF,IAAhB,KAAyB,CAJtC,GADQ;AAAA,SAAV;AAPG,OAAP;AAeD;;;wBAxCUG,C,EAAGC,C,EAAG;AACf,aAAOD,MAAMC,CAAb;AACD;;;;;;AA0CH1B,aAAa2B,SAAb,GAAyB;AACvBzB,YAAU,oBAAU0B,IAAV,CAAeC,UADF;AAEvBrB,YAAU,oBAAUoB,IAAV,CAAeC,UAFF;AAGvBhB,QAAM,oBAAUiB,MAHO;AAIvBhB,SAAO,oBAAUgB,MAJM;AAKvBf,SAAO,oBAAUgB,KALM;AAMvBb,mBAAiB,oBAAUU,IAAV,CAAeC,UANT;AAOvBT,gBAAc,oBAAUQ,IAAV,CAAeC,UAPN;AAQvBV,aAAW,oBAAUS,IAAV,CAAeC,UARH;AASvBb,eAAa,oBAAUc,MATA;AAUvBb,mBAAiB,oBAAUa;AAVJ,CAAzB;;kBAae,sBAAgB9B,YAAhB,C","file":"index.js","sourcesContent":["import 'react-select/dist/react-select.css';\n\nimport React, { PureComponent } from 'react';\nimport { HOC as formsyDecorator } from 'formsy-react';\nimport Field from '../Field';\nimport Checkbox from './Checkbox';\nimport PropTypes from 'prop-types';\n\nclass CheckboxList extends PureComponent {\n  static cmp(a, b) {\n    return a === b;\n  }\n\n  componentDidMount() {\n    this.props.setValue([]);\n  }\n\n  handleChange(e, option) {\n    const checked = e.currentTarget.checked;\n\n    let newValue = [];\n    if (checked) {\n      newValue = this.props.getValue().concat(option);\n    } else {\n      newValue = this.props.getValue().filter((it) => ! CheckboxList.cmp(it, option));\n    }\n\n    this.props.setValue(newValue);\n  }\n\n  render() {\n    const { name, label, items, validations, validationError } = this.props;\n    const checked = this.props.getValue() || [];\n\n    return <Field label={label}\n        getErrorMessage={() => this.props.getErrorMessage()}\n        showError={() => this.props.showError()}\n        validations={validations}\n        validationError={validationError}\n        showRequired={() => this.props.showRequired()}>\n      {\n        items.map((item) =>\n          <Checkbox key={name}\n              name={name}\n              item={item}\n              onChecked={(e) => this.handleChange(e, item)}\n              checked={checked.indexOf(item) >= 0} />)\n      }\n    </Field>;\n  }\n\n}\n\nCheckboxList.propTypes = {\n  setValue: PropTypes.func.isRequired,\n  getValue: PropTypes.func.isRequired,\n  name: PropTypes.string,\n  label: PropTypes.string,\n  items: PropTypes.array,\n  getErrorMessage: PropTypes.func.isRequired,\n  showRequired: PropTypes.func.isRequired,\n  showError: PropTypes.func.isRequired,\n  validations: PropTypes.string,\n  validationError: PropTypes.string,\n};\n\nexport default formsyDecorator(CheckboxList);\n"]}