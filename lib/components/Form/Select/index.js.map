{"version":3,"sources":["components/Form/Select/index.jsx"],"names":["Select","props","arrowRenderer","Select_icon","classes","Select_element","className","__required","showRequired","__error","showError","select","placeholder","undefined","e","handleChange","option","Select_option","label","value","not","getErrorMessage","fieldOptions","setValue","propTypes","string","func","isRequired","clearable","bool","searchable","shape","labelTextClassName","neighborStackMode","oneOf","innerStackMode"],"mappings":";;;;;;;;AAAA;;AACA;;;;AAEA;;;;AACA;;;;AACA;;;;AACA;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;;;AAEA,IAAMA,SAAS,SAATA,MAAS,CAACC,KAAD,EAAW;AACxB,MAAMC,iBAAgB,SAAhBA,cAAgB;AAAA,WACpB;AAAA;AAAA,QAAM,WAAW,gBAAOC,WAAxB;AACE,sDAAM,IAAG,oBAAT;AADF,KADoB;AAAA,GAAtB;;AAKA,MAAMC,UAAU,0BAAW,gBAAOC,cAAlB,EACZJ,MAAMK,SADM,sBAET,gBAAOC,UAFE,EAEWN,MAAMO,YAAN,EAFX,uBAGT,gBAAOC,OAHE,EAGQR,MAAMS,SAAN,EAHR,EAAhB;;AAKA,MAAMC,SAAS,gEAAa,aAAaV,MAAMW,WAAN,IAAqBC,SAA/C;AACX,cAAU,kBAACC,CAAD;AAAA,aAAOC,aAAaD,CAAb,CAAP;AAAA,KADC;AAEX,mBAAe;AAAA,aAAMZ,gBAAN;AAAA,KAFJ;AAGX,oBAAgB,wBAACc,MAAD;AAAA,aAAY;AAAA;AAAA,UAAK,WAAW,gBAAOC,aAAvB;AACzBD,eAAOE,KAAP,IAAgBF,OAAOG;AADE,OAAZ;AAAA;AAHL,KAMPlB,KANO;AAOX,eAAWG,OAPA,IAAf;;AASA,MAAI,gBAAGgB,GAAH,CAAOP,SAAP,CAAiBZ,MAAMiB,KAAvB,CAAJ,EAAmC;AACjC,WAAO;AAAA;AAAA,iBAAO,OAAOjB,MAAMiB,KAApB;AACH,yBAAiB;AAAA,iBAAMjB,MAAMoB,eAAN,EAAN;AAAA,SADd;AAEH,mBAAW;AAAA,iBAAMpB,MAAMS,SAAN,EAAN;AAAA,SAFR;AAGH,sBAAc;AAAA,iBAAMT,MAAMO,YAAN,EAAN;AAAA,SAHX;AAIH;AAJG,SAKCP,MAAMqB,YALP;AAMJX;AANI,KAAP;AAQD;AACD,SAAOA,MAAP;;AAEA,WAASI,YAAT,CAAsBD,CAAtB,EAAyB;AACvBb,UAAMsB,QAAN,CAAeT,EAAEK,KAAjB;AACD;AACF,CAnCD;;AAqCAnB,OAAOwB,SAAP,GAAmB;AACjBlB,aAAW,oBAAUmB,MADJ;AAEjBJ,mBAAiB,oBAAUK,IAAV,CAAeC,UAFf;AAGjBnB,gBAAc,oBAAUkB,IAAV,CAAeC,UAHZ;AAIjBJ,YAAU,oBAAUG,IAAV,CAAeC,UAJR;AAKjBjB,aAAW,oBAAUgB,IAAV,CAAeC,UALT;AAMjBC,aAAW,oBAAUC,IANJ,EAMY;AAC7BC,cAAY,oBAAUD,IAPL,EAOY;AAC7BX,SAAO,oBAAUO,MARA;AASjBb,eAAa,oBAAUa,MATN;AAUjBH,gBAAc,oBAAUS,KAAV,CAAgB;AAC5BzB,eAAW,oBAAUmB,MADO;AAE5BO,wBAAoB,oBAAUP,MAFF;AAG5BQ,uBAAmB,oBAAUC,KAAV,CAAgB,CAAC,SAAD,EAAY,YAAZ,CAAhB,CAHS;AAI5BC,oBAAgB,oBAAUD,KAAV,CAAgB,CAAC,YAAD,EAAe,UAAf,CAAhB,CAJY,CAIkC;AAJlC,GAAhB;AAVG,CAAnB;;kBAkBe,sBAAgBlC,MAAhB,C","file":"index.js","sourcesContent":["import 'react-select/dist/react-select.css';\nimport styles from './style.postcss';\n\nimport React from 'react';\nimport ReactSelect from 'react-select';\nimport is from 'is_js';\nimport { HOC as formsyDecorator } from 'formsy-react';\nimport classnames from 'classnames';\nimport Icon from 'components/Icon';\nimport Field from '../Field';\nimport PropTypes from 'prop-types';\n\nconst Select = (props) => {\n  const arrowRenderer = () =>\n    <span className={styles.Select_icon}>\n      <Icon id=\"chevron-small-down\" />\n    </span>;\n\n  const classes = classnames(styles.Select_element,\n      props.className,\n      { [styles.__required]: props.showRequired() },\n      { [styles.__error]: props.showError() });\n\n  const select = <ReactSelect placeholder={props.placeholder || undefined}\n      onChange={(e) => handleChange(e)}\n      arrowRenderer={() => arrowRenderer()}\n      optionRenderer={(option) => <div className={styles.Select_option}>\n        {option.label || option.value}\n      </div>}\n      {...props}\n      className={classes} />;\n\n  if (is.not.undefined(props.label)) {\n    return <Field label={props.label}\n        getErrorMessage={() => props.getErrorMessage()}\n        showError={() => props.showError()}\n        showRequired={() => props.showRequired()}\n        useLabel\n        {...props.fieldOptions}>\n      {select}\n    </Field>;\n  }\n  return select;\n\n  function handleChange(e) {\n    props.setValue(e.value);\n  }\n};\n\nSelect.propTypes = {\n  className: PropTypes.string,\n  getErrorMessage: PropTypes.func.isRequired,\n  showRequired: PropTypes.func.isRequired,\n  setValue: PropTypes.func.isRequired,\n  showError: PropTypes.func.isRequired,\n  clearable: PropTypes.bool,   // default: true\n  searchable: PropTypes.bool,  // default: true\n  label: PropTypes.string,\n  placeholder: PropTypes.string,\n  fieldOptions: PropTypes.shape({\n    className: PropTypes.string,\n    labelTextClassName: PropTypes.string,\n    neighborStackMode: PropTypes.oneOf(['default', 'horizontal']),\n    innerStackMode: PropTypes.oneOf(['horizontal', 'vertical']),  // default: horizontal\n  }),\n};\n\nexport default formsyDecorator(Select);\n"]}