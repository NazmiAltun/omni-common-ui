{"version":3,"sources":["components/Form/Select/spec.jsx"],"names":["options","value","label","clearableValue","test","wrapper","expect","find","__required","length","toBeGreaterThanOrEqual","describe","toHaveLength","prop","toBeTruthy","neighborStackMode","className","field","toBe"],"mappings":";;AAAA;;;;AAEA;;;;AACA;;AACA;;;;AACA;;;;;;AAEA,IAAMA,UAAU,CACd,EAAEC,OAAO,KAAT,EAAgBC,OAAO,KAAvB,EADc,EAEd,EAAED,OAAO,KAAT,EAAgBC,OAAO,KAAvB,EAA8BC,gBAAgB,KAA9C,EAFc,CAAhB;;AAKAC,KAAK,yBAAL,EAAgC,YAAM;AACpC,MAAMC,UAAU,mBAAM;AAAA;AAAA;AACpB,6CAAM,MAAN,IAAa,MAAK,UAAlB;AACI,aAAM,UADV;AAEI,aAAM,EAFV;AAGI,eAASL,OAHb;AAII,oBAJJ;AADoB,GAAN,CAAhB;AAOAM,SAAOD,QAAQE,IAAR,OAAiB,gBAAOC,UAAxB,EAAsCC,MAA7C,EAAqDC,sBAArD,CAA4E,CAA5E;AACD,CATD;;AAWAC,SAAS,sBAAT,EAAiC,YAAM;AACrCP,OAAK,gDAAL,EAAuD,YAAM;AAC3D,QAAMC,UAAU,mBAAM;AAAA;AAAA;AACpB,+CAAM,MAAN,IAAa,MAAK,UAAlB;AACI,eAAM,UADV;AAEI,eAAM,EAFV;AAGI,iBAASL,OAHb;AADoB,KAAN,CAAhB;AAMAM,WAAOD,QAAQE,IAAR,iBAAP,EAA4BK,YAA5B,CAAyC,CAAzC;AACAN,WAAOD,QAAQE,IAAR,kBAAoBM,IAApB,CAAyB,UAAzB,CAAP,EAA6CC,UAA7C;AACD,GATD;;AAWAV,OAAK,gFAAL,EAAuF,YAAM;AAC3F,QAAMC,UAAU,mBAAM;AAAA;AAAA;AACpB,+CAAM,MAAN,IAAa,MAAK,UAAlB;AACI,eAAM,UADV;AAEI,eAAM,EAFV;AAGI,iBAASL,OAHb;AAII,sBAAc,EAAEe,mBAAmB,YAArB,EAAmCC,WAAW,OAA9C,EAJlB;AADoB,KAAN,CAAhB;AAOA,QAAMC,QAAQZ,QAAQE,IAAR,iBAAd;AACAD,WAAOW,MAAMJ,IAAN,CAAW,mBAAX,CAAP,EAAwCK,IAAxC,CAA6C,YAA7C;AACAZ,WAAOW,MAAMJ,IAAN,CAAW,WAAX,CAAP,EAAgCK,IAAhC,CAAqC,OAArC;AACD,GAXD;;AAaAd,OAAK,2DAAL,EAAkE,YAAM;AACtE,QAAMC,UAAU,mBAAM;AAAA;AAAA;AACpB,+CAAM,MAAN,IAAa,MAAK,WAAlB;AACI,eAAM,EADV;AAEI,iBAASL,OAFb;AADoB,KAAN,CAAhB;AAKAM,WAAOD,QAAQE,IAAR,iBAAP,EAA4BK,YAA5B,CAAyC,CAAzC;AACD,GAPD;AAQD,CAjCD","file":"spec.js","sourcesContent":["import styles from './style.postcss';\n\nimport React from 'react';\nimport { mount } from 'enzyme';\nimport Form from '../';\nimport Field from '../Field';\n\nconst options = [\n  { value: 'one', label: 'One' },\n  { value: 'two', label: 'Two', clearableValue: false },\n];\n\ntest('works along with Formsy', () => {\n  const wrapper = mount(<Form>\n    <Form.Select name=\"required\"\n        label=\"required\"\n        value=\"\"\n        options={options}\n        required />\n  </Form>);\n  expect(wrapper.find(`.${styles.__required}`).length).toBeGreaterThanOrEqual(1);\n});\n\ndescribe('label prop existence', () => {\n  test('has a Field when there is a label prop present', () => {\n    const wrapper = mount(<Form>\n      <Form.Select name=\"labelled\"\n          label=\"labelled\"\n          value=\"\"\n          options={options} />\n    </Form>);\n    expect(wrapper.find(Field)).toHaveLength(1);\n    expect(wrapper.find(Field).prop('useLabel')).toBeTruthy();\n  });\n\n  test('passes options to Field when there is are label and fieldOptions props present', () => {\n    const wrapper = mount(<Form>\n      <Form.Select name=\"labelled\"\n          label=\"labelled\"\n          value=\"\"\n          options={options}\n          fieldOptions={{ neighborStackMode: 'horizontal', className: 'class' }} />\n    </Form>);\n    const field = wrapper.find(Field);\n    expect(field.prop('neighborStackMode')).toBe('horizontal');\n    expect(field.prop('className')).toBe('class');\n  });\n\n  test('does not have a Field when there is no label prop present', () => {\n    const wrapper = mount(<Form>\n      <Form.Select name=\"labelless\"\n          value=\"\"\n          options={options} />\n    </Form>);\n    expect(wrapper.find(Field)).toHaveLength(0);\n  });\n});\n"]}