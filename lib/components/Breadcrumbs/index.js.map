{"version":3,"sources":["components/Breadcrumbs/index.jsx"],"names":["RESIZE_DEBOUNCE_MS","Breadcrumbs","state","isIntermediateCrumbsCollapsed","collapsedAtWidth","_updateIntermediateCrumbsCollapsedState","window","addEventListener","onResizeHandler","leading","trailing","removeEventListener","el","listNode","curOverflow","style","overflow","childOverflows","Array","prototype","forEach","call","children","childEl","push","isOverflowing","clientWidth","scrollWidth","shift","props","singleLineMode","navBoxSizing","navNode","boxSizing","navWidth","Number","parseInt","getComputedStyle","getPropertyValue","contentWidth","not","number","setState","_isOverflowingHorizontally","reversedItems","items","slice","reverse","backLinkItem","find","item","clickable","backLinkHref","string","existy","href","Breadcrumbs_crumb_back","_onLinkClick","label","linkLabel","event","category","action","length","itemsToRender","className","__wrap","Breadcrumbs_list","_node","parentElement","_renderBackButton","map","idx","indexedCrumbClassName","itemClassNames","Breadcrumbs_crumb","__clickable","itemKey","propTypes","arrayOf","shape","isRequired","bool","router","func"],"mappings":"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","file":"index.js","sourcesContent":["import styles from './style.postcss';\n\nimport React, { PureComponent } from 'react';\nimport { Link } from 'react-router';\nimport ReactGA from 'react-ga';\nimport is from 'is_js';\nimport classnames from 'classnames';\nimport debounce from 'lodash.debounce';\nimport Icon from 'components/Icon';\nimport PropTypes from 'prop-types';\n\nconst RESIZE_DEBOUNCE_MS = 100;\n\nclass Breadcrumbs extends PureComponent {\n  constructor() {\n    super();\n    this.state = {\n      isIntermediateCrumbsCollapsed: false,\n      collapsedAtWidth: null,  // populated below\n    };\n  }\n\n  componentDidMount() {\n    this._updateIntermediateCrumbsCollapsedState();\n    window.addEventListener('resize', this.onResizeHandler = debounce(() => {\n      this._updateIntermediateCrumbsCollapsedState();\n    }, RESIZE_DEBOUNCE_MS, {\n      leading: true,  // nicer iOS screen rotate\n      trailing: true,\n    }), false);\n  }\n\n  componentDidUpdate() {\n    this._updateIntermediateCrumbsCollapsedState();\n  }\n\n  componentWillUnmount() {\n    if (! this.onResizeHandler) return;\n    window.removeEventListener('resize', this.onResizeHandler);\n  }\n\n  _isOverflowingHorizontally() {  // returns: content width (if overflowing)\n    const el = this.listNode;\n    const curOverflow = el.style.overflow;\n\n    // set overflows: ul hidden, children visible\n    if (! curOverflow || curOverflow === 'visible') {\n      el.style.overflow = 'hidden';\n    }\n    const childOverflows = [];\n    Array.prototype.forEach.call(el.children, (childEl) => {\n      childOverflows.push(childEl.style.overflow);\n      childEl.style.overflow = 'visible';  // eslint-disable-line\n    });\n\n    // check clientWidth against scrollWidth; scrollWidth is the width of content\n    const isOverflowing = el.clientWidth < el.scrollWidth;\n    const { scrollWidth } = el;\n\n    // restore overflow\n    el.style.overflow = curOverflow;\n    Array.prototype.forEach.call(el.children, (childEl) => {\n      childEl.style.overflow = childOverflows.shift();  // eslint-disable-line\n    });\n\n    return isOverflowing && scrollWidth;\n  }\n\n  _updateIntermediateCrumbsCollapsedState() {\n    if (! this.props.singleLineMode || ! this.listNode) return;\n\n    const navBoxSizing = this.navNode.style.boxSizing;\n    this.navNode.style.boxSizing = 'content-box';  // to get width without padding\n    const navWidth = Number.parseInt(\n      getComputedStyle(this.navNode)\n        .getPropertyValue('width')\n    , 10);\n    this.navNode.style.boxSizing = navBoxSizing;  // restore\n\n    let contentWidth;\n    if (this.state.isIntermediateCrumbsCollapsed &&\n        (is.not.number(this.state.collapsedAtWidth) ||\n        navWidth > this.state.collapsedAtWidth)) {\n      this.setState({\n        isIntermediateCrumbsCollapsed: false,\n        collapsedAtWidth: null,\n      });\n    } else if (! this.state.isIntermediateCrumbsCollapsed &&  // eslint-disable-line\n        (contentWidth = this._isOverflowingHorizontally())) {\n      // overflowing - collapse intermediate crumbs\n      this.setState({\n        isIntermediateCrumbsCollapsed: true,\n        collapsedAtWidth: navWidth > this.state.collapsedAtWidth ||\n            is.not.number(this.state.collapsedAtWidth) ?\n              contentWidth :\n              this.state.collapsedAtWidth,\n      });\n    }\n  }\n\n  _renderBackButton() {\n    const reversedItems = this.props.items.slice(0).reverse();\n    const backLinkItem = reversedItems.find((item) => item.clickable);\n    let backLinkHref = reversedItems[0].backLinkHref;\n    if (! is.string(backLinkHref)) {\n      if (! is.existy(backLinkItem)) {\n        return null;\n      }\n      backLinkHref = backLinkItem.href;\n    }\n    return <Link to={backLinkHref}\n        className={styles.Breadcrumbs_crumb_back}\n        onClick={() => this._onLinkClick(backLinkItem.label)}\n        draggable={false}>\n      <Icon id=\"arrow-left\" />\n    </Link>;\n  }\n\n  _onLinkClick(linkLabel) {\n    ReactGA.event({\n      category: 'Navigation',\n      action: 'Clicked breadcrumb',\n      label: `Clicked breadcrumb ${linkLabel}`,\n    });\n  }\n\n  render() {\n    if (! this.props.items || this.props.items.length < 1) return null;\n\n    // make a copy of props.items so that we can mangle it\n    let itemsToRender = this.props.items;\n    // push collapsed intermediate crumbs if enabled\n    if (this.state.isIntermediateCrumbsCollapsed) {\n      itemsToRender = [this.props.items[0]];\n      if (this.props.items.length > 2) {\n        itemsToRender.push({\n          label: '…',\n          clickable: false,\n        });\n      }\n      itemsToRender.push(this.props.items[this.props.items.length - 1]);\n    }\n\n    return <nav className={classnames(styles.Breadcrumbs, this.props.className, {\n      [styles.__wrap]: ! this.props.singleLineMode,\n    })}>\n      <ul className={styles.Breadcrumbs_list}\n          ref={(_node) => {\n            if (! _node) return;\n            this.listNode = _node;\n            this.navNode = _node.parentElement;\n          }}>\n        {\n          itemsToRender.length === 0 ? null :\n          this._renderBackButton()\n        }\n        {itemsToRender.map((item, idx) => {\n          const indexedCrumbClassName = styles[`Breadcrumbs_crumb_${idx}`];\n          const itemClassNames = classnames(styles.Breadcrumbs_crumb, {\n            [indexedCrumbClassName]: !! indexedCrumbClassName,\n            [styles.__clickable]: !! item.clickable,\n          });\n          const itemKey = item.label + item.href;\n          return <li key={itemKey}\n              className={itemClassNames}>\n            {item.clickable ? <Link to={item.href}\n                onClick={() => this._onLinkClick(item.label)}\n                draggable={false}>\n              {item.label}\n            </Link> : <span>\n              {item.label}\n            </span>}\n          </li>;\n        })}\n      </ul>\n    </nav>;\n  }\n}\n\nBreadcrumbs.propTypes = {\n  className: PropTypes.string,\n  items: PropTypes.arrayOf(PropTypes.shape({\n    label: PropTypes.string.isRequired,\n    href: PropTypes.string.isRequired,\n    clickable: PropTypes.bool.isRequired,\n    backLinkHref: PropTypes.string,  // it's an override\n  })).isRequired,\n  singleLineMode: PropTypes.bool,\n  router: PropTypes.shape({\n    push: PropTypes.func.isRequired,\n  }).isRequired,\n};\n\nexport default Breadcrumbs;\n"]}