{"version":3,"sources":["components/Tooltip/index.jsx"],"names":["Tooltip","props","not","string","text","empty","className","placement","existy","overlayClassName","Tooltip_bubble","trigger","children","propTypes","PropTypes","node","any"],"mappings":";;;;;;AAAA;;AAEA;;;;AAEA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEA,IAAMA,UAAU,SAAVA,OAAU,CAACC,KAAD,EAAW;AACzB,MAAI,gBAAGC,GAAH,CAAOC,MAAP,CAAcF,MAAMG,IAApB,KAA6B,gBAAGC,KAAH,CAASJ,MAAMG,IAAf,CAAjC,EAAuD;AACrD,WAAO;AAAA;AAAA,QAAK,WAAWH,MAAMK,SAAtB;AAAA;AAAA,KAAP;AACD;;AAED,MAAMC,YAAY,gBAAGC,MAAH,CAAUP,MAAMM,SAAhB,IAA6BN,MAAMM,SAAnC,GAA+C,KAAjE;AACA,MAAME,mBAAmB,gBAAGD,MAAH,CAAUP,MAAMQ,gBAAhB,IACvB,0BAAW,gBAAOC,cAAlB,EAAkCT,MAAMQ,gBAAxC,CADuB,GAEvB,gBAAOC,cAFT;AAGA,MAAMC,UAAU,gBAAGH,MAAH,CAAUP,MAAMU,OAAhB,IACdV,MAAMU,OADQ,GAEd,CAAC,OAAD,CAFF;;AAIA,SAAO;AAAA;AAAA,MAAW,WAAWJ,SAAtB;AACH,eAASI,OADN;AAEH,8BAFG;AAGH,eAAS;AAAA;AAAA,UAAK,WAAWF,gBAAhB;AAAmCR,cAAMG;AAAzC,OAHN;AAIL;AAAA;AAAA,QAAK,WAAWH,MAAMK,SAAtB;AAAkCL,YAAMW;AAAxC;AAJK,GAAP;AAMD,CAnBD;;AAqBAZ,QAAQa,SAAR,GAAoB;AAClBD,YAAU,gBAAME,SAAN,CAAgBC,IADR;AAElBX,QAAM,gBAAMU,SAAN,CAAgBX,MAFJ;AAGlBG,aAAW,gBAAMQ,SAAN,CAAgBX,MAHT;AAIlBI,aAAW,gBAAMO,SAAN,CAAgBX,MAJT;AAKlBM,oBAAkB,gBAAMK,SAAN,CAAgBX,MALhB;AAMlBQ,WAAS,gBAAMG,SAAN,CAAgBE;AANP,CAApB;;kBASehB,O","file":"index.js","sourcesContent":["import 'rc-tooltip/assets/bootstrap.css';\n\nimport styles from './style.postcss';\n\nimport React from 'react';\nimport RcTooltip from 'rc-tooltip';\nimport is from 'is_js';\nimport classnames from 'classnames';\n\nconst Tooltip = (props) => {\n  if (is.not.string(props.text) || is.empty(props.text)) {\n    return <div className={props.className}>props.children</div>;\n  }\n\n  const placement = is.existy(props.placement) ? props.placement : 'top';\n  const overlayClassName = is.existy(props.overlayClassName) ?\n    classnames(styles.Tooltip_bubble, props.overlayClassName) :\n    styles.Tooltip_bubble;\n  const trigger = is.existy(props.trigger) ?\n    props.trigger :\n    ['hover'];\n\n  return <RcTooltip placement={placement}\n      trigger={trigger}\n      destroyPopupOnHide\n      overlay={<div className={overlayClassName}>{props.text}</div>}>\n    <div className={props.className}>{props.children}</div>\n  </RcTooltip>;\n};\n\nTooltip.propTypes = {\n  children: React.PropTypes.node,\n  text: React.PropTypes.string,\n  className: React.PropTypes.string,\n  placement: React.PropTypes.string,\n  overlayClassName: React.PropTypes.string,\n  trigger: React.PropTypes.any,\n};\n\nexport default Tooltip;\n"]}