{"version":3,"sources":["components/Button/validateType.spec.js"],"names":["test","expect","default","toBe","primary","defaultInverse","primaryInverse","toThrowError"],"mappings":";;AAAA;;AAEAA,KAAK,iBAAL,EAAwB,YAAM;AAC5BC,SAAO,wBAAa,WAAKC,OAAlB,CAAP,EAAmCC,IAAnC,CAAwC,IAAxC;AACD,CAFD;;AAIAH,KAAK,iBAAL,EAAwB,YAAM;AAC5BC,SAAO,wBAAa,WAAKG,OAAlB,CAAP,EAAmCD,IAAnC,CAAwC,IAAxC;AACD,CAFD;;AAIAH,KAAK,wBAAL,EAA+B,YAAM;AACnCC,SAAO,wBAAa,WAAKI,cAAlB,CAAP,EAA0CF,IAA1C,CAA+C,IAA/C;AACD,CAFD;;AAIAH,KAAK,wBAAL,EAA+B,YAAM;AACnCC,SAAO,wBAAa,WAAKK,cAAlB,CAAP,EAA0CH,IAA1C,CAA+C,IAA/C;AACD,CAFD;;AAIAH,KAAK,wCAAL,EAA+C,YAAM;AACnDC,SAAO;AAAA,WAAM,wBAAa,UAAb,CAAN;AAAA,GAAP,EAAuCM,YAAvC;AACD,CAFD","file":"validateType.spec.js","sourcesContent":["import { Type, validateType } from './type';\n\ntest('accepts default', () => {\n  expect(validateType(Type.default)).toBe(true);\n});\n\ntest('accepts primary', () => {\n  expect(validateType(Type.primary)).toBe(true);\n});\n\ntest('accepts defaultInverse', () => {\n  expect(validateType(Type.defaultInverse)).toBe(true);\n});\n\ntest('accepts primaryInverse', () => {\n  expect(validateType(Type.primaryInverse)).toBe(true);\n});\n\ntest('throws error if invalid type is passed', () => {\n  expect(() => validateType('faketype')).toThrowError();\n});\n"]}