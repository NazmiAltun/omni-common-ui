{"version":3,"sources":["components/Dialog/spec.jsx"],"names":["describe","it","wrapper","document","getElementById","to","exist","unmount","not","context","have","descendants","LoadingOverlay","__visible","Dialog_closeIcon","onRequestClose","spy","button","find","simulate","calledWith","be","true"],"mappings":";;AAAA;;;;AAEA;;;;AACA;;AACA;;AACA;;;;AAEA;;;;;;AAEAA,SAAS,QAAT,EAAmB,YAAM;AACvBC,KAAG,8BAAH,EAAmC,YAAM;AACvC,QAAMC,UAAU,mBAAM;AAAA;AAAA,QAAQ,YAAR;AAAe,6CAAK,IAAG,cAAR;AAAf,KAAN,CAAhB;AACA,sBAAOC,SAASC,cAAT,CAAwB,cAAxB,CAAP,EAAgDC,EAAhD,CAAmDC,KAAnD;AACAJ,YAAQK,OAAR;AACD,GAJD;;AAMAN,KAAG,0CAAH,EAA+C,YAAM;AACnD,QAAMC,UAAU,mBAAM;AAAA;AAAA,QAAQ,QAAQ,KAAhB;AAAuB,6CAAK,IAAG,cAAR;AAAvB,KAAN,CAAhB;AACA,sBAAOC,SAASC,cAAT,CAAwB,cAAxB,CAAP,EAAgDC,EAAhD,CAAmDG,GAAnD,CAAuDF,KAAvD;AACAJ,YAAQK,OAAR;AACD,GAJD;;AAMAE,UAAQ,iBAAR,EAA2B,YAAM;AAC/BR,OAAG,wCAAH,EAA6C,YAAM;AACjD,UAAMC,UAAU,qBAAQ;AAAA;AAAA,UAAQ,YAAR,EAAe,eAAf;AAAyB;AAAzB,OAAR,CAAhB;AACA,wBAAOA,OAAP,EAAgBG,EAAhB,CAAmBK,IAAnB,CAAwBC,WAAxB,OACM,gBAAOC,cADb;AAGA,wBAAOV,OAAP,EAAgBG,EAAhB,CAAmBK,IAAnB,CAAwBC,WAAxB,OACM,gBAAOC,cADb,SAC+B,gBAAOC,SADtC;AAGD,KARD;;AAUAZ,OAAG,4CAAH,EAAiD,YAAM;AACrD,UAAMC,UAAU,qBAAQ;AAAA;AAAA,UAAQ,YAAR;AAAe;AAAf,OAAR,CAAhB;AACA,wBAAOA,OAAP,EAAgBG,EAAhB,CAAmBK,IAAnB,CAAwBC,WAAxB,OACM,gBAAOC,cADb;AAGA,wBAAOV,OAAP,EAAgBG,EAAhB,CAAmBG,GAAnB,CAAuBE,IAAvB,CAA4BC,WAA5B,OACM,gBAAOC,cADb,SAC+B,gBAAOC,SADtC;AAGD,KARD;AASD,GApBD;;AAsBAJ,UAAQ,cAAR,EAAwB,YAAM;AAC5BR,OAAG,2CAAH,EAAgD,YAAM;AACpD,UAAMC,UAAU,qBAAQ,4CAAQ,YAAR,EAAe,qBAAf,GAAR,CAAhB;AACA,wBAAOA,OAAP,EAAgBG,EAAhB,CAAmBK,IAAnB,CAAwBC,WAAxB,OAAwC,gBAAOG,gBAA/C;AACD,KAHD;;AAKAb,OAAG,uDAAH,EAA4D,YAAM;AAChE,UAAMC,UAAU,qBAAQ,4CAAQ,YAAR,GAAR,CAAhB;AACA,wBAAOA,OAAP,EAAgBG,EAAhB,CAAmBG,GAAnB,CAAuBE,IAAvB,CAA4BC,WAA5B,OAA4C,gBAAOG,gBAAnD;AACD,KAHD;;AAKAb,OAAG,yDAAH,EAA8D,YAAM;AAClE,UAAMc,iBAAiB,gBAAMC,GAAN,EAAvB;AACA,UAAMd,UAAU,qBAAQ,4CAAQ,YAAR,EAAe,qBAAf,EAA+B,gBAAgBa,cAA/C,GAAR,CAAhB;AACA,UAAME,SAASf,QAAQgB,IAAR,OAAiB,gBAAOJ,gBAAxB,CAAf;AACAG,aAAOE,QAAP,CAAgB,OAAhB;AACA,wBAAOJ,eAAeK,UAAf,CAA0B,QAA1B,CAAP,EAA4Cf,EAA5C,CAA+CgB,EAA/C,CAAkDC,IAAlD;AACD,KAND;AAOD,GAlBD;AAmBD,CAtDD","file":"spec.js","sourcesContent":["import styles from './style.postcss';\n\nimport React from 'react';\nimport { shallow, mount } from 'enzyme';\nimport { expect } from 'chai';\nimport Sinon from 'sinon';\n\nimport Dialog from './';\n\ndescribe('Dialog', () => {\n  it('renders its children if open', () => {\n    const wrapper = mount(<Dialog isOpen><div id=\"innerContent\" /></Dialog>);\n    expect(document.getElementById('innerContent')).to.exist;\n    wrapper.unmount();\n  });\n\n  it('does not render its children if not open', () => {\n    const wrapper = mount(<Dialog isOpen={false}><div id=\"innerContent\" /></Dialog>);\n    expect(document.getElementById('innerContent')).to.not.exist;\n    wrapper.unmount();\n  });\n\n  context('loading overlay', () => {\n    it('shows the loading overlay when loading', () => {\n      const wrapper = shallow(<Dialog isOpen isLoading><div /></Dialog>);\n      expect(wrapper).to.have.descendants(\n        `.${styles.LoadingOverlay}`\n      );\n      expect(wrapper).to.have.descendants(\n        `.${styles.LoadingOverlay}.${styles.__visible}`\n      );\n    });\n\n    it('hides the loading overlay when not loading', () => {\n      const wrapper = shallow(<Dialog isOpen><div /></Dialog>);\n      expect(wrapper).to.have.descendants(\n        `.${styles.LoadingOverlay}`\n      );\n      expect(wrapper).to.not.have.descendants(\n        `.${styles.LoadingOverlay}.${styles.__visible}`\n      );\n    });\n  });\n\n  context('close button', () => {\n    it('contains a close button icon when enabled', () => {\n      const wrapper = shallow(<Dialog isOpen withCloseButton />);\n      expect(wrapper).to.have.descendants(`.${styles.Dialog_closeIcon}`);\n    });\n\n    it('does not contain a close button icon when not enabled', () => {\n      const wrapper = shallow(<Dialog isOpen />);\n      expect(wrapper).to.not.have.descendants(`.${styles.Dialog_closeIcon}`);\n    });\n\n    it('calls `onRequestClose` when the close button is clicked', () => {\n      const onRequestClose = Sinon.spy();\n      const wrapper = shallow(<Dialog isOpen withCloseButton onRequestClose={onRequestClose} />);\n      const button = wrapper.find(`.${styles.Dialog_closeIcon}`);\n      button.simulate('click');\n      expect(onRequestClose.calledWith('button')).to.be.true;\n    });\n  });\n});\n"]}