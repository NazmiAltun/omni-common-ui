{"version":3,"sources":["components/ProgressBar/spec.jsx"],"names":["describe","it","wrapper","progress","find","ProgressBar_progress","props","style","width","to","equal"],"mappings":"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","file":"spec.js","sourcesContent":["import styles from './style.postcss';\n\nimport React from 'react';\nimport { shallow } from 'enzyme';\nimport { expect } from 'chai';\nimport { ProgressBar } from './';\n\ndescribe('ProgressBar', () => {\n  describe('when total is not provided', () => {\n    it('uses the \"progress\" property directly as a percentage', () => {\n      const wrapper = shallow(<ProgressBar value={45} />);\n      const progress = wrapper.find(`.${styles.ProgressBar_progress}`);\n      expect(progress.props().style.width).to.equal('45%');\n    });\n\n    it('the progress is 0 if no \"progress\" is provided', () => {\n      const wrapper = shallow(<ProgressBar />);\n      const progress = wrapper.find(`.${styles.ProgressBar_progress}`);\n      expect(progress.props().style.width).to.equal('0%');\n    });\n\n    it('the progress is 0 if \"progress\" is negative', () => {\n      const wrapper = shallow(<ProgressBar value={- 45} />);\n      const progress = wrapper.find(`.${styles.ProgressBar_progress}`);\n      expect(progress.props().style.width).to.equal('0%');\n    });\n\n    it('the progress is 100 if \"progress\" is more than 100', () => {\n      const wrapper = shallow(<ProgressBar value={145} />);\n      const progress = wrapper.find(`.${styles.ProgressBar_progress}`);\n      expect(progress.props().style.width).to.equal('100%');\n    });\n  });\n\n  describe('when total is provided', () => {\n    it('calculates the progress percentage out of \"progress\" and \"total\"', () => {\n      const wrapper = shallow(<ProgressBar value={45} max={45} />);\n      const progress = wrapper.find(`.${styles.ProgressBar_progress}`);\n      expect(progress.props().style.width).to.equal('100%');\n    });\n\n    it('the progress is 0 if no \"progress\" is provided', () => {\n      const wrapper = shallow(<ProgressBar max={45} />);\n      const progress = wrapper.find(`.${styles.ProgressBar_progress}`);\n      expect(progress.props().style.width).to.equal('0%');\n    });\n\n    it('the progress is 0 if \"progress\" is negative', () => {\n      const wrapper = shallow(<ProgressBar value={- 45} max={45} />);\n      const progress = wrapper.find(`.${styles.ProgressBar_progress}`);\n      expect(progress.props().style.width).to.equal('0%');\n    });\n\n    it('the progress is 100 if fraction is greater than 1', () => {\n      const wrapper = shallow(<ProgressBar value={200} max={100} />);\n      const progress = wrapper.find(`.${styles.ProgressBar_progress}`);\n      expect(progress.props().style.width).to.equal('100%');\n    });\n  });\n});\n"]}