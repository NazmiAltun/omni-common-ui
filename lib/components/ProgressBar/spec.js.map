{"version":3,"sources":["components/ProgressBar/spec.jsx"],"names":["describe","test","wrapper","progress","find","ProgressBar_progress","expect","props","style","width","toBe"],"mappings":";;AAAA;;;;AAEA;;;;AACA;;AACA;;;;AAEAA,SAAS,4BAAT,EAAuC,YAAM;AAC3CC,OAAK,uDAAL,EAA8D,YAAM;AAClE,QAAMC,UAAU,qBAAQ,+CAAa,OAAO,EAApB,GAAR,CAAhB;AACA,QAAMC,WAAWD,QAAQE,IAAR,OAAiB,gBAAOC,oBAAxB,CAAjB;AACAC,WAAOH,SAASI,KAAT,GAAiBC,KAAjB,CAAuBC,KAA9B,EAAqCC,IAArC,CAA0C,KAA1C;AACD,GAJD;;AAMAT,OAAK,gDAAL,EAAuD,YAAM;AAC3D,QAAMC,UAAU,qBAAQ,kDAAR,CAAhB;AACA,QAAMC,WAAWD,QAAQE,IAAR,OAAiB,gBAAOC,oBAAxB,CAAjB;AACAC,WAAOH,SAASI,KAAT,GAAiBC,KAAjB,CAAuBC,KAA9B,EAAqCC,IAArC,CAA0C,IAA1C;AACD,GAJD;;AAMAT,OAAK,6CAAL,EAAoD,YAAM;AACxD,QAAMC,UAAU,qBAAQ,+CAAa,OAAO,CAAE,EAAtB,GAAR,CAAhB;AACA,QAAMC,WAAWD,QAAQE,IAAR,OAAiB,gBAAOC,oBAAxB,CAAjB;AACAC,WAAOH,SAASI,KAAT,GAAiBC,KAAjB,CAAuBC,KAA9B,EAAqCC,IAArC,CAA0C,IAA1C;AACD,GAJD;;AAMAT,OAAK,oDAAL,EAA2D,YAAM;AAC/D,QAAMC,UAAU,qBAAQ,+CAAa,OAAO,GAApB,GAAR,CAAhB;AACA,QAAMC,WAAWD,QAAQE,IAAR,OAAiB,gBAAOC,oBAAxB,CAAjB;AACAC,WAAOH,SAASI,KAAT,GAAiBC,KAAjB,CAAuBC,KAA9B,EAAqCC,IAArC,CAA0C,MAA1C;AACD,GAJD;AAKD,CAxBD;;AA0BAV,SAAS,wBAAT,EAAmC,YAAM;AACvCC,OAAK,kEAAL,EAAyE,YAAM;AAC7E,QAAMC,UAAU,qBAAQ,+CAAa,OAAO,EAApB,EAAwB,KAAK,EAA7B,GAAR,CAAhB;AACA,QAAMC,WAAWD,QAAQE,IAAR,OAAiB,gBAAOC,oBAAxB,CAAjB;AACAC,WAAOH,SAASI,KAAT,GAAiBC,KAAjB,CAAuBC,KAA9B,EAAqCC,IAArC,CAA0C,MAA1C;AACD,GAJD;;AAMAT,OAAK,gDAAL,EAAuD,YAAM;AAC3D,QAAMC,UAAU,qBAAQ,+CAAa,KAAK,EAAlB,GAAR,CAAhB;AACA,QAAMC,WAAWD,QAAQE,IAAR,OAAiB,gBAAOC,oBAAxB,CAAjB;AACAC,WAAOH,SAASI,KAAT,GAAiBC,KAAjB,CAAuBC,KAA9B,EAAqCC,IAArC,CAA0C,IAA1C;AACD,GAJD;;AAMAT,OAAK,6CAAL,EAAoD,YAAM;AACxD,QAAMC,UAAU,qBAAQ,+CAAa,OAAO,CAAE,EAAtB,EAA0B,KAAK,EAA/B,GAAR,CAAhB;AACA,QAAMC,WAAWD,QAAQE,IAAR,OAAiB,gBAAOC,oBAAxB,CAAjB;AACAC,WAAOH,SAASI,KAAT,GAAiBC,KAAjB,CAAuBC,KAA9B,EAAqCC,IAArC,CAA0C,IAA1C;AACD,GAJD;;AAMAT,OAAK,mDAAL,EAA0D,YAAM;AAC9D,QAAMC,UAAU,qBAAQ,+CAAa,OAAO,GAApB,EAAyB,KAAK,GAA9B,GAAR,CAAhB;AACA,QAAMC,WAAWD,QAAQE,IAAR,OAAiB,gBAAOC,oBAAxB,CAAjB;AACAC,WAAOH,SAASI,KAAT,GAAiBC,KAAjB,CAAuBC,KAA9B,EAAqCC,IAArC,CAA0C,MAA1C;AACD,GAJD;AAKD,CAxBD","file":"spec.js","sourcesContent":["import styles from './style.postcss';\n\nimport React from 'react';\nimport { shallow } from 'enzyme';\nimport { ProgressBar } from './';\n\ndescribe('when total is not provided', () => {\n  test('uses the \"progress\" property directly as a percentage', () => {\n    const wrapper = shallow(<ProgressBar value={45} />);\n    const progress = wrapper.find(`.${styles.ProgressBar_progress}`);\n    expect(progress.props().style.width).toBe('45%');\n  });\n\n  test('the progress is 0 if no \"progress\" is provided', () => {\n    const wrapper = shallow(<ProgressBar />);\n    const progress = wrapper.find(`.${styles.ProgressBar_progress}`);\n    expect(progress.props().style.width).toBe('0%');\n  });\n\n  test('the progress is 0 if \"progress\" is negative', () => {\n    const wrapper = shallow(<ProgressBar value={- 45} />);\n    const progress = wrapper.find(`.${styles.ProgressBar_progress}`);\n    expect(progress.props().style.width).toBe('0%');\n  });\n\n  test('the progress is 100 if \"progress\" is more than 100', () => {\n    const wrapper = shallow(<ProgressBar value={145} />);\n    const progress = wrapper.find(`.${styles.ProgressBar_progress}`);\n    expect(progress.props().style.width).toBe('100%');\n  });\n});\n\ndescribe('when total is provided', () => {\n  test('calculates the progress percentage out of \"progress\" and \"total\"', () => {\n    const wrapper = shallow(<ProgressBar value={45} max={45} />);\n    const progress = wrapper.find(`.${styles.ProgressBar_progress}`);\n    expect(progress.props().style.width).toBe('100%');\n  });\n\n  test('the progress is 0 if no \"progress\" is provided', () => {\n    const wrapper = shallow(<ProgressBar max={45} />);\n    const progress = wrapper.find(`.${styles.ProgressBar_progress}`);\n    expect(progress.props().style.width).toBe('0%');\n  });\n\n  test('the progress is 0 if \"progress\" is negative', () => {\n    const wrapper = shallow(<ProgressBar value={- 45} max={45} />);\n    const progress = wrapper.find(`.${styles.ProgressBar_progress}`);\n    expect(progress.props().style.width).toBe('0%');\n  });\n\n  test('the progress is 100 if fraction is greater than 1', () => {\n    const wrapper = shallow(<ProgressBar value={200} max={100} />);\n    const progress = wrapper.find(`.${styles.ProgressBar_progress}`);\n    expect(progress.props().style.width).toBe('100%');\n  });\n});\n"]}