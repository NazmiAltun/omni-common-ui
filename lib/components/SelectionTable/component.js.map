{"version":3,"sources":["components/SelectionTable/component.jsx"],"names":["SelectionTable","props","state","route","_setUpData","children","Children","toArray","_level","filter","child","type","_header","find","setState","arr","slice","levels","_cloneArray","tempRoutes","currentRoute","shift","level","label","array","length","_renderLevels","map","_onLevelClick","title","rootLinkTitle","hideRootLink","headerClassName","SelectionTable_header","routes","onHeadingRouteClick","routeIndex","indexOf","newRoute","onHeadingBackClick","onHeadingRootClick","headingRouteClassName","SelectionTable_heading_route","headingBackClassName","SelectionTable_heading_back","SelectionTable_heading","falsy","undefined","existy","_renderHeading","_renderContent","propTypes","node","string","bool"],"mappings":"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","file":"component.js","sourcesContent":["import styles from './style.postcss';\n\nimport React, { PureComponent } from 'react';\nimport is from 'is_js';\nimport classnames from 'classnames';\nimport PageCard from 'components/PageCard';\nimport Icon from 'components/Icon';\nimport Header from './Header';\nimport Level from './Level';\nimport Leaf from './Leaf';\nimport PropTypes from 'prop-types';\n\nclass SelectionTable extends PureComponent {\n\n  constructor(props) {\n    super(props);\n    this.state = { route: [] };\n    this._setUpData(props);\n  }\n\n  componentWillUpdate(props) {\n    this._setUpData(props);\n  }\n\n  _setUpData(props) {\n    const children = React.Children.toArray(props.children);\n    this._level = children.filter((child) => child.type === Level);\n    this._header = children.find((child) => child.type === Header);\n  }\n\n  _onLevelClick(route) {\n    this.setState({ route });\n  }\n\n  _cloneArray(arr) {\n    return arr.slice(0);\n  }\n\n  _renderContent() {\n    let levels = this._cloneArray(this._level);\n    const tempRoutes = this._cloneArray(this.state.route);\n    while (tempRoutes.length !== 0) {\n      const currentRoute = tempRoutes.shift();\n      levels = levels.find(\n        (level) => level.props.label === currentRoute\n      );\n      levels = is.array(levels.props.children) ?\n        this._cloneArray(levels.props.children) :\n        levels.props.children;\n    }\n\n    if (tempRoutes.length === 0) {\n      return this._renderLevels(levels);\n    }\n  }\n\n  _renderLevels(levels) {\n    if (! is.array(levels) && levels.type === Leaf) {\n      return <Leaf>{levels.props.children}</Leaf>;\n    }\n    return <div>\n      {\n        levels.map((level) =>\n          <Level key={level.props.label}\n              route={this.state.route}\n              label={level.props.label}\n              onClick={(route) => this._onLevelClick(route)}>\n            {level.props.children}\n          </Level>\n        )\n      }\n    </div>;\n  }\n\n  _renderHeading() {\n    const { title, rootLinkTitle, hideRootLink } = this.props;\n    const headerClassName = classnames(this.props.headerClassName,\n      styles.SelectionTable_header);\n    const routes = this._cloneArray(this.state.route);\n    const onHeadingRouteClick = (route) => {\n      const routeIndex = routes.indexOf(route);\n      if (routeIndex >= 0) {\n        const newRoute = routes.slice(0, routeIndex + 1);\n        this.setState({ route: newRoute });\n      }\n    };\n    const onHeadingBackClick = () => {\n      this.setState({ route: routes.slice(0, routes.length - 1) });\n    };\n\n    const onHeadingRootClick = () => {\n      this.setState({ route: [] });\n    };\n    const headingRouteClassName = styles.SelectionTable_heading_route;\n    const headingBackClassName = styles.SelectionTable_heading_back;\n    if (is.array(routes) && routes.length > 0) {\n      return <PageCard.Heading className={styles.SelectionTable_heading}>\n        <span className={headingBackClassName} onClick={() => onHeadingBackClick()}>\n          <Icon id=\"arrow-left\" />\n        </span>\n        {\n          is.falsy(hideRootLink) ?\n            <span className={headingRouteClassName} onClick={() => onHeadingRootClick()}>\n              {is.undefined(rootLinkTitle) ? title : rootLinkTitle}\n            </span> : null\n        }\n        {\n          routes.map((route) =>\n            <span key={route}\n                className={headingRouteClassName}\n                onClick={() => onHeadingRouteClick(route)}>\n              {route}\n            </span>)\n        }\n\n      </PageCard.Heading>;\n    }\n    return <PageCard.Heading className={headerClassName} text={this.props.title}>\n      {\n        is.existy(this._header) ? this._header : null\n      }\n    </PageCard.Heading>;\n  }\n\n  render() {\n    return <PageCard>\n      {this._renderHeading()}\n      <div>\n        {this._renderContent()}\n      </div>\n    </PageCard>;\n  }\n\n}\n\nSelectionTable.propTypes = {\n  children: PropTypes.node,\n  title: PropTypes.string,\n  rootLinkTitle: PropTypes.string,\n  headerClassName: PropTypes.string,\n  hideRootLink: PropTypes.bool,\n};\n\nexport default SelectionTable;\n"]}