{"version":3,"sources":["components/ErrorPage/spec.jsx"],"names":["describe","props","beforeEach","afterButtonClicked","spy","erroredApi","error","Error","it","wrapper","find","ErrorPage_text","to","contain","ErrorPage_image","have","prop","simulate","calledOnce","be","true","config","icon","message","buttonText","buttonLink","equal","args","eql"],"mappings":"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","file":"spec.js","sourcesContent":["import styles from './style.postcss';\nimport React from 'react';\nimport { expect } from 'chai';\nimport { shallow } from 'enzyme';\nimport Sinon from 'sinon';\nimport Button from 'components/Button';\nimport { ErrorPage } from './';\n\ndescribe('<ErrorPageHandler />', () => {\n  describe('<ErrorPage />', () => {\n    let props;\n\n    beforeEach(() => {\n      props = {\n        afterButtonClicked: Sinon.spy(),\n        erroredApi: {\n          error: new Error('an error'),\n        },\n      };\n    });\n\n    it('uses the default behaviour if no config is passed', () => {\n      const wrapper = shallow(<ErrorPage {...props} />);\n      expect(wrapper.find(`.${styles.ErrorPage_text}`))\n          .to.contain('Omni could not load this page.');\n      expect(wrapper.find(`.${styles.ErrorPage_image}`)).to.have.prop('id', 'warning');\n      expect(wrapper.find(Button)).to.have.prop('children', 'Back');\n      expect(wrapper.find(Button)).to.have.prop('linkTo', '/');\n    });\n\n    it('calls afterButtonClicked after clicking the button even ' +\n        'if no config.buttonLink is provided', () => {\n      const wrapper = shallow(<ErrorPage {...props} />);\n      wrapper.find(Button).simulate('click');\n      expect(props.afterButtonClicked.calledOnce).to.be.true;\n    });\n\n    it('allows to customise the icon if config.icon is provided', () => {\n      props.config = { icon: () => 'custom-id' };\n      const wrapper = shallow(<ErrorPage {...props} />);\n      expect(wrapper.find(`.${styles.ErrorPage_image}`)).to.have.prop('id', 'custom-id');\n    });\n\n    it('allows to customise the error message if config.message is provided', () => {\n      props.config = { message: () => 'my custom error' };\n      const wrapper = shallow(<ErrorPage {...props} />);\n      expect(wrapper.find(`.${styles.ErrorPage_text}`)).to.contain('my custom error');\n    });\n\n    it('allows to customise the text in the button if config.buttonText is provided', () => {\n      props.config = { buttonText: () => 'my custom button' };\n      const wrapper = shallow(<ErrorPage {...props} />);\n      expect(wrapper.find(Button)).to.contain('my custom button');\n    });\n\n    it('allows to customise the button\\'s link if config.buttonLink is provided', () => {\n      props.config = { buttonLink: () => '/custom/path' };\n      const wrapper = shallow(<ErrorPage {...props} />);\n      expect(wrapper.find(Button)).to.have.prop('linkTo', '/custom/path');\n    });\n\n    it('calls all config functions with props', () => {\n      props.config = { message: Sinon.spy(), buttonText: Sinon.spy(), buttonLink: Sinon.spy() };\n      const wrapper = shallow(<ErrorPage {...props} />);\n      wrapper.find(Button).simulate('click');\n      expect(props.config.message.calledOnce).to.equal(true, 'message called once');\n      expect(props.config.message.args).to.eql([[props]], 'message params');\n      expect(props.config.buttonText.calledOnce).to.equal(true, 'buttonText called once');\n      expect(props.config.buttonText.args).to.eql([[props]], 'buttonText params');\n      expect(props.config.buttonLink.calledOnce).to.equal(true, 'buttonLink called once');\n      expect(props.config.buttonLink.args).to.eql([[props]], 'buttonLink params');\n    });\n\n    it('shows the button even if its link points to the current URL', () => {\n      props.config = { buttonLink: () => 'current/Path/' };\n      const wrapper = shallow(<ErrorPage {...props} />);\n      expect(wrapper.find(Button)).to.have.prop('linkTo', 'current/Path/');\n    });\n  });\n});\n"]}