{"version":3,"sources":["components/ErrorPage/spec.jsx"],"names":["props","beforeEach","erroredApi","error","Error","test","wrapper","expect","find","ErrorPage_text","contains","toBe","ErrorPage_image","prop","config","icon","message"],"mappings":";;AAAA;;;;AACA;;;;AACA;;AACA;;;;AAEA,IAAIA,cAAJ;;AAEAC,WAAW,YAAM;AACfD,UAAQ;AACNE,gBAAY;AACVC,aAAO,IAAIC,KAAJ,CAAU,UAAV;AADG;AADN,GAAR;AAKD,CAND;;AAQAC,KAAK,mDAAL,EAA0D,YAAM;AAC9D,MAAMC,UAAU,qBAAQ,2CAAeN,KAAf,CAAR,CAAhB;AACAO,SAAOD,QAAQE,IAAR,OAAiB,gBAAOC,cAAxB,EAA0CC,QAA1C,CAAmD,gCAAnD,CAAP,EAA6FC,IAA7F,CAAkG,IAAlG;AACAJ,SAAOD,QAAQE,IAAR,OAAiB,gBAAOI,eAAxB,EAA2CC,IAA3C,CAAgD,IAAhD,CAAP,EAA8DF,IAA9D,CAAmE,SAAnE;AACD,CAJD;;AAMAN,KAAK,yDAAL,EAAgE,YAAM;AACpEL,QAAMc,MAAN,GAAe,EAAEC,MAAM;AAAA,aAAM,WAAN;AAAA,KAAR,EAAf;AACA,MAAMT,UAAU,qBAAQ,2CAAeN,KAAf,CAAR,CAAhB;AACAO,SAAOD,QAAQE,IAAR,OAAiB,gBAAOI,eAAxB,EAA2CC,IAA3C,CAAgD,IAAhD,CAAP,EAA8DF,IAA9D,CAAmE,WAAnE;AACD,CAJD;;AAMAN,KAAK,qEAAL,EAA4E,YAAM;AAChFL,QAAMc,MAAN,GAAe,EAAEE,SAAS;AAAA,aAAM,iBAAN;AAAA,KAAX,EAAf;AACA,MAAMV,UAAU,qBAAQ,2CAAeN,KAAf,CAAR,CAAhB;AACAO,SAAOD,QAAQE,IAAR,OAAiB,gBAAOC,cAAxB,EAA0CC,QAA1C,CAAmD,iBAAnD,CAAP,EAA8EC,IAA9E,CAAmF,IAAnF;AACD,CAJD","file":"spec.js","sourcesContent":["import styles from './style.postcss';\nimport React from 'react';\nimport { shallow } from 'enzyme';\nimport { ErrorPage } from './';\n\nlet props;\n\nbeforeEach(() => {\n  props = {\n    erroredApi: {\n      error: new Error('an error'),\n    },\n  };\n});\n\ntest('uses the default behaviour if no config is passed', () => {\n  const wrapper = shallow(<ErrorPage {...props} />);\n  expect(wrapper.find(`.${styles.ErrorPage_text}`).contains('Omni could not load this page.')).toBe(true);\n  expect(wrapper.find(`.${styles.ErrorPage_image}`).prop('id')).toBe('warning');\n});\n\ntest('allows to customise the icon if config.icon is provided', () => {\n  props.config = { icon: () => 'custom-id' };\n  const wrapper = shallow(<ErrorPage {...props} />);\n  expect(wrapper.find(`.${styles.ErrorPage_image}`).prop('id')).toBe('custom-id');\n});\n\ntest('allows to customise the error message if config.message is provided', () => {\n  props.config = { message: () => 'my custom error' };\n  const wrapper = shallow(<ErrorPage {...props} />);\n  expect(wrapper.find(`.${styles.ErrorPage_text}`).contains('my custom error')).toBe(true);\n});\n"]}