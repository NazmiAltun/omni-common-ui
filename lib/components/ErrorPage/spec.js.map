{"version":3,"sources":["components/ErrorPage/spec.jsx"],"names":["describe","props","beforeEach","erroredApi","error","Error","it","wrapper","find","ErrorPage_text","to","contain","ErrorPage_image","have","prop","config","icon","message"],"mappings":";;AAAA;;;;AACA;;;;AACA;;AACA;;AACA;;;;AAEAA,SAAS,sBAAT,EAAiC,YAAM;AACrCA,WAAS,eAAT,EAA0B,YAAM;AAC9B,QAAIC,cAAJ;;AAEAC,eAAW,YAAM;AACfD,cAAQ;AACNE,oBAAY;AACVC,iBAAO,IAAIC,KAAJ,CAAU,UAAV;AADG;AADN,OAAR;AAKD,KAND;;AAQAC,OAAG,mDAAH,EAAwD,YAAM;AAC5D,UAAMC,UAAU,qBAAQ,2CAAeN,KAAf,CAAR,CAAhB;AACA,wBAAOM,QAAQC,IAAR,OAAiB,gBAAOC,cAAxB,CAAP,EACKC,EADL,CACQC,OADR,CACgB,gCADhB;AAEA,wBAAOJ,QAAQC,IAAR,OAAiB,gBAAOI,eAAxB,CAAP,EAAmDF,EAAnD,CAAsDG,IAAtD,CAA2DC,IAA3D,CAAgE,IAAhE,EAAsE,SAAtE;AACD,KALD;;AAOAR,OAAG,yDAAH,EAA8D,YAAM;AAClEL,YAAMc,MAAN,GAAe,EAAEC,MAAM;AAAA,iBAAM,WAAN;AAAA,SAAR,EAAf;AACA,UAAMT,UAAU,qBAAQ,2CAAeN,KAAf,CAAR,CAAhB;AACA,wBAAOM,QAAQC,IAAR,OAAiB,gBAAOI,eAAxB,CAAP,EAAmDF,EAAnD,CAAsDG,IAAtD,CAA2DC,IAA3D,CAAgE,IAAhE,EAAsE,WAAtE;AACD,KAJD;;AAMAR,OAAG,qEAAH,EAA0E,YAAM;AAC9EL,YAAMc,MAAN,GAAe,EAAEE,SAAS;AAAA,iBAAM,iBAAN;AAAA,SAAX,EAAf;AACA,UAAMV,UAAU,qBAAQ,2CAAeN,KAAf,CAAR,CAAhB;AACA,wBAAOM,QAAQC,IAAR,OAAiB,gBAAOC,cAAxB,CAAP,EAAkDC,EAAlD,CAAqDC,OAArD,CAA6D,iBAA7D;AACD,KAJD;AAKD,GA7BD;AA8BD,CA/BD","file":"spec.js","sourcesContent":["import styles from './style.postcss';\nimport React from 'react';\nimport { expect } from 'chai';\nimport { shallow } from 'enzyme';\nimport { ErrorPage } from './';\n\ndescribe('<ErrorPageHandler />', () => {\n  describe('<ErrorPage />', () => {\n    let props;\n\n    beforeEach(() => {\n      props = {\n        erroredApi: {\n          error: new Error('an error'),\n        },\n      };\n    });\n\n    it('uses the default behaviour if no config is passed', () => {\n      const wrapper = shallow(<ErrorPage {...props} />);\n      expect(wrapper.find(`.${styles.ErrorPage_text}`))\n          .to.contain('Omni could not load this page.');\n      expect(wrapper.find(`.${styles.ErrorPage_image}`)).to.have.prop('id', 'warning');\n    });\n\n    it('allows to customise the icon if config.icon is provided', () => {\n      props.config = { icon: () => 'custom-id' };\n      const wrapper = shallow(<ErrorPage {...props} />);\n      expect(wrapper.find(`.${styles.ErrorPage_image}`)).to.have.prop('id', 'custom-id');\n    });\n\n    it('allows to customise the error message if config.message is provided', () => {\n      props.config = { message: () => 'my custom error' };\n      const wrapper = shallow(<ErrorPage {...props} />);\n      expect(wrapper.find(`.${styles.ErrorPage_text}`)).to.contain('my custom error');\n    });\n  });\n});\n"]}