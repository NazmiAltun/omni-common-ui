{"version":3,"sources":["components/ContentEditable/index.jsx"],"names":["OBSERVER_CONFIG","childList","subtree","characterData","ContentEditable","_emitChange","bind","htmlEl","observer","MutationObserver","mutations","forEach","observe","nextProps","html","innerHTML","props","disabled","className","disconnect","onChange","lastHtml","e","__html","children","propTypes","string","bool","func","node"],"mappings":";;;;;;;;;;AAAA;;;;AACA;;;;AACA;;;;;;;;;;;;;;AAEA,IAAMA,kBAAkB,EAAEC,WAAW,IAAb,EAAmBC,SAAS,IAA5B,EAAkCC,eAAe,IAAjD,EAAxB;;IAEqBC,e;;;AACnB,6BAAc;AAAA;;AAAA;;AAEZ,UAAKC,WAAL,GAAmB,MAAKA,WAAL,CAAiBC,IAAjB,OAAnB;AAFY;AAGb;;;;wCAEmB;AAAA;;AAClB,+BAAU,KAAKC,MAAf,EAAuB,qCAAvB;;AAEA,WAAKC,QAAL,GAAgB,IAAIC,gBAAJ,CAAqB,UAACC,SAAD,EAAe;AAClDA,kBAAUC,OAAV,CAAkB,OAAKN,WAAvB;AACD,OAFe,CAAhB;AAGA,WAAKG,QAAL,CAAcI,OAAd,CAAsB,KAAKL,MAA3B,EAAmCP,eAAnC;AACD;;AAED;;;;0CACsBa,S,EAAW;AAC/B;AACA;AACA;AACE;AACA,SAAE,KAAKN,MAAP;AACA;AACCM,kBAAUC,IAAV,KAAmB,KAAKP,MAAL,CAAYQ,SAA/B,IACCF,UAAUC,IAAV,KAAmB,KAAKE,KAAL,CAAWF,IAHhC;AAIA;AACA,aAAKE,KAAL,CAAWC,QAAX,KAAwBJ,UAAUI,QALlC;AAMA;AACA,aAAKD,KAAL,CAAWE,SAAX,KAAyBL,UAAUK;AATrC;AAWD;;;yCAEoB;AACnB,UAAI,KAAKX,MAAL,IAAe,KAAKS,KAAL,CAAWF,IAAX,KAAoB,KAAKP,MAAL,CAAYQ,SAAnD,EAA8D;AAC5D;AACA;AACA,aAAKR,MAAL,CAAYQ,SAAZ,GAAwB,KAAKC,KAAL,CAAWF,IAAnC;AACD;AACF;;;2CAEsB;AACrB,WAAKN,QAAL,CAAcW,UAAd;AACD;;;kCAEa;AACZ,UAAI,CAAE,KAAKZ,MAAX,EAAmB;AACnB,UAAMO,OAAO,KAAKP,MAAL,CAAYQ,SAAzB;AACA,UAAI,KAAKC,KAAL,CAAWI,QAAX,IAAuBN,SAAS,KAAKO,QAAzC,EAAmD;AACjD,aAAKL,KAAL,CAAWI,QAAX,CAAoBN,IAApB;AACD;AACD,WAAKO,QAAL,GAAgBP,IAAhB;AACD;;;6BAEQ;AAAA;;AAAA,mBACoB,KAAKE,KADzB;AAAA,UACCF,IADD,UACCA,IADD;AAAA,UACUE,KADV;;AAGP;;;AACA,aAAO;AAAA;AAAA,qBAASA,KAAT;AACH,eAAK,aAACM,CAAD,EAAO;AAAE,mBAAKf,MAAL,GAAce,CAAd;AAAkB,WAD7B;AAEH,2BAAiB,CAAE,KAAKN,KAAL,CAAWC,QAF3B;AAGH,mCAAyB,EAAEM,QAAQT,IAAV,EAHtB;AAIJ,aAAKE,KAAL,CAAWQ;AAJP,OAAP;AAMD;;;;;;kBA/DkBpB,e;;;AAkErBA,gBAAgBqB,SAAhB,GAA4B;AAC1BP,aAAW,oBAAUQ,MADK;AAE1BZ,QAAM,oBAAUY,MAFU;AAG1BT,YAAU,oBAAUU,IAHM;AAI1BP,YAAU,oBAAUQ,IAJM;AAK1BJ,YAAU,oBAAUK;AALM,CAA5B","file":"index.js","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport invariant from 'invariant';\n\nconst OBSERVER_CONFIG = { childList: true, subtree: true, characterData: true };\n\nexport default class ContentEditable extends Component {\n  constructor() {\n    super();\n    this._emitChange = this._emitChange.bind(this);\n  }\n\n  componentDidMount() {\n    invariant(this.htmlEl, 'htmlEl must have been set (via ref)');\n\n    this.observer = new MutationObserver((mutations) => {\n      mutations.forEach(this._emitChange);\n    });\n    this.observer.observe(this.htmlEl, OBSERVER_CONFIG);\n  }\n\n  // taken from https://github.com/lovasoa/react-contenteditable\n  shouldComponentUpdate(nextProps) {\n    // We need not rerender if the change of props simply reflects the user's\n    // edits. Rerendering in this case would make the cursor/caret jump.\n    return (\n      // Rerender if there is no element yet... (somehow?)\n      ! this.htmlEl ||\n      // ...or if html really changed... (programmatically, not by user edit)\n      (nextProps.html !== this.htmlEl.innerHTML &&\n        nextProps.html !== this.props.html) ||\n      // ...or if editing is enabled or disabled.\n      this.props.disabled !== nextProps.disabled ||\n      // ...or if className changed\n      this.props.className !== nextProps.className\n    );\n  }\n\n  componentDidUpdate() {\n    if (this.htmlEl && this.props.html !== this.htmlEl.innerHTML) {\n      // Perhaps React (whose VDOM gets outdated because we often prevent\n      // rerendering) did not update the DOM. So we update it manually now.\n      this.htmlEl.innerHTML = this.props.html;\n    }\n  }\n\n  componentWillUnmount() {\n    this.observer.disconnect();\n  }\n\n  _emitChange() {\n    if (! this.htmlEl) return;\n    const html = this.htmlEl.innerHTML;\n    if (this.props.onChange && html !== this.lastHtml) {\n      this.props.onChange(html);\n    }\n    this.lastHtml = html;\n  }\n\n  render() {\n    const { html, ...props } = this.props;\n\n    // eslint-disable-next-line\n    return <div {...props}\n        ref={(e) => { this.htmlEl = e; }}\n        contentEditable={! this.props.disabled}\n        dangerouslySetInnerHTML={{ __html: html }}>\n      {this.props.children}\n    </div>;\n  }\n}\n\nContentEditable.propTypes = {\n  className: PropTypes.string,\n  html: PropTypes.string,\n  disabled: PropTypes.bool,\n  onChange: PropTypes.func,\n  children: PropTypes.node,\n};\n"]}