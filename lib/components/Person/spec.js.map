{"version":3,"sources":["components/Person/spec.jsx"],"names":["test","wrapper","expect","find","toHaveLength","lines","Person_lines"],"mappings":";;AAAA;;;;AAEA;;;;AACA;;AACA;;;;AACA;;;;AACA;;;;;;AAEAA,KAAK,oCAAL,EAA2C,YAAM;AAC/C,MAAMC,UAAU,qBAAQ;AAAA;AAAA;AAAQ;AAAR,GAAR,CAAhB;AACAC,SAAOD,QAAQE,IAAR,0BAAP,EAAqCC,YAArC,CAAkD,CAAlD;AACD,CAHD;;AAKAJ,KAAK,kCAAL,EAAyC,YAAM;AAC7C,MAAMC,UAAU,qBAAQ;AAAA;AAAA;AAAQ;AAAR,GAAR,CAAhB;AACAC,SAAOD,QAAQE,IAAR,wBAAP,EAAmCC,YAAnC,CAAgD,CAAhD;AACD,CAHD;;AAKAJ,KAAK,yCAAL,EAAgD,YAAM;AACpD,MAAMC,UAAU,qBAAQ;AAAA;AAAA;AACtB,+DADsB;AAEtB,+DAFsB;AAGtB;AAHsB,GAAR,CAAhB;AAKAC,SAAOD,QAAQE,IAAR,wBAAP,EAAmCC,YAAnC,CAAgD,CAAhD;AACAF,SAAOD,QAAQE,IAAR,0BAAP,EAAqCC,YAArC,CAAkD,CAAlD;AACD,CARD;;AAUAJ,KAAK,2CAAL,EAAkD,YAAM;AACtD,MAAMC,UAAU,qBAAQ;AAAA;AAAA;AACtB,+DADsB;AAEtB,2CAAK,IAAG,QAAR,GAFsB;AAGtB;AAAA;AAAA,QAAI,IAAG,QAAP;AAAA;AAAA,KAHsB;AAItB,2CAAK,IAAG,QAAR;AAJsB,GAAR,CAAhB;AAMA,MAAMI,QAAQJ,QAAQE,IAAR,OAAiB,gBAAOG,YAAxB,CAAd;AACAJ,SAAOG,MAAMF,IAAN,CAAW,SAAX,CAAP,EAA8BC,YAA9B,CAA2C,CAA3C;AACAF,SAAOG,MAAMF,IAAN,CAAW,SAAX,CAAP,EAA8BC,YAA9B,CAA2C,CAA3C;AACAF,SAAOG,MAAMF,IAAN,CAAW,SAAX,CAAP,EAA8BC,YAA9B,CAA2C,CAA3C;AACD,CAXD","file":"spec.js","sourcesContent":["import styles from './style.postcss';\n\nimport React from 'react';\nimport { shallow } from 'enzyme';\nimport StudentPicture from 'components/StudentPicture';\nimport AdultPicture from 'components/AdultPicture';\nimport Person from './';\n\ntest('renders StudentPicture if provided', () => {\n  const wrapper = shallow(<Person><StudentPicture /></Person>);\n  expect(wrapper.find(StudentPicture)).toHaveLength(1);\n});\n\ntest('renders AdultPicture if provided', () => {\n  const wrapper = shallow(<Person><AdultPicture /></Person>);\n  expect(wrapper.find(AdultPicture)).toHaveLength(1);\n});\n\ntest('renders only the first picture provided', () => {\n  const wrapper = shallow(<Person>\n    <AdultPicture />\n    <AdultPicture />\n    <StudentPicture />\n  </Person>);\n  expect(wrapper.find(AdultPicture)).toHaveLength(1);\n  expect(wrapper.find(StudentPicture)).toHaveLength(0);\n});\n\ntest('renders all the other children as \"lines\"', () => {\n  const wrapper = shallow(<Person>\n    <AdultPicture />\n    <div id=\"line-1\" />\n    <h1 id=\"line-2\">Line 2</h1>\n    <div id=\"line-3\" />\n  </Person>);\n  const lines = wrapper.find(`.${styles.Person_lines}`);\n  expect(lines.find('#line-1')).toHaveLength(1);\n  expect(lines.find('#line-2')).toHaveLength(1);\n  expect(lines.find('#line-3')).toHaveLength(1);\n});\n"]}