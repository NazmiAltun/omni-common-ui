{"version":3,"sources":["components/Avatar/spec.jsx"],"names":["describe","bloggsInitialsAvatarUri","unknownInitialsAvatarUri","redInitialsAvatarUri","props","beforeEach","src","default","defaultMale","defaultFemale","it","wrapper","to","have","descendants","style","undefined","context","attr"],"mappings":";;;;AAAA;;;;AACA;;AACA;;AACA;;;;AACA;;;;;;AAEAA,SAAS,YAAT,EAAuB,YAAM;AAC3B,MAAMC,0BAA0B,6CAAiC,KAAjC,EAAwC,QAAxC,CAAhC;AACA,MAAMC,2BAA2B,6CAAiC,GAAjC,EAAsC,GAAtC,CAAjC;AACA,MAAMC,uBAAuB,6CAAiC,OAAjC,EAA0C,GAA1C,EAA+C,SAA/C,EAA0D,OAA1D,CAA7B;;AAEA,MAAIC,cAAJ;;AAEAC,aAAW,YAAM;AACfD,YAAQ;AACNE,WAAK,UADC;AAENC,eAAS,cAFH;AAGNC,mBAAa,mBAHP;AAINC,qBAAe;AAJT,KAAR;AAMD,GAPD;;AASAC,KAAG,8BAAH,EAAmC,YAAM;AACvC,QAAMC,UAAU,qBAAQ,4CAAQ,WAAU,QAAlB,GAAR,CAAhB;AACA,sBAAOA,OAAP,EAAgBC,EAAhB,CAAmBC,IAAnB,CAAwBC,WAAxB,CAAoC,SAApC;AACD,GAHD;;AAKAJ,KAAG,oBAAH,EAAyB,YAAM;AAC7B,QAAMC,UAAU,qBAAQ,4CAAQ,KAAI,UAAZ,GAAR,CAAhB;AACA,sBAAOA,OAAP,EAAgBC,EAAhB,CAAmBC,IAAnB,CAAwBE,KAAxB,CAA8B,kBAA9B,EAAkD,iBAAlD;AACD,GAHD;;AAKAL,KAAG,0DAAH,EAA+D,YAAM;AACnE,QAAMC,UAAU,qBAAQ,0CAAYP,KAAZ,CAAR,CAAhB;AACA,sBAAOO,OAAP,EAAgBC,EAAhB,CAAmBC,IAAnB,CAAwBE,KAAxB,CAA8B,kBAA9B,EAAkD,sCAAlD;AACD,GAHD;;AAKAf,WAAS,0BAAT,EAAqC,YAAM;AACzCK,eAAW,YAAM;AACfD,YAAME,GAAN,GAAYU,SAAZ;AACD,KAFD;;AAIAN,OAAG,mCAAH,EAAwC,YAAM;AAC5C,UAAMC,UAAU,qBAAQ,uDAAYP,KAAZ,IAAmB,QAAO,MAA1B,IAAR,CAAhB;AACA,wBAAOO,OAAP,EAAgBC,EAAhB,CAAmBC,IAAnB,CAAwBE,KAAxB,CAA8B,kBAA9B,EAAkD,0BAAlD;AACD,KAHD;;AAKAL,OAAG,qCAAH,EAA0C,YAAM;AAC9C,UAAMC,UAAU,qBAAQ,uDAAYP,KAAZ,IAAmB,QAAO,QAA1B,IAAR,CAAhB;AACA,wBAAOO,OAAP,EAAgBC,EAAhB,CAAmBC,IAAnB,CAAwBE,KAAxB,CAA8B,kBAA9B,EAAkD,4BAAlD;AACD,KAHD;;AAKAL,OAAG,kDAAH,EAAuD,YAAM;AAC3D,UAAMC,UAAU,qBAAQ,0CAAYP,KAAZ,CAAR,CAAhB;AACA,wBAAOO,OAAP,EAAgBC,EAAhB,CAAmBC,IAAnB,CAAwBE,KAAxB,CAA8B,kBAA9B,EAAkD,qBAAlD;AACD,KAHD;;AAKAE,YAAQ,iFAAR,EAA2F,YAAM;AAC/FP,SAAG,YAAH,EAAiB,YAAM;AACrB,YAAMC,UAAU,qBAAQ,uDAAYP,KAAZ;AACpB,yBAAc,KADM;AAEpB,wBAAa,QAFO;AAGpB,kDAHoB,IAAR,CAAhB;AAIA,0BAAOO,OAAP,EAAgBC,EAAhB,CAAmBC,IAAnB,CAAwBK,IAAxB,CAA6B,OAA7B,6BAA+DjB,uBAA/D;AACD,OAND;;AAQAS,SAAG,4CAAH,EAAiD,YAAM;AACrD,YAAMC,UAAU,qBAAQ,uDAAYP,KAAZ;AACpB,yBAAc,OADM;AAEpB,kDAFoB,IAAR,CAAhB;AAGA,0BAAOO,OAAP,EAAgBC,EAAhB,CAAmBC,IAAnB,CAAwBK,IAAxB,CAA6B,OAA7B,6BAA+Df,oBAA/D;AACD,OALD;;AAOAO,SAAG,yCAAH,EAA8C,YAAM;AAClD,YAAMC,UAAU,qBAAQ,uDAAYP,KAAZ;AACpB,yBAAc,EADM;AAEpB,wBAAa,EAFO;AAGpB,kDAHoB,IAAR,CAAhB;AAIA,0BAAOO,OAAP,EAAgBC,EAAhB,CAAmBC,IAAnB,CAAwBK,IAAxB,CAA6B,OAA7B,6BAA+DhB,wBAA/D;AACD,OAND;;AAQAQ,SAAG,0CAAH,EAA+C,YAAM;AACnD,YAAMC,UAAU,qBAAQ,uDAAYP,KAAZ;AACpB,kDADoB,IAAR,CAAhB;AAEA,0BAAOO,OAAP,EAAgBC,EAAhB,CAAmBC,IAAnB,CAAwBK,IAAxB,CAA6B,OAA7B,6BAA+DhB,wBAA/D;AACD,OAJD;;AAMAQ,SAAG,sDAAH,EAA2D,YAAM;AAC/D,YAAMC,UAAU,qBAAQ,uDAAYP,KAAZ;AACpB,yBAAe,IADK;AAEpB,wBAAc,CAFM;AAGpB,kDAHoB,IAAR,CAAhB;AAIA,0BAAOO,OAAP,EAAgBC,EAAhB,CAAmBC,IAAnB,CAAwBK,IAAxB,CAA6B,OAA7B,6BAA+DhB,wBAA/D;AACD,OAND;AAOD,KArCD;AAsCD,GA1DD;AA2DD,CA1FD","file":"spec.js","sourcesContent":["import React from 'react';\nimport { shallow } from 'enzyme';\nimport { expect } from 'chai';\nimport Avatar from './';\nimport generateUserInitialsAvatarSvgUri from './generateUserInitialsAvatarSvg';\n\ndescribe('<Avatar />', () => {\n  const bloggsInitialsAvatarUri = generateUserInitialsAvatarSvgUri('Joe', 'Bloggs');\n  const unknownInitialsAvatarUri = generateUserInitialsAvatarSvgUri('?', '?');\n  const redInitialsAvatarUri = generateUserInitialsAvatarSvgUri('Kelly', '?', '#D8213A', 'white');\n\n  let props;\n\n  beforeEach(() => {\n    props = {\n      src: 'fake-src',\n      default: 'fake-default',\n      defaultMale: 'fake-default-male',\n      defaultFemale: 'fake-default-female',\n    };\n  });\n\n  it('allows to add custom classes', () => {\n    const wrapper = shallow(<Avatar className=\"aClass\" />);\n    expect(wrapper).to.have.descendants('.aClass');\n  });\n\n  it('shows provided src', () => {\n    const wrapper = shallow(<Avatar src=\"fake-src\" />);\n    expect(wrapper).to.have.style('background-image', 'url(\"fake-src\")');\n  });\n\n  it('assigns two background images, in case the src is broken', () => {\n    const wrapper = shallow(<Avatar {...props} />);\n    expect(wrapper).to.have.style('background-image', 'url(\"fake-src\"), url(\"fake-default\")');\n  });\n\n  describe('when src is not provided', () => {\n    beforeEach(() => {\n      props.src = undefined;\n    });\n\n    it('shows the default image for males', () => {\n      const wrapper = shallow(<Avatar {...props} gender=\"male\" />);\n      expect(wrapper).to.have.style('background-image', 'url(\"fake-default-male\")');\n    });\n\n    it('shows the default image for females', () => {\n      const wrapper = shallow(<Avatar {...props} gender=\"female\" />);\n      expect(wrapper).to.have.style('background-image', 'url(\"fake-default-female\")');\n    });\n\n    it('shows the default image if no gender is provided', () => {\n      const wrapper = shallow(<Avatar {...props} />);\n      expect(wrapper).to.have.style('background-image', 'url(\"fake-default\")');\n    });\n\n    context('shows an SVG-based avatar containing the users initials (when enabled via prop)', () => {\n      it('happy path', () => {\n        const wrapper = shallow(<Avatar {...props}\n            userFirstName=\"Joe\"\n            userLastName=\"Bloggs\"\n            displayUserInitialsAsDefaultAvatar />);\n        expect(wrapper).to.have.attr('style', `background-image:url(\"${bloggsInitialsAvatarUri}\");`);\n      });\n\n      it('happy path - colour spec correctness check', () => {\n        const wrapper = shallow(<Avatar {...props}\n            userFirstName=\"Kelly\"\n            displayUserInitialsAsDefaultAvatar />);\n        expect(wrapper).to.have.attr('style', `background-image:url(\"${redInitialsAvatarUri}\");`);\n      });\n\n      it('containing \"??\" when user name is blank', () => {\n        const wrapper = shallow(<Avatar {...props}\n            userFirstName=\"\"\n            userLastName=\"\"\n            displayUserInitialsAsDefaultAvatar />);\n        expect(wrapper).to.have.attr('style', `background-image:url(\"${unknownInitialsAvatarUri}\");`);\n      });\n\n      it('containing \"??\" when user name is absent', () => {\n        const wrapper = shallow(<Avatar {...props}\n            displayUserInitialsAsDefaultAvatar />);\n        expect(wrapper).to.have.attr('style', `background-image:url(\"${unknownInitialsAvatarUri}\");`);\n      });\n\n      it('containing \"??\" when user name is a non-string value', () => {\n        const wrapper = shallow(<Avatar {...props}\n            userFirstName={null}\n            userLastName={0}\n            displayUserInitialsAsDefaultAvatar />);\n        expect(wrapper).to.have.attr('style', `background-image:url(\"${unknownInitialsAvatarUri}\");`);\n      });\n    });\n  });\n});\n"]}