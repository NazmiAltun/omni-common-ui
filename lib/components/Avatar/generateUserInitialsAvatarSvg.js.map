{"version":3,"sources":["components/Avatar/generateUserInitialsAvatarSvg.js"],"names":["COLOR_SPECS","nameRegexp","bgFill","textFill","convertSvgToDataUri","html","data","replace","match","charCodeAt","toString","toUpperCase","trim","generatePlaceholderSvgXml","userFirstName","userLastName","forcedBgFill","forcedTextFill","userFirstNameOrEmpty","string","not","empty","userLastNameOrEmpty","userFirstInitial","charAt","userLastInitial","colorSpec","find","m","test","generatePlaceholderSvgDataUri"],"mappings":";;;;;;;AAAA;;;;;;AAEA,IAAMA,cAAc,CAAC;AACnBC,cAAY,SADO;AAEnBC,UAAQ,SAFW;AAGnBC,YAAU;AAHS,CAAD,EAIjB;AACDF,cAAY,SADX;AAEDC,UAAQ,SAFP;AAGDC,YAAU;AAHT,CAJiB,EAQjB;AACDF,cAAY,SADX;AAEDC,UAAQ,SAFP;AAGDC,YAAU;AAHT,CARiB,EAYjB;AACDF,cAAY,SADX;AAEDC,UAAQ,SAFP;AAGDC,YAAU;AAHT,CAZiB,EAgBjB;AACDF,cAAY,SADX;AAEDC,UAAQ,SAFP;AAGDC,YAAU;AAHT,CAhBiB,EAoBjB;AACDF,cAAY,SADX;AAEDC,UAAQ,SAFP;AAGDC,YAAU;AAHT,CApBiB,EAwBjB;AACDF,cAAY,SADX;AAEDC,UAAQ,SAFP;AAGDC,YAAU;AAHT,CAxBiB,CAApB;;AA8BA;AACA;AACA,IAAMC,sBAAsB,SAAtBA,mBAAsB,CAACC,IAAD,EAAU;AACpC,MAAIC,OAAOD,KACRE,OADQ,CACA,KADA,EACO,EADP,EAERA,OAFQ,CAEA,IAFA,EAEM,GAFN,EAGRA,OAHQ,CAGA,MAHA,EAGQ,GAHR,EAIRA,OAJQ,CAIA,wBAJA,EAI0B,UAACC,KAAD;AAAA,WACjC,MAAMA,MAAM,CAAN,EAASC,UAAT,CAAoB,CAApB,EAAuBC,QAAvB,CAAgC,EAAhC,EAAoCC,WAApC,EAD2B;AAAA,GAJ1B,CAAX;AAMAL,SAAO,qCAAqCA,KAAKM,IAAL,EAA5C;AACA,SAAON,IAAP;AACD,CATD;AAUA;;AAEO,IAAMO,gEAA4B,SAA5BA,yBAA4B,CAACC,aAAD,EAAgBC,YAAhB,EACrCC,YADqC,EACvBC,cADuB,EACJ;AACnC,MAAMC,uBACF,gBAAGC,MAAH,CAAUL,aAAV,KAA4B,gBAAGM,GAAH,CAAOC,KAAP,CAAaP,aAAb,CAA5B,GAA0DA,aAA1D,GAA0E,GAD9E;AAEA,MAAMQ,sBACF,gBAAGH,MAAH,CAAUJ,YAAV,KAA2B,gBAAGK,GAAH,CAAOC,KAAP,CAAaN,YAAb,CAA3B,GAAwDA,YAAxD,GAAuE,GAD3E;AAEA,MAAMQ,mBAAmBL,qBAAqBM,MAArB,CAA4B,CAA5B,EAA+Bb,WAA/B,EAAzB;AACA,MAAMc,kBAAkBH,oBAAoBE,MAApB,CAA2B,CAA3B,EAA8Bb,WAA9B,EAAxB;AACA,MAAMe,YAAY1B,YAAY2B,IAAZ,CAAiB,UAACC,CAAD;AAAA,WAAOA,EAAE3B,UAAF,CAAa4B,IAAb,CAAkBX,oBAAlB,CAAP;AAAA,GAAjB,KAAoE,EAAtF;AACA;AACA,6IAC2CF,gBAAgBU,UAAUxB,MAA1B,IAAoC,MAD/E,gCAEgBe,kBAAkBS,UAAUvB,QAA5B,IAAwC,MAFxD,6KAQMoB,oBAAoB,GAR1B,KAQgCE,mBAAmB,GARnD;AAWD,CArBM;;AAuBA,IAAMK,wEAAgC,SAAhCA,6BAAgC,CAAChB,aAAD,EAAgBC,YAAhB,EACzCC,YADyC,EAC3BC,cAD2B;AAAA,SAE3Cb,oBACES,0BAA0BC,aAA1B,EAAyCC,YAAzC,EACIC,YADJ,EACkBC,cADlB,CADF,CAF2C;AAAA,CAAtC;;kBAMQa,6B","file":"generateUserInitialsAvatarSvg.js","sourcesContent":["import is from 'is_js';\n\nconst COLOR_SPECS = [{\n  nameRegexp: /^[A-D]/i,\n  bgFill: '#59295A',\n  textFill: 'white',\n}, {\n  nameRegexp: /^[E-H]/i,\n  bgFill: '#92205F',\n  textFill: 'white',\n}, {\n  nameRegexp: /^[I-L]/i,\n  bgFill: '#D8213A',\n  textFill: 'white',\n}, {\n  nameRegexp: /^[M-P]/i,\n  bgFill: '#E9852C',\n  textFill: 'white',\n}, {\n  nameRegexp: /^[Q-T]/i,\n  bgFill: '#FBCB22',\n  textFill: 'black',\n}, {\n  nameRegexp: /^[U-X]/i,\n  bgFill: '#00773F',\n  textFill: 'white',\n}, {\n  nameRegexp: /^[Y-Z]/i,\n  bgFill: '#1C8FC2',\n  textFill: 'white',\n}];\n\n// https://github.com/bhovhannes/svg-url-loader/blob/4bfa8519/index.js\n/* eslint-disable */\nconst convertSvgToDataUri = (html) => {\n  let data = html\n    .replace(/\\n/g, '')\n    .replace(/\"/g, \"'\")\n    .replace(/\\s+/g, \" \")\n    .replace(/[{}\\|\\\\\\^~\\[\\]`\"<>#%]/g, (match) =>\n      '%' + match[0].charCodeAt(0).toString(16).toUpperCase());\n  data = 'data:image/svg+xml;charset=utf8,' + data.trim();\n  return data;\n};\n/* eslint-enable */\n\nexport const generatePlaceholderSvgXml = (userFirstName, userLastName,\n    forcedBgFill, forcedTextFill) => {\n  const userFirstNameOrEmpty =\n      is.string(userFirstName) && is.not.empty(userFirstName) ? userFirstName : '?';\n  const userLastNameOrEmpty =\n      is.string(userLastName) && is.not.empty(userLastName) ? userLastName : '?';\n  const userFirstInitial = userFirstNameOrEmpty.charAt(0).toUpperCase();\n  const userLastInitial = userLastNameOrEmpty.charAt(0).toUpperCase();\n  const colorSpec = COLOR_SPECS.find((m) => m.nameRegexp.test(userFirstNameOrEmpty)) || {};\n  // `dy` ref: http://stackoverflow.com/a/31376501\n  return `<svg height=\"100%\" width=\"100%\" xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\">\n    <rect width=\"100%\" height=\"100%\" fill=\"${forcedBgFill || colorSpec.bgFill || '#FFF'}\" />\n    <text fill=\"${forcedTextFill || colorSpec.textFill || '#000'}\"\n        font-size=\"14px\"\n        font-weight=\"bold\"\n        font-family=\"Helvetica\"\n        text-anchor=\"middle\"\n        x=\"50%\" y=\"50%\" dy=\".35em\">\n      ${userFirstInitial || '?'}${userLastInitial || '?'}\n    </text>\n  </svg>`;\n};\n\nexport const generatePlaceholderSvgDataUri = (userFirstName, userLastName,\n    forcedBgFill, forcedTextFill) =>\n  convertSvgToDataUri(\n    generatePlaceholderSvgXml(userFirstName, userLastName,\n        forcedBgFill, forcedTextFill));\n\nexport default generatePlaceholderSvgDataUri;\n"]}