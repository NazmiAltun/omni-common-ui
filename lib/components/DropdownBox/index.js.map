{"version":3,"sources":["components/DropdownBox/index.jsx"],"names":["AlignmentClasses","__alignRightFromBottom","__alignLeftFromBottom","__alignLeftFromTop","__alignBottomFromLeft","isElementVisible","el","viewportWidth","window","innerWidth","document","documentElement","clientWidth","viewportHeight","innerHeight","clientHeight","rect","getBoundingClientRect","right","bottom","left","top","contains","elementFromPoint","width","height","isDropdownOptionsFullyVisible","children","length","firstChildEl","lastChildEl","DropdownBox","props","_onRef","bind","getComputedStyle","position","alignmentClassesToTry","concat","alignmentClassToTry","lastAlignmentClassTried","shift","classList","add","remove","className","open","smartPosition","DropdownBox_transitionWrapper","Children","toArray","filter","child","type","propTypes","node","string","bool","Item","Container"],"mappings":"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","file":"index.js","sourcesContent":["import styles from './style.postcss';\n\nimport React, { PureComponent } from 'react';\nimport classnames from 'classnames';\nimport DropdownBoxItem from './DropdownBoxItem';\nimport DropdownBoxContainer from './DropdownBoxContainer';\nimport CSSTransitionGroup from 'react-transition-group/CSSTransitionGroup';\nimport PropTypes from 'prop-types';\n\nconst AlignmentClasses = [\n  styles.__alignRightFromBottom,\n  styles.__alignLeftFromBottom,\n  styles.__alignLeftFromTop,\n  styles.__alignBottomFromLeft,  // default\n  styles.__alignRightFromBottom, // fallback when space is limited in single student group\n];\n\nconst isElementVisible = (el) => {\n  const viewportWidth = window.innerWidth || document.documentElement.clientWidth;\n  const viewportHeight = window.innerHeight || document.documentElement.clientHeight;\n  const rect = el.getBoundingClientRect();\n\n  // is it in the viewport?\n  if (rect.right < 0 || rect.bottom < 0 ||\n        rect.left > viewportWidth || rect.top > viewportHeight) {\n    return false;\n  }\n\n  // we can just check visibility of three points here (left, centre, right)\n  // if we just check the centre the right side might be clipped off. other scenarios seem OK.\n  return (\n    // centre\n    el.contains(\n      document.elementFromPoint(\n        rect.right - (rect.width / 2),\n        rect.bottom - (rect.height / 2)))) &&\n    // left\n    el.contains(\n      document.elementFromPoint(\n        rect.left + 1,\n        rect.bottom - (rect.height / 2))) &&\n    // right\n    el.contains(\n      document.elementFromPoint(\n        rect.right - 1,\n        rect.bottom - (rect.height / 2)));\n};\n\nconst isDropdownOptionsFullyVisible = (el) => {\n  if (! el.children || el.children.length < 2) {\n    return isElementVisible(el);\n  }\n  // check the visibility of first and last dropdown items\n  const firstChildEl = el.children[0];\n  const lastChildEl = el.children[el.children.length - 1];\n  return isElementVisible(firstChildEl) && isElementVisible(lastChildEl);\n};\n\nclass DropdownBox extends PureComponent {\n  constructor(props) {\n    super(props);\n    this._onRef = this._onRef.bind(this);\n  }\n\n  _onRef(el) {\n    if (! el || getComputedStyle(el).position !== 'absolute') return;\n    // run through alignments until we get one that looks good\n    const alignmentClassesToTry = AlignmentClasses.concat();  // clone\n    let alignmentClassToTry;\n    let lastAlignmentClassTried;\n    while (alignmentClassesToTry.length && ! isDropdownOptionsFullyVisible(el)) {\n      alignmentClassToTry = alignmentClassesToTry.shift();\n      el.classList.add(alignmentClassToTry);\n      if (lastAlignmentClassTried) el.classList.remove(lastAlignmentClassTried);\n      lastAlignmentClassTried = alignmentClassToTry;\n    }\n  }\n\n  render() {\n    const { className, children, open, smartPosition } = this.props;\n    return <CSSTransitionGroup transitionName=\"dropdown\">\n      {\n        open === true &&\n        <div className={styles.DropdownBox_transitionWrapper}>\n          <div className={classnames(styles.DropdownBox, className)}\n              ref={smartPosition && this._onRef}>\n            {React.Children.toArray(children).filter((child) => child.type === DropdownBoxItem)}\n          </div>\n        </div>\n      }\n    </CSSTransitionGroup>;\n  }\n}\n\nDropdownBox.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n  open: PropTypes.bool,\n  smartPosition: PropTypes.bool,\n};\n\nDropdownBox.Item = DropdownBoxItem;\nDropdownBox.Container = DropdownBoxContainer;\n\nexport default DropdownBox;\n"]}