{"version":3,"sources":["components/HorizontalScroll/index.jsx"],"names":["baseOptions","deceleration","bounce","scrollX","scrollY","scrollbars","interactiveScrollbars","eventPassthrough","keyBindings","mouseWheel","HorizontalScroll","props","state","isScrolling","_onBeforeScrollStart","bind","_onScrollCancelOrEnd","_onScrollRefresh","onScrollReady","isOnScrollReadySet","function","hostNode","withIScroll","scroll","_scrollToElement","prevProps","prevState","scrollToElement","isScrollToElementSet","object","selector","duration","offsetX","offsetY","easing","number","setState","_iScroll","hasScroll","x","maxScrollX","className","innerClassName","iScrollClasses","HorizontalScroll_iScroll","__hasScroll","__scrolling","node","children","propTypes","string","func","shape","isRequired"],"mappings":"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","file":"index.js","sourcesContent":["import styles from './style.postcss';\nimport React, { PureComponent } from 'react';\n\nimport ReactIScroll from 'react-iscroll';\nimport iScroll from 'iscroll';\nimport classnames from 'classnames';\nimport is from 'is_js';\nimport PropTypes from 'prop-types';\n\nconst baseOptions = {\n  deceleration: 0.01,\n  bounce: false,\n  scrollX: true,\n  scrollY: false,\n  scrollbars: true,\n  interactiveScrollbars: true,\n  eventPassthrough: true,\n  keyBindings: true,\n  mouseWheel: true,\n};\n\nclass HorizontalScroll extends PureComponent {\n  constructor(props) {\n    super(props);\n    this.state = { isScrolling: false };\n    this._onBeforeScrollStart = this._onBeforeScrollStart.bind(this);\n    this._onScrollCancelOrEnd = this._onScrollCancelOrEnd.bind(this);\n    this._onScrollRefresh = this._onScrollRefresh.bind(this);\n  }\n\n  componentDidMount() {\n    const { onScrollReady } = this.props;\n    const isOnScrollReadySet = is.function(onScrollReady);\n    if (isOnScrollReadySet) {\n      this.hostNode.withIScroll(true, (scroll) => {\n        isOnScrollReadySet && onScrollReady(scroll);\n      });\n    }\n    this._scrollToElement();\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    // if update was a user scroll don't do the auto scroll to element\n    if (this.state.isScrolling !== prevState.isScrolling) return;\n    this._scrollToElement();\n  }\n\n  _scrollToElement() {\n    const { scrollToElement } = this.props;\n    const isScrollToElementSet = is.object(scrollToElement);\n    if (isScrollToElementSet) {\n      this.hostNode.withIScroll(true, (scroll) => {\n        const { selector, duration, offsetX, offsetY, easing } = scrollToElement;\n        scroll.scrollToElement(\n            selector,\n            duration,\n            is.number(offsetX) ? offsetX : true,\n            is.number(offsetY) ? offsetY : true,\n            easing);\n      });\n    }\n  }\n\n  _onBeforeScrollStart() {\n    this.setState({ isScrolling: true });\n  }\n\n  _onScrollCancelOrEnd() {\n    this.setState({ isScrolling: false });\n  }\n\n  _onScrollRefresh(_iScroll) {\n    this.setState({ hasScroll: ! (_iScroll.x === _iScroll.maxScrollX && _iScroll.x === 0) });\n  }\n\n  render() {\n    const { className, innerClassName } = this.props;\n    const iScrollClasses = classnames(styles.HorizontalScroll_iScroll, innerClassName, {\n      [styles.__hasScroll]: !! this.state.hasScroll,\n      [styles.__scrolling]: !! this.state.isScrolling,\n    });\n\n    return <div className={classnames(styles.HorizontalScroll, className)}>\n      <ReactIScroll className={iScrollClasses}\n          iScroll={iScroll}\n          options={baseOptions}\n          ref={(node) => { this.hostNode = node; }}\n          onBeforeScrollStart={this._onBeforeScrollStart}\n          onScrollCancel={this._onScrollCancelOrEnd}\n          onScrollEnd={this._onScrollCancelOrEnd}\n          onRefresh={this._onScrollRefresh}>\n        {this.props.children}\n      </ReactIScroll>\n    </div>;\n  }\n}\n\nHorizontalScroll.propTypes = {\n  className: PropTypes.string,\n  innerClassName: PropTypes.string,\n  children: PropTypes.node,\n  onScrollReady: PropTypes.func,\n  scrollToElement: PropTypes.shape({\n    selector: PropTypes.string.isRequired,\n    duration: PropTypes.number,\n    offsetX: PropTypes.number,\n    offsetY: PropTypes.number,\n    easing: PropTypes.object,\n  }),\n};\n\nexport default HorizontalScroll;\n"]}