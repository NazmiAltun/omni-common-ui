{"version":3,"sources":["components/HorizontalScroll/spec.jsx"],"names":["jest","mock","fn","require","PureComponent","Mock","_","callback","scrollToElement","beforeEach","resetAllMocks","test","child","expect","contains","toBe","done","assertions","onScrollReady","toHaveBeenCalled","scrollToElementParams","selector","duration","offsetX","offsetY","toEqual","wrapper","find","__scrolling","toHaveLength","setState","isScrolling","spy","spyOn","prototype","HorizontalScroll_iScroll","prop","instance","_onBeforeScrollStart","toHaveBeenCalledWith","mockRestore"],"mappings":"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","file":"spec.js","sourcesContent":["import styles from './style.postcss';\n\nimport React from 'react';\nimport { shallow, mount } from 'enzyme';\nimport HorizontalScroll from './';\nimport ReactIScrollMock from 'react-iscroll';\n\njest.mock('iscroll', () => jest.fn());\njest.mock('react-iscroll', () => {\n  const { PureComponent } = require('react');\n\n  class Mock extends PureComponent {\n    withIScroll(_, callback) {\n      // eslint-disable-next-line new-cap, react/prop-types, react/no-find-dom-node\n      callback({ scrollToElement: Mock.scrollToElement });\n    }\n\n    render() {\n      return null;\n    }\n  }\n\n  Mock.scrollToElement = jest.fn();\n\n  return Mock;\n});\n\nbeforeEach(() => {\n  jest.resetAllMocks();\n});\n\ntest('renders its children', () => {\n  const child = <div id=\"inner\" />;\n  expect(shallow(<HorizontalScroll>{child}</HorizontalScroll>).contains(child)).toBe(true);\n});\n\ntest('calls property onScrollReady with an instance of iScroll', (done) => {\n  expect.assertions(1);\n  const onScrollReady = jest.fn(() => {\n    expect(onScrollReady).toHaveBeenCalled();\n    done();\n  });\n\n  mount(<HorizontalScroll onScrollReady={onScrollReady}><div /></HorizontalScroll>);\n});\n\ntest('calls iScroll.scrollToElement with the given scrollToElement parameters', (done) => {\n  expect.assertions(1);\n  const scrollToElementParams = {\n    selector: 'div',\n    duration: 100,\n    offsetX: 10,\n  };\n\n  ReactIScrollMock.scrollToElement = (selector, duration, offsetX, offsetY) => {  // eslint-disable-line\n    expect({ selector, duration, offsetX, offsetY })\n        .toEqual({\n          offsetY: true,  // `offsetX` and `offsetY` default to true (centre in viewport)\n          ...scrollToElementParams,\n        });\n    done();\n  };\n\n  mount(<HorizontalScroll scrollToElement={scrollToElementParams}><div /></HorizontalScroll>);\n});\n\ntest('sets the __scrolling styles while in the isScrolling state', () => {\n  const wrapper = shallow(<HorizontalScroll><div /></HorizontalScroll>);\n  expect(wrapper.find(`.${styles.__scrolling}`)).toHaveLength(0);\n  wrapper.setState({ isScrolling: true });\n  expect(wrapper.find(`.${styles.__scrolling}`)).toHaveLength(1);\n});\n\ntest('goes into isScrolling state while scrolling', () => {\n  const spy = jest.spyOn(HorizontalScroll.prototype, 'setState');\n  const wrapper = shallow(<HorizontalScroll><div /></HorizontalScroll>);\n\n  expect(wrapper.find(`.${styles.HorizontalScroll_iScroll}`).prop('onBeforeScrollStart')).toBe(wrapper.instance()._onBeforeScrollStart);\n\n  wrapper.instance()._onBeforeScrollStart();\n\n  expect(spy).toHaveBeenCalledWith({ isScrolling: true });\n\n  spy.mockRestore();\n});\n"]}