{"version":3,"sources":["components/Grid/Group/spec.jsx"],"names":["describe","options","beforeEach","context","grid","wrapper","it","contains","to","be","true","find","have","length","not","throw"],"mappings":";;AAAA;;;;AACA;;AACA;;AACA;;;;AACA;;;;;;AAEAA,SAAS,MAAT,EAAiB,YAAM;AACrB,MAAIC,gBAAJ;;AAEAC,aAAW,YAAM;AACfD,cAAU,EAAEE,SAAS,EAAEC,MAAM,EAAR,EAAX,EAAV;AACD,GAFD;;AAIAJ,WAAS,OAAT,EAAkB,YAAM;AACtBA,aAAS,uBAAT,EAAkC,YAAM;AACtC,UAAIK,gBAAJ;;AAEAH,iBAAW,YAAM;AACfG,kBAAU,qBAAQ;AAAA;AAAA;AAAO,iDAAK,IAAG,OAAR;AAAP,SAAR,EAA2CJ,OAA3C,CAAV;AACD,OAFD;;AAIAK,SAAG,YAAH,EAAiB,YAAM;AACrB,0BAAOD,QAAQE,QAAR,CAAiB,uCAAK,IAAG,OAAR,GAAjB,CAAP,EAA6CC,EAA7C,CAAgDC,EAAhD,CAAmDC,IAAnD;AACD,OAFD;;AAIAJ,SAAG,yCAAH,EAA8C,YAAM;AAClD,0BAAOD,QAAQM,IAAR,gBAAP,EAA2BH,EAA3B,CAA8BI,IAA9B,CAAmCC,MAAnC,CAA0C,CAA1C;AACD,OAFD;;AAIAP,SAAG,oCAAH,EAAyC,YAAM;AAC7C,6BAAQ;AAAA;AAAA;AAAO;AAAA;AAAA;AAAM,mDAAK,IAAG,OAAR;AAAN;AAAP,SAAR,EAAwDL,OAAxD;AACA,0BAAOI,QAAQM,IAAR,gBAAP,EAA2BH,EAA3B,CAA8BI,IAA9B,CAAmCC,MAAnC,CAA0C,CAA1C;AACD,OAHD;;AAKAP,SAAG,4CAAH,EAAiD,YAAM;AACrD,0BAAO;AAAA,iBAAM,qBAAQ,+CAAR,EAAmBL,OAAnB,CAAN;AAAA,SAAP,EAA0CO,EAA1C,CAA6CM,GAA7C,CAAiDC,KAAjD;AACD,OAFD;;AAIAT,SAAG,gDAAH,EAAqD,YAAM;AACzD,0BAAO;AAAA,iBAAM,qBAAQ;AAAA;AAAA;AAAO,sDAAP;AAAe;AAAf,WAAR,EAAsCL,OAAtC,CAAN;AAAA,SAAP,EAA6DO,EAA7D,CAAgEM,GAAhE,CAAoEC,KAApE;AACD,OAFD;AAGD,KA3BD;;AA6BAf,aAAS,8BAAT,EAAyC,YAAM;AAC7C,UAAIK,gBAAJ;;AAEAH,iBAAW,YAAM;AACfG,kBAAU,qBAAQ;AAAA;AAAA;AAAO,iDAAK,IAAG,QAAR,GAAP;AAA0B,iDAAK,IAAG,QAAR;AAA1B,SAAR,EAA+DJ,OAA/D,CAAV;AACD,OAFD;;AAIAK,SAAG,cAAH,EAAmB,YAAM;AACvB,0BAAOD,QAAQE,QAAR,CAAiB,uCAAK,IAAG,QAAR,GAAjB,CAAP,EAA8CC,EAA9C,CAAiDC,EAAjD,CAAoDC,IAApD;AACA,0BAAOL,QAAQE,QAAR,CAAiB,uCAAK,IAAG,QAAR,GAAjB,CAAP,EAA8CC,EAA9C,CAAiDC,EAAjD,CAAoDC,IAApD;AACD,OAHD;;AAKAJ,SAAG,8CAAH,EAAmD,YAAM;AACvD,0BAAOD,QAAQM,IAAR,gBAAP,EAA2BH,EAA3B,CAA8BI,IAA9B,CAAmCC,MAAnC,CAA0C,CAA1C;AACD,OAFD;;AAIAP,SAAG,0CAAH,EAA+C,YAAM;AACnD,6BAAQ;AAAA;AAAA;AACN,iDAAK,IAAG,QAAR,GADM;AAEN;AAAA;AAAA;AAAM,mDAAK,IAAG,QAAR;AAAN;AAFM,SAAR,EAGUL,OAHV;AAIA,0BAAOI,QAAQM,IAAR,gBAAP,EAA2BH,EAA3B,CAA8BI,IAA9B,CAAmCC,MAAnC,CAA0C,CAA1C;AACD,OAND;AAOD,KAvBD;AAwBD,GAtDD;AAuDD,CA9DD","file":"spec.js","sourcesContent":["import React from 'react';\nimport { shallow } from 'enzyme';\nimport { expect } from 'chai';\nimport Group from './';\nimport Item from '../Item';\n\ndescribe('Grid', () => {\n  let options;\n\n  beforeEach(() => {\n    options = { context: { grid: {} } };\n  });\n\n  describe('Group', () => {\n    describe('when it has one child', () => {\n      let wrapper;\n\n      beforeEach(() => {\n        wrapper = shallow(<Group><div id=\"child\" /></Group>, options);\n      });\n\n      it('renders it', () => {\n        expect(wrapper.contains(<div id=\"child\" />)).to.be.true;\n      });\n\n      it('wraps it with Item if it is not an Item', () => {\n        expect(wrapper.find(Item)).to.have.length(1);\n      });\n\n      it('wraps it only if it is not an Item', () => {\n        shallow(<Group><Item><div id=\"child\" /></Item></Group>, options);\n        expect(wrapper.find(Item)).to.have.length(1);\n      });\n\n      it('does not crash if no children are provided', () => {\n        expect(() => shallow(<Group />, options)).to.not.throw();\n      });\n\n      it('does not crash if an invalid child is provided', () => {\n        expect(() => shallow(<Group><div />{null}</Group>, options)).to.not.throw();\n      });\n    });\n\n    describe('when it has several children', () => {\n      let wrapper;\n\n      beforeEach(() => {\n        wrapper = shallow(<Group><div id=\"child1\" /><div id=\"child2\" /></Group>, options);\n      });\n\n      it('renders them', () => {\n        expect(wrapper.contains(<div id=\"child1\" />)).to.be.true;\n        expect(wrapper.contains(<div id=\"child2\" />)).to.be.true;\n      });\n\n      it('wraps them with Item if they are not an Item', () => {\n        expect(wrapper.find(Item)).to.have.length(2);\n      });\n\n      it('wraps only children that are not an Item', () => {\n        shallow(<Group>\n          <div id=\"child1\" />\n          <Item><div id=\"child2\" /></Item>\n        </Group>, options);\n        expect(wrapper.find(Item)).to.have.length(2);\n      });\n    });\n  });\n});\n"]}