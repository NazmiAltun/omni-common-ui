{"version":3,"sources":["components/Grid/Group/spec.jsx"],"names":["options","beforeEach","context","grid","describe","wrapper","test","expect","contains","toBe","find","toHaveLength","not","toThrowError"],"mappings":";;AAAA;;;;AACA;;AACA;;;;AACA;;;;;;AAEA,IAAIA,gBAAJ;;AAEAC,WAAW,YAAM;AACfD,YAAU,EAAEE,SAAS,EAAEC,MAAM,EAAR,EAAX,EAAV;AACD,CAFD;;AAIAC,SAAS,uBAAT,EAAkC,YAAM;AACtC,MAAIC,gBAAJ;;AAEAJ,aAAW,YAAM;AACfI,cAAU,qBAAQ;AAAA;AAAA;AAAO,6CAAK,IAAG,OAAR;AAAP,KAAR,EAA2CL,OAA3C,CAAV;AACD,GAFD;;AAIAM,OAAK,YAAL,EAAmB,YAAM;AACvBC,WAAOF,QAAQG,QAAR,CAAiB,uCAAK,IAAG,OAAR,GAAjB,CAAP,EAA6CC,IAA7C,CAAkD,IAAlD;AACD,GAFD;;AAIAH,OAAK,yCAAL,EAAgD,YAAM;AACpDC,WAAOF,QAAQK,IAAR,gBAAP,EAA2BC,YAA3B,CAAwC,CAAxC;AACD,GAFD;;AAIAL,OAAK,oCAAL,EAA2C,YAAM;AAC/C,yBAAQ;AAAA;AAAA;AAAO;AAAA;AAAA;AAAM,+CAAK,IAAG,OAAR;AAAN;AAAP,KAAR,EAAwDN,OAAxD;AACAO,WAAOF,QAAQK,IAAR,gBAAP,EAA2BC,YAA3B,CAAwC,CAAxC;AACD,GAHD;;AAKAL,OAAK,4CAAL,EAAmD,YAAM;AACvDC,WAAO;AAAA,aAAM,qBAAQ,+CAAR,EAAmBP,OAAnB,CAAN;AAAA,KAAP,EAA0CY,GAA1C,CAA8CC,YAA9C;AACD,GAFD;;AAIAP,OAAK,gDAAL,EAAuD,YAAM;AAC3DC,WAAO;AAAA,aAAM,qBAAQ;AAAA;AAAA;AAAO,kDAAP;AAAe;AAAf,OAAR,EAAsCP,OAAtC,CAAN;AAAA,KAAP,EAA6DY,GAA7D,CAAiEC,YAAjE;AACD,GAFD;AAGD,CA3BD;;AA6BAT,SAAS,8BAAT,EAAyC,YAAM;AAC7C,MAAIC,gBAAJ;;AAEAJ,aAAW,YAAM;AACfI,cAAU,qBAAQ;AAAA;AAAA;AAAO,6CAAK,IAAG,QAAR,GAAP;AAA0B,6CAAK,IAAG,QAAR;AAA1B,KAAR,EAA+DL,OAA/D,CAAV;AACD,GAFD;;AAIAM,OAAK,cAAL,EAAqB,YAAM;AACzBC,WAAOF,QAAQG,QAAR,CAAiB,uCAAK,IAAG,QAAR,GAAjB,CAAP,EAA8CC,IAA9C,CAAmD,IAAnD;AACAF,WAAOF,QAAQG,QAAR,CAAiB,uCAAK,IAAG,QAAR,GAAjB,CAAP,EAA8CC,IAA9C,CAAmD,IAAnD;AACD,GAHD;;AAKAH,OAAK,8CAAL,EAAqD,YAAM;AACzDC,WAAOF,QAAQK,IAAR,gBAAP,EAA2BC,YAA3B,CAAwC,CAAxC;AACD,GAFD;;AAIAL,OAAK,0CAAL,EAAiD,YAAM;AACrD,yBAAQ;AAAA;AAAA;AACN,6CAAK,IAAG,QAAR,GADM;AAEN;AAAA;AAAA;AAAM,+CAAK,IAAG,QAAR;AAAN;AAFM,KAAR,EAGUN,OAHV;AAIAO,WAAOF,QAAQK,IAAR,gBAAP,EAA2BC,YAA3B,CAAwC,CAAxC;AACD,GAND;AAOD,CAvBD","file":"spec.js","sourcesContent":["import React from 'react';\nimport { shallow } from 'enzyme';\nimport Group from './';\nimport Item from '../Item';\n\nlet options;\n\nbeforeEach(() => {\n  options = { context: { grid: {} } };\n});\n\ndescribe('when it has one child', () => {\n  let wrapper;\n\n  beforeEach(() => {\n    wrapper = shallow(<Group><div id=\"child\" /></Group>, options);\n  });\n\n  test('renders it', () => {\n    expect(wrapper.contains(<div id=\"child\" />)).toBe(true);\n  });\n\n  test('wraps it with Item if it is not an Item', () => {\n    expect(wrapper.find(Item)).toHaveLength(1);\n  });\n\n  test('wraps it only if it is not an Item', () => {\n    shallow(<Group><Item><div id=\"child\" /></Item></Group>, options);\n    expect(wrapper.find(Item)).toHaveLength(1);\n  });\n\n  test('does not crash if no children are provided', () => {\n    expect(() => shallow(<Group />, options)).not.toThrowError();\n  });\n\n  test('does not crash if an invalid child is provided', () => {\n    expect(() => shallow(<Group><div />{null}</Group>, options)).not.toThrowError();\n  });\n});\n\ndescribe('when it has several children', () => {\n  let wrapper;\n\n  beforeEach(() => {\n    wrapper = shallow(<Group><div id=\"child1\" /><div id=\"child2\" /></Group>, options);\n  });\n\n  test('renders them', () => {\n    expect(wrapper.contains(<div id=\"child1\" />)).toBe(true);\n    expect(wrapper.contains(<div id=\"child2\" />)).toBe(true);\n  });\n\n  test('wraps them with Item if they are not an Item', () => {\n    expect(wrapper.find(Item)).toHaveLength(2);\n  });\n\n  test('wraps only children that are not an Item', () => {\n    shallow(<Group>\n      <div id=\"child1\" />\n      <Item><div id=\"child2\" /></Item>\n    </Group>, options);\n    expect(wrapper.find(Item)).toHaveLength(2);\n  });\n});\n"]}