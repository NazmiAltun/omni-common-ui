{"version":3,"sources":["components/ColourLabel/spec.jsx"],"names":["describe","test","wrapper","expect","html","toBe","find","ColourLabel_inner","text","toHaveLength","tooltip","prop"],"mappings":";;AAAA;;;;AAEA;;;;AACA;;AACA;;;;AACA;;;;AAEAA,SAAS,2CAAT,EAAsD,YAAM;AAC1DC,OAAK,iBAAL,EAAwB,YAAM;AAC5B,QAAMC,UAAU,qBAAQ,kDAAR,CAAhB;AACAC,WAAOD,QAAQE,IAAR,EAAP,EAAuBC,IAAvB,CAA4B,IAA5B;AACD,GAHD;AAID,CALD;;AAOAL,SAAS,8BAAT,EAAyC,YAAM;AAC7CC,OAAK,mCAAL,EAA0C,YAAM;AAC9C,QAAMC,UAAU,qBAAQ,+CAAa,MAAM,KAAnB,GAAR,CAAhB;AACAC,WAAOD,QAAQI,IAAR,OAAiB,gBAAOC,iBAAxB,EAA6CC,IAA7C,EAAP,EAA4DH,IAA5D,CAAiE,KAAjE;AACD,GAHD;AAID,CALD;;AAOAL,SAAS,0BAAT,EAAqC,YAAM;AACzCA,WAAS,2BAAT,EAAsC,YAAM;AAC1CC,SAAK,4DAAL,EAAmE,YAAM;AACvE,UAAMC,UAAU,qBAAQ,+CAAa,SAAS,GAAtB,GAAR,CAAhB;AACAC,aAAOD,QAAQI,IAAR,OAAiB,gBAAOC,iBAAxB,EAA6CC,IAA7C,EAAP,EAA4DH,IAA5D,CAAiE,GAAjE;AACAF,aAAOD,QAAQI,IAAR,mBAAP,EAA8BG,YAA9B,CAA2C,CAA3C;AACD,KAJD;AAKD,GAND;;AAQAT,WAAS,uBAAT,EAAkC,YAAM;AACtCC,SAAK,oEAAL,EAA2E,YAAM;AAC/E,UAAMC,UAAU,qBAAQ,+CAAa,SAAS,GAAtB,EAA2B,MAAM,SAAjC,GAAR,CAAhB;AACA,UAAMQ,UAAUR,QAAQI,IAAR,mBAAhB;AACAH,aAAOD,QAAQI,IAAR,OAAiB,gBAAOC,iBAAxB,EAA6CC,IAA7C,EAAP,EAA4DH,IAA5D,CAAiE,GAAjE;AACAF,aAAOO,OAAP,EAAgBD,YAAhB,CAA6B,CAA7B;AACAN,aAAOO,QAAQC,IAAR,CAAa,MAAb,CAAP,EAA6BN,IAA7B,CAAkC,SAAlC;AACD,KAND;AAOD,GARD;AASD,CAlBD","file":"spec.js","sourcesContent":["import styles from './style.postcss';\n\nimport React from 'react';\nimport { shallow } from 'enzyme';\nimport Tooltip from 'components/Tooltip';\nimport { ColourLabel } from './';\n\ndescribe('when neither initial nor text is provided', () => {\n  test('renders nothing', () => {\n    const wrapper = shallow(<ColourLabel />);\n    expect(wrapper.html()).toBe(null);\n  });\n});\n\ndescribe('when initial is not provided', () => {\n  test('renders a big label with the text', () => {\n    const wrapper = shallow(<ColourLabel text={'hey'} />);\n    expect(wrapper.find(`.${styles.ColourLabel_inner}`).text()).toBe('hey');\n  });\n});\n\ndescribe('when initial is provided', () => {\n  describe('when text is not provided', () => {\n    test('renders a small label with the initial without any tooltip', () => {\n      const wrapper = shallow(<ColourLabel initial={'h'} />);\n      expect(wrapper.find(`.${styles.ColourLabel_inner}`).text()).toBe('h');\n      expect(wrapper.find(Tooltip)).toHaveLength(0);\n    });\n  });\n\n  describe('when text is provided', () => {\n    test('renders a small label with the initial and a tooltip with the text', () => {\n      const wrapper = shallow(<ColourLabel initial={'h'} text={'on hold'} />);\n      const tooltip = wrapper.find(Tooltip);\n      expect(wrapper.find(`.${styles.ColourLabel_inner}`).text()).toBe('h');\n      expect(tooltip).toHaveLength(1);\n      expect(tooltip.prop('text')).toBe('on hold');\n    });\n  });\n});\n"]}