{"version":3,"sources":["components/ColourLabel/spec.jsx"],"names":["describe","context","it","wrapper","to","be","blank","find","ColourLabel_inner","have","text","length","tooltip","prop","equal"],"mappings":";;AAAA;;;;AAEA;;;;AACA;;AACA;;AACA;;;;AACA;;;;;;AAEAA,SAAS,iBAAT,EAA4B,YAAM;AAChCC,UAAQ,2CAAR,EAAqD,YAAM;AACzDC,OAAG,iBAAH,EAAsB,YAAM;AAC1B,UAAMC,UAAU,qBAAQ,+CAAR,CAAhB;AACA,wBAAOA,OAAP,EAAgBC,EAAhB,CAAmBC,EAAnB,CAAsBC,KAAtB;AACD,KAHD;AAID,GALD;;AAOAL,UAAQ,8BAAR,EAAwC,YAAM;AAC5CC,OAAG,mCAAH,EAAwC,YAAM;AAC5C,UAAMC,UAAU,qBAAQ,4CAAa,MAAM,KAAnB,GAAR,CAAhB;AACA,wBAAOA,QAAQI,IAAR,OAAiB,gBAAOC,iBAAxB,CAAP,EAAqDJ,EAArD,CAAwDK,IAAxD,CAA6DC,IAA7D,CAAkE,KAAlE;AACD,KAHD;AAID,GALD;;AAOAT,UAAQ,0BAAR,EAAoC,YAAM;AACxCA,YAAQ,2BAAR,EAAqC,YAAM;AACzCC,SAAG,4DAAH,EAAiE,YAAM;AACrE,YAAMC,UAAU,qBAAQ,4CAAa,SAAS,GAAtB,GAAR,CAAhB;AACA,0BAAOA,QAAQI,IAAR,OAAiB,gBAAOC,iBAAxB,CAAP,EAAqDJ,EAArD,CAAwDK,IAAxD,CAA6DC,IAA7D,CAAkE,GAAlE;AACA,0BAAOP,QAAQI,IAAR,mBAAP,EAA8BH,EAA9B,CAAiCK,IAAjC,CAAsCE,MAAtC,CAA6C,CAA7C;AACD,OAJD;AAKD,KAND;;AAQAV,YAAQ,uBAAR,EAAiC,YAAM;AACrCC,SAAG,oEAAH,EAAyE,YAAM;AAC7E,YAAMC,UAAU,qBAAQ,4CAAa,SAAS,GAAtB,EAA2B,MAAM,SAAjC,GAAR,CAAhB;AACA,YAAMS,UAAUT,QAAQI,IAAR,mBAAhB;AACA,0BAAOJ,QAAQI,IAAR,OAAiB,gBAAOC,iBAAxB,CAAP,EAAqDJ,EAArD,CAAwDK,IAAxD,CAA6DC,IAA7D,CAAkE,GAAlE;AACA,0BAAOE,OAAP,EAAgBR,EAAhB,CAAmBK,IAAnB,CAAwBE,MAAxB,CAA+B,CAA/B;AACA,0BAAOC,QAAQC,IAAR,CAAa,MAAb,CAAP,EAA6BT,EAA7B,CAAgCU,KAAhC,CAAsC,SAAtC;AACD,OAND;AAOD,KARD;AASD,GAlBD;AAmBD,CAlCD","file":"spec.js","sourcesContent":["import styles from './style.postcss';\n\nimport React from 'react';\nimport { expect } from 'chai';\nimport { shallow } from 'enzyme';\nimport ColourLabel from './';\nimport Tooltip from 'components/Tooltip';\n\ndescribe('<ColourLabel />', () => {\n  context('when neither initial nor text is provided', () => {\n    it('renders nothing', () => {\n      const wrapper = shallow(<ColourLabel />);\n      expect(wrapper).to.be.blank();\n    });\n  });\n\n  context('when initial is not provided', () => {\n    it('renders a big label with the text', () => {\n      const wrapper = shallow(<ColourLabel text={'hey'} />);\n      expect(wrapper.find(`.${styles.ColourLabel_inner}`)).to.have.text('hey');\n    });\n  });\n\n  context('when initial is provided', () => {\n    context('when text is not provided', () => {\n      it('renders a small label with the initial without any tooltip', () => {\n        const wrapper = shallow(<ColourLabel initial={'h'} />);\n        expect(wrapper.find(`.${styles.ColourLabel_inner}`)).to.have.text('h');\n        expect(wrapper.find(Tooltip)).to.have.length(0);\n      });\n    });\n\n    context('when text is provided', () => {\n      it('renders a small label with the initial and a tooltip with the text', () => {\n        const wrapper = shallow(<ColourLabel initial={'h'} text={'on hold'} />);\n        const tooltip = wrapper.find(Tooltip);\n        expect(wrapper.find(`.${styles.ColourLabel_inner}`)).to.have.text('h');\n        expect(tooltip).to.have.length(1);\n        expect(tooltip.prop('text')).to.equal('on hold');\n      });\n    });\n  });\n});\n"]}