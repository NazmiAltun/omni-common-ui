{"version":3,"sources":["domain/createNotificationsMiddleware/spec.js"],"names":["jest","mock","config","require","set","EventEmitter","instance","test","expect","function","toBe","strategy","dispatch","requestActionType","successActionType","failureActionType","apiUrl","toThrow","intervalMs","describe","done","method","middleware","getState","singleSignOn","user","access_token","arg","toEqual","actionObjectName","url","requestExtras","successExtras","failureExtras","mockTimer","emit","disableDefault"],"mappings":";;AAAA;;;;AACA;;AACA;;AACA;;;;;;AAEAA,KAAKC,IAAL;AACAD,KAAKC,IAAL,cAA2B,YAAM;AAC/B,MAAMC,SAASC,OAAT,uBAAN;AACA,SAAOD,OAAOE,GAAP,CAAW,SAAX,EAAsB,OAAtB,CAAP;AACD,CAHD;AAIAJ,KAAKC,IAAL,CAAU,SAAV,EAAqB,YAAM;AACzB,MAAMI,eAAeF,OAAf,iBAAN;AACA,MAAIG,iBAAJ;AACA,SAAO;AAAA,WAAMA,aAAaA,WAAW,IAAID,YAAJ,EAAxB,CAAN;AAAA,GAAP;AACD,CAJD;;AAMAE,KAAK,eAAL,EAAsB,YAAM;AAC1BC,SAAO,gBAAGC,QAAH,iCAAP,EAAmDC,IAAnD,CAAwD,IAAxD;AACD,CAFD;;AAIAH,KAAK,oBAAL,EAA2B,YAAM;AAC/B,MAAML,SAAS;AACbS,cAAU,OADG;AAEbC,cAAU;AACRC,yBAAmB,GADX;AAERC,yBAAmB,GAFX;AAGRC,yBAAmB,GAHX;AAIRC,cAAQ;AAJA;AAFG,GAAf;AASAR,SAAO,gBAAGC,QAAH,CAAY,qCAA8BP,MAA9B,CAAZ,CAAP,EAA2DQ,IAA3D,CAAgE,IAAhE;AACD,CAXD;;AAaAH,KAAK,oDAAL,EAA2D,YAAM;AAC/DC,SAAO,YAAM;AACX,QAAMN,SAAS;AACbS,gBAAU,gBADG;AAEbC,gBAAU;AACRC,2BAAmB,GADX;AAERC,2BAAmB,GAFX;AAGRC,2BAAmB,GAHX;AAIRC,gBAAQ;AAJA;AAFG,KAAf;AASA,yCAA8Bd,MAA9B;AACD,GAXD,EAWGe,OAXH;AAYD,CAbD;;AAeAV,KAAK,gEAAL,EAAuE,YAAM;AAC3EC,SAAO,YAAM;AACX,QAAMN,SAAS;AACbS,gBAAU,OADG;AAEbO,kBAAY,IAFC;AAGbN,gBAAU;AAHG,KAAf;AAKA,yCAA8BV,MAA9B;AACD,GAPD,EAOGe,OAPH;AAQD,CATD;;AAWAE,SAAS,iBAAT,EAA4B,YAAM;AAChCZ,OAAK,yCAAL,EAAgD,UAACa,IAAD,EAAU;AACxD,QAAMR,WAAW;AACfI,cAAQ,MADO;AAEfK,cAAQ;AAFO,KAAjB;AAIA,QAAMnB,SAAS;AACbS,gBAAU,OADG;AAEbO,kBAAY,KAFC;AAGbN;AAHa,KAAf;AAKA,QAAMU,aAAa,qCAA8BpB,MAA9B,CAAnB;AACAoB,eAAW;AACTC,gBAAU;AAAA,eAAM,mBAAQ;AACtBC,wBAAc;AACZC,kBAAM;AACJC,4BAAc;AADV;AADM;AADQ,SAAR,CAAN;AAAA,OADD;AAQTd,gBAAU,kBAACe,GAAD,EAAS;AACjBnB,eAAOmB,GAAP,EAAYC,OAAZ,CAAoB;AAClBC,4BAAkB,eADA;AAElBC,eAAK,WAFa;AAGlBT,kBAAQ,QAHU;AAIlBU,yBAAe,EAJG;AAKlBC,yBAAe,EALG;AAMlBC,yBAAe;AANG,SAApB;AAQAb;AACD;AAlBQ,KAAX,EAmBG,YAAM,CAAE,CAnBX;AAoBA,QAAMc,YAAY,qBAAlB;AACAA,cAAUC,IAAV,CAAe,cAAf;AACD,GAjCD;;AAmCA5B,OAAK,mDAAL,EAA0D,UAACa,IAAD,EAAU;AAClE,QAAMR,WAAW;AACfI,cAAQ,MADO;AAEfK,cAAQ,QAFO;AAGfe,sBAAgB;AAHD,KAAjB;AAKA,QAAMlC,SAAS;AACbS,gBAAU,OADG;AAEbO,kBAAY,KAFC;AAGbN;AAHa,KAAf;AAKA,QAAMU,aAAa,qCAA8BpB,MAA9B,CAAnB;AACAoB,eAAW;AACTC,gBAAU;AAAA,eAAM,mBAAQ;AACtBC,wBAAc;AACZC,kBAAM;AACJC,4BAAc;AADV;AADM;AADQ,SAAR,CAAN;AAAA,OADD;AAQTd,gBAAU,kBAACe,GAAD,EAAS;AACjBnB,eAAOmB,GAAP,EAAYC,OAAZ,CAAoB;AAClBC,4BAAkB,eADA;AAElBC,eAAK,WAFa;AAGlBT,kBAAQ,QAHU;AAIlBU,yBAAe,EAAEK,gBAAgB,IAAlB,EAJG;AAKlBJ,yBAAe,EAAEI,gBAAgB,IAAlB,EALG;AAMlBH,yBAAe,EAAEG,gBAAgB,IAAlB;AANG,SAApB;AAQAhB;AACD;AAlBQ,KAAX,EAmBG,YAAM,CAAE,CAnBX;AAoBA,QAAMc,YAAY,qBAAlB;AACAA,cAAUC,IAAV,CAAe,cAAf;AACD,GAlCD;AAmCD,CAvED","file":"spec.js","sourcesContent":["import is from 'is_js';\nimport { Map } from 'immutable';\nimport { createNotificationsMiddleware } from './';\nimport TimerStrategy from './timer';\n\njest.mock('domain/createApiActionCreator');\njest.mock('domain/Config', () => {\n  const config = require('domain/Config/__mocks__');\n  return config.set('apiBase', '/api/');\n});\njest.mock('./timer', () => {\n  const EventEmitter = require('event-emitter');\n  let instance;\n  return () => instance || (instance = new EventEmitter());\n});\n\ntest('is a function', () => {\n  expect(is.function(createNotificationsMiddleware)).toBe(true);\n});\n\ntest('returns a function', () => {\n  const config = {\n    strategy: 'timer',\n    dispatch: {\n      requestActionType: 'w',\n      successActionType: 'x',\n      failureActionType: 'y',\n      apiUrl: 'z',\n    },\n  };\n  expect(is.function(createNotificationsMiddleware(config))).toBe(true);\n});\n\ntest('throws an error when given strategy does not exist', () => {\n  expect(() => {\n    const config = {\n      strategy: '_non_existent_',\n      dispatch: {\n        requestActionType: 'w',\n        successActionType: 'x',\n        failureActionType: 'y',\n        apiUrl: 'z',\n      },\n    };\n    createNotificationsMiddleware(config);\n  }).toThrow();\n});\n\ntest('throws an error when a required config param failed validation', () => {\n  expect(() => {\n    const config = {\n      strategy: 'timer',\n      intervalMs: null,\n      dispatch: {},\n    };\n    createNotificationsMiddleware(config);\n  }).toThrow();\n});\n\ndescribe('action dispatch', () => {\n  test('dispatches action on start when enabled', (done) => {\n    const dispatch = {\n      apiUrl: 'path',\n      method: 'METHOD',\n    };\n    const config = {\n      strategy: 'timer',\n      intervalMs: 10000,\n      dispatch,\n    };\n    const middleware = createNotificationsMiddleware(config);\n    middleware({\n      getState: () => new Map({\n        singleSignOn: {\n          user: {\n            access_token: 'access_token',\n          },\n        },\n      }),\n      dispatch: (arg) => {\n        expect(arg).toEqual({\n          actionObjectName: 'NOTIFICATIONS',\n          url: '/api/path',\n          method: 'METHOD',\n          requestExtras: {},\n          successExtras: {},\n          failureExtras: {},\n        });\n        done();\n      },\n    })(() => {})();\n    const mockTimer = new TimerStrategy();\n    mockTimer.emit('notification');\n  });\n\n  test('dispatches action on start (disableDefault: true)', (done) => {\n    const dispatch = {\n      apiUrl: 'path',\n      method: 'METHOD',\n      disableDefault: true,\n    };\n    const config = {\n      strategy: 'timer',\n      intervalMs: 10000,\n      dispatch,\n    };\n    const middleware = createNotificationsMiddleware(config);\n    middleware({\n      getState: () => new Map({\n        singleSignOn: {\n          user: {\n            access_token: 'access_token',\n          },\n        },\n      }),\n      dispatch: (arg) => {\n        expect(arg).toEqual({\n          actionObjectName: 'NOTIFICATIONS',\n          url: '/api/path',\n          method: 'METHOD',\n          requestExtras: { disableDefault: true },\n          successExtras: { disableDefault: true },\n          failureExtras: { disableDefault: true },\n        });\n        done();\n      },\n    })(() => {})();\n    const mockTimer = new TimerStrategy();\n    mockTimer.emit('notification');\n  });\n});\n"]}