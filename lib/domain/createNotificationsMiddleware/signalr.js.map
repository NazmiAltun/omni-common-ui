{"version":3,"sources":["domain/createNotificationsMiddleware/signalr.js"],"names":["_log","line","method","SignalRStrategy","config","accessToken","string","hubUrl","hubName","incomingMethodName","replace","connection","qs","bearer_token","hubProxy","createHubProxy","on","emit","start","done","fail"],"mappings":";;;;;;;AAAA;;;;AACA;;;;AACA;;AACA;;;;AACA;;;;;;;;;;;;AAEA,IAAMA,OAAO,SAAPA,IAAO,CAACC,IAAD,EAA2B;AAAA,MAApBC,MAAoB,uEAAX,MAAW;;AACtC,gBAAIA,MAAJ,wBAAgCD,IAAhC;AACD,CAFD;;IAIaE,e,WAAAA,e;;;AACX,2BAAYC,MAAZ,EAAoBC,WAApB,EAAiC;AAAA;;AAAA,kIACzBD,MADyB;;AAG/B,6BAAU,gBAAGE,MAAH,CAAUF,OAAOG,MAAjB,CAAV,EAAoC,mCAApC;AACA,6BAAU,gBAAGD,MAAH,CAAUF,OAAOI,OAAjB,CAAV,EAAqC,oCAArC;AACA,6BAAU,gBAAGF,MAAH,CAAUF,OAAOK,kBAAjB,CAAV,EAAgD,+CAAhD;;AAEA,QAAMF,SAASH,OAAOG,MAAP,CAAcG,OAAd,CAAsB,SAAtB,EAAiCL,WAAjC,CAAf;;AAEA,UAAKM,UAAL,GAAkB,oCAAcJ,MAAd,EAAsB;AACtCK,UAAI,EAAEC,cAAcR,WAAhB;AADkC,KAAtB,CAAlB;;AAIA,UAAKS,QAAL,GAAgB,MAAKH,UAAL,CAAgBI,cAAhB,CAA+BX,OAAOI,OAAtC,CAAhB;AACA,UAAKM,QAAL,CAAcE,EAAd,CAAiBZ,OAAOK,kBAAxB,EAA4C,YAAM;AAChDT,WAAK,6BAAL;AACA,YAAKiB,IAAL,CAAU,cAAV;AACD,KAHD;;AAKA,UAAKN,UAAL,CAAgBO,KAAhB,GACCC,IADD,CACM,YAAM;AACVnB,WAAK,8CAAL;AACD,KAHD,EAGGoB,IAHH,CAGQ,YAAM;AACZpB,WAAK,+BAAL,EAAsC,MAAtC;AACD,KALD;AAnB+B;AAyBhC;;;;;kBAGYG,e","file":"signalr.js","sourcesContent":["import is from 'is_js';\nimport invariant from 'invariant';\nimport { hubConnection } from 'signalr-no-jquery';\nimport log from 'domain/log';\nimport Strategy from './strategy';\n\nconst _log = (line, method = 'info') => {\n  log[method](`SignalRStrategy: ${line}`);\n};\n\nexport class SignalRStrategy extends Strategy {\n  constructor(config, accessToken) {\n    super(config);\n\n    invariant(is.string(config.hubUrl), 'hubUrl must be a string in config');\n    invariant(is.string(config.hubName), 'hubName must be a string in config');\n    invariant(is.string(config.incomingMethodName), 'incomingMethodName must be a string in config');\n\n    const hubUrl = config.hubUrl.replace('{token}', accessToken);\n\n    this.connection = hubConnection(hubUrl, {\n      qs: { bearer_token: accessToken },\n    });\n\n    this.hubProxy = this.connection.createHubProxy(config.hubName);\n    this.hubProxy.on(config.incomingMethodName, () => {\n      _log('Push notification received.');\n      this.emit('notification');\n    });\n\n    this.connection.start()\n    .done(() => {\n      _log('Connected to hub; waiting for notifications.');\n    }).fail(() => {\n      _log('Unable to connect to the hub!', 'warn');\n    });\n  }\n}\n\nexport default SignalRStrategy;\n"]}