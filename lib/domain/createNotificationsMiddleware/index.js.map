{"version":3,"sources":["domain/createNotificationsMiddleware/index.js"],"names":["createNotificationsMiddleware","STRATEGIES","timer","signalr","config","string","strategy","object","dispatch","apiUrl","StrategyClass","Object","keys","toString","emitter","store","next","action","state","getState","sso","get","user","empty","accessToken","on","method","disableDefault","fullUrl","actionExtras","actionObjectName","url","requestExtras","successExtras","failureExtras","info"],"mappings":";;;;;QAcgBA,6B,GAAAA,6B;;AAdhB;;;;AACA;;;;AACA;;;;AACA;;AACA;;;;AAEA;;;;AACA;;;;;;AAEA,IAAMC,aAAa;AACjBC,wBADiB;AAEjBC;AAFiB,CAAnB;;AAKO,SAASH,6BAAT,GAAoD;AAAA,MAAbI,MAAa,uEAAJ,EAAI;;AACzD,2BAAU,gBAAGC,MAAH,CAAUD,OAAOE,QAAjB,CAAV,EAAsC,mCAAtC;AACA,2BAAU,gBAAGC,MAAH,CAAUH,OAAOI,QAAjB,CAAV,EAAsC,oCAAtC;AACA,2BAAU,gBAAGH,MAAH,CAAUD,OAAOI,QAAP,CAAgBC,MAA1B,CAAV,EAA6C,kCAA7C;;AAEA,MAAMC,gBAAgBT,WAAWG,OAAOE,QAAlB,CAAtB;AACA,2BAAU,CAAC,CAAEI,aAAb,sCACsCC,OAAOC,IAAP,CAAYX,UAAZ,EAAwBY,QAAxB,EADtC;;AAGA,MAAIC,gBAAJ;;AAEA,SAAO,UAACC,KAAD;AAAA,WAAW,UAACC,IAAD;AAAA,aAAU,UAACC,MAAD,EAAY;AACtC,YAAMC,QAAQH,MAAMI,QAAN,EAAd;AACA,YAAMC,MAAMF,SAASA,MAAMG,GAAN,CAAU,cAAV,CAArB;AACA,YAAMC,OAAQF,OAAOA,IAAIC,GAAJ,CAAQ,MAAR,CAAR,IAA4B,EAAzC;AACA,YAAIC,QAAQ,CAAE,gBAAGC,KAAH,CAASD,IAAT,CAAd,EAA8B;AAC5B,cAAME,cAAcF,KAAKD,GAAL,CAAS,cAAT,CAApB;;AAEA,cAAI,gBAAGhB,MAAH,CAAUmB,WAAV,KAA0B,CAAEV,OAAhC,EAAyC;AACvCA,sBAAU,IAAIJ,aAAJ,CAAkBN,MAAlB,EAA0BoB,WAA1B,CAAV;;AAEAV,oBAAQW,EAAR,CAAW,cAAX,EAA2B,YAAM;AAAA,qCAG3BrB,OAAOI,QAHoB;AAAA,kBAE7BkB,MAF6B,oBAE7BA,MAF6B;AAAA,kBAErBjB,MAFqB,oBAErBA,MAFqB;AAAA,kBAEbkB,cAFa,oBAEbA,cAFa;;;AAK/B,kBAAMC,UAAU,mBAASnB,MAAT,CAAhB;AACA,kBAAMoB,eAAeF,iBAAiB,EAAEA,gBAAgB,IAAlB,EAAjB,GAA4C,EAAjE;;AAEAZ,oBAAMP,QAAN,CACI,sCAAuB;AACrBsB,kCAAkB,eADG;AAErBC,qBAAKH,OAFgB;AAGrBF,8BAHqB;AAIrBM,+BAAeH,YAJM,EAIS;AAC9BI,+BAAeJ,YALM;AAMrBK,+BAAeL;AANM,eAAvB,CADJ;AASD,aAjBD;;AAmBA,0BAAIM,IAAJ,mCAA0C/B,OAAOE,QAAjD;AACD;AACF;;AAED,eAAOU,KAAKC,MAAL,CAAP;AACD,OAlCiB;AAAA,KAAX;AAAA,GAAP;AAmCD;;kBAEcjB,6B","file":"index.js","sourcesContent":["import is from 'is_js';\nimport invariant from 'invariant';\nimport createApiActionCreator from 'domain/createApiActionCreator';\nimport { buildUrl } from 'domain/Api';\nimport log from 'domain/log';\n\nimport TimerStrategy from './timer';\nimport SignalRStrategy from './signalr';\n\nconst STRATEGIES = {\n  timer: TimerStrategy,\n  signalr: SignalRStrategy,\n};\n\nexport function createNotificationsMiddleware(config = {}) {\n  invariant(is.string(config.strategy), 'trigger strategy must be a string');\n  invariant(is.object(config.dispatch), 'trigger dispatch must be an object');\n  invariant(is.string(config.dispatch.apiUrl), 'dispatch apiUrl must be a string');\n\n  const StrategyClass = STRATEGIES[config.strategy];\n  invariant(!! StrategyClass,\n      `strategy must be valid (one of ${Object.keys(STRATEGIES).toString()})`);\n\n  let emitter;\n\n  return (store) => (next) => (action) => {\n    const state = store.getState();\n    const sso = state && state.get('singleSignOn');\n    const user = (sso && sso.get('user')) || {};\n    if (user && ! is.empty(user)) {\n      const accessToken = user.get('access_token');\n\n      if (is.string(accessToken) && ! emitter) {\n        emitter = new StrategyClass(config, accessToken);\n\n        emitter.on('notification', () => {\n          const {\n            method, apiUrl, disableDefault,\n          } = config.dispatch;\n\n          const fullUrl = buildUrl(apiUrl);\n          const actionExtras = disableDefault ? { disableDefault: true } : {};\n\n          store.dispatch(\n              createApiActionCreator({\n                actionObjectName: 'NOTIFICATIONS',\n                url: fullUrl,\n                method,\n                requestExtras: actionExtras,  // disableDefault in request, success, failure\n                successExtras: actionExtras,\n                failureExtras: actionExtras,\n              }));\n        });\n\n        log.info(`Notification pull strategy: \\`${config.strategy}\\``);\n      }\n    }\n\n    return next(action);\n  };\n}\n\nexport default createNotificationsMiddleware;\n"]}