{"version":3,"sources":["domain/ApiResponse/spec.js"],"names":["describe","test","expect","fetchWasCalled","toBe","loading","data","error","Error","shouldFetch","isLoading","hasFailed","hasSucceeded"],"mappings":";;AAAA;;AAEAA,SAAS,mBAAT,EAA8B,YAAM;AAClCC,OAAK,yCAAL,EAAgD,YAAM;AACpDC,WAAO,oBAAkBC,cAAlB,EAAP,EAA2CC,IAA3C,CAAgD,KAAhD;AACD,GAFD;;AAIAH,OAAK,mDAAL,EAA0D,YAAM;AAC9DC,WAAO,kBAAgB,EAAEG,SAAS,IAAX,EAAhB,EAAmCF,cAAnC,EAAP,EAA4DC,IAA5D,CAAiE,IAAjE;AACD,GAFD;;AAIAH,OAAK,+EAAL,EAAsF,YAAM;AAC1FC,WAAO,kBAAgB,EAAEI,MAAM,IAAR,EAAhB,EAAgCH,cAAhC,EAAP,EAAyDC,IAAzD,CAA8D,IAA9D;AACD,GAFD;;AAIAH,OAAK,yEAAL,EAAgF,YAAM;AACpFC,WAAO,kBAAgB,EAAEK,OAAO,IAAIC,KAAJ,EAAT,EAAhB,EAAwCL,cAAxC,EAAP,EAAiEC,IAAjE,CAAsE,IAAtE;AACD,GAFD;AAGD,CAhBD;;AAkBAJ,SAAS,gBAAT,EAA2B,YAAM;AAC/BC,OAAK,wCAAL,EAA+C,YAAM;AACnDC,WAAO,oBAAkBO,WAAlB,EAAP,EAAwCL,IAAxC,CAA6C,IAA7C;AACD,GAFD;;AAIAH,OAAK,oDAAL,EAA2D,YAAM;AAC/DC,WAAO,kBAAgB,EAAEG,SAAS,IAAX,EAAhB,EAAmCI,WAAnC,EAAP,EAAyDL,IAAzD,CAA8D,KAA9D;AACD,GAFD;;AAIAH,OAAK,gFAAL,EAAuF,YAAM;AAC3FC,WAAO,kBAAgB,EAAEI,MAAM,IAAR,EAAhB,EAAgCG,WAAhC,EAAP,EAAsDL,IAAtD,CAA2D,KAA3D;AACD,GAFD;;AAIAH,OAAK,0EAAL,EAAiF,YAAM;AACrFC,WAAO,kBAAgB,EAAEK,OAAO,IAAIC,KAAJ,EAAT,EAAhB,EAAwCC,WAAxC,EAAP,EAA8DL,IAA9D,CAAmE,KAAnE;AACD,GAFD;AAGD,CAhBD;;AAkBAJ,SAAS,cAAT,EAAyB,YAAM;AAC7BC,OAAK,kEAAL,EAAyE,YAAM;AAC7EC,WAAO,kBAAgB,EAAEG,SAAS,EAAX,EAAhB,EAAiCK,SAAjC,EAAP,EAAqDN,IAArD,CAA0D,KAA1D;AACD,GAFD;;AAIAH,OAAK,iDAAL,EAAwD,YAAM;AAC5DC,WAAO,kBAAgB,EAAEG,SAAS,IAAX,EAAhB,EAAmCK,SAAnC,EAAP,EAAuDN,IAAvD,CAA4D,IAA5D;AACD,GAFD;AAGD,CARD;;AAUAJ,SAAS,cAAT,EAAyB,YAAM;AAC7BC,OAAK,oEAAL,EAA2E,YAAM;AAC/EC,WAAO,kBAAgB,EAAEK,OAAO,EAAT,EAAhB,EAA+BI,SAA/B,EAAP,EAAmDP,IAAnD,CAAwD,KAAxD;AACD,GAFD;;AAIAH,OAAK,+CAAL,EAAsD,YAAM;AAC1DC,WAAO,kBAAgB,EAAEK,OAAO,IAAIC,KAAJ,EAAT,EAAhB,EAAwCG,SAAxC,EAAP,EAA4DP,IAA5D,CAAiE,IAAjE;AACD,GAFD;AAGD,CARD;;AAUAJ,SAAS,iBAAT,EAA4B,YAAM;AAChCC,OAAK,mEAAL,EAA0E,YAAM;AAC9EC,WAAO,kBAAgB,EAAEI,MAAM,IAAR,EAAhB,EAAgCM,YAAhC,EAAP,EAAuDR,IAAvD,CAA4D,IAA5D;AACD,GAFD;AAGD,CAJD","file":"spec.js","sourcesContent":["import { ApiResponse } from './';\n\ndescribe('#fetchWasCalled()', () => {\n  test('returns false for a default ApiResponse', () => {\n    expect(new ApiResponse().fetchWasCalled()).toBe(false);\n  });\n\n  test('returns true for an ApiResponse with loading=true', () => {\n    expect(new ApiResponse({ loading: true }).fetchWasCalled()).toBe(true);\n  });\n\n  test('returns true for an ApiResponse with a data property different from undefined', () => {\n    expect(new ApiResponse({ data: null }).fetchWasCalled()).toBe(true);\n  });\n\n  test('returns true for an ApiResponse with a error being an instance of Error', () => {\n    expect(new ApiResponse({ error: new Error() }).fetchWasCalled()).toBe(true);\n  });\n});\n\ndescribe('#shouldFetch()', () => {\n  test('returns true for a default ApiResponse', () => {\n    expect(new ApiResponse().shouldFetch()).toBe(true);\n  });\n\n  test('returns false for an ApiResponse with loading=true', () => {\n    expect(new ApiResponse({ loading: true }).shouldFetch()).toBe(false);\n  });\n\n  test('returns false for an ApiResponse with a data property different from undefined', () => {\n    expect(new ApiResponse({ data: null }).shouldFetch()).toBe(false);\n  });\n\n  test('returns false for an ApiResponse with a error being an instance of Error', () => {\n    expect(new ApiResponse({ error: new Error() }).shouldFetch()).toBe(false);\n  });\n});\n\ndescribe('#isLoading()', () => {\n  test('returns false if the ApiResponse\\'s loading property is not true', () => {\n    expect(new ApiResponse({ loading: 20 }).isLoading()).toBe(false);\n  });\n\n  test('returns true if the ApiResponse\\'s loading=true', () => {\n    expect(new ApiResponse({ loading: true }).isLoading()).toBe(true);\n  });\n});\n\ndescribe('#hasFailed()', () => {\n  test('returns false if the ApiResponse\\'s error property is not an Error', () => {\n    expect(new ApiResponse({ error: 20 }).hasFailed()).toBe(false);\n  });\n\n  test('returns true if the ApiResponse\\'s error=true', () => {\n    expect(new ApiResponse({ error: new Error() }).hasFailed()).toBe(true);\n  });\n});\n\ndescribe('#hasSucceeded()', () => {\n  test('returns true if the ApiResponse\\'s data property is not undefined', () => {\n    expect(new ApiResponse({ data: null }).hasSucceeded()).toBe(true);\n  });\n});\n"]}