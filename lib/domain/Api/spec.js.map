{"version":3,"sources":["domain/Api/spec.js"],"names":["jest","mock","get","require","Map","getState","singleSignOn","user","access_token","global","fetch","beforeEach","resetModules","resetMocks","mockResponse","JSON","stringify","foo","status","describe","test","merge","apiBase","buildUrl","expect","toBe","assertions","toHaveBeenCalled","calls","toEqual","headers","Accept","Authorization","includeBearerTokenInApiGetUrls","method"],"mappings":"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","file":"spec.js","sourcesContent":["import isomorphicFetch from 'isomorphic-fetch';\n\njest.mock('domain/Store', () => ({\n  get: () => {\n    // eslint-disable-next-line no-shadow\n    const { Map } = require('immutable');\n    return { getState: () => new Map({ singleSignOn: { user: { access_token: 'TOKEN' } } }) };\n  },\n}));\njest.mock('isomorphic-fetch', () => global.fetch);\n\nbeforeEach(() => {\n  jest.resetModules();\n  isomorphicFetch.resetMocks();\n  isomorphicFetch.mockResponse(JSON.stringify({ foo: 'bar' }), { status: 200 });\n});\n\ndescribe('#buildUrl', () => {\n  test('appends its parameter to Config.apiBase', () => {\n    require('domain/Config').merge({ apiBase: 'http://host/api' });\n    const { buildUrl } = require('./');\n    expect(buildUrl('/somePath')).toBe('http://host/api/somePath');\n  });\n});\n\ndescribe('#fetch', () => {\n  describe('includeBearerTokenInApiGetUrls=undefined', () => {\n    test('calls isomorphicFetch with the expected parameters', async () => {\n      expect.assertions(2);\n      const { fetch } = require('./');\n      try { await fetch('https://domain/somePath'); } catch (e) { throw e; }\n      expect(isomorphicFetch).toHaveBeenCalled();\n      expect(isomorphicFetch.mock.calls[0]).toEqual(['https://domain/somePath', {\n        headers: {\n          Accept: 'application/json; charset=utf-8',\n          Authorization: 'Bearer TOKEN',\n        },\n      }]);\n    });\n  });\n\n  describe('includeBearerTokenInApiGetUrls=true', () => {\n    let fetch;\n\n    beforeEach(() => {\n      require('domain/Config').merge({ includeBearerTokenInApiGetUrls: true });\n      fetch = require('./').fetch;\n    });\n\n    test('calls isomorphicFetch with the expected parameters (non-https)', () => {\n      fetch('http://domain/somePath');\n      expect(isomorphicFetch).toHaveBeenCalled();\n      expect(isomorphicFetch.mock.calls[0]).toEqual(['http://domain/somePath', {\n        headers: {\n          Accept: 'application/json; charset=utf-8',\n        },\n      }]);\n    });\n\n    test('calls isomorphicFetch with the expected parameters', () => {\n      fetch('https://domain/somePath');\n      expect(isomorphicFetch).toHaveBeenCalled();\n      expect(isomorphicFetch.mock.calls[0]).toEqual(['https://domain/somePath?bearer_token=TOKEN', {\n        headers: {\n          Accept: 'application/json; charset=utf-8',\n        },\n      }]);\n    });\n\n    test('calls isomorphicFetch with the expected parameters (same scheme)', () => {\n      fetch('//domain/somePath');\n      expect(isomorphicFetch).toHaveBeenCalled();\n      expect(isomorphicFetch.mock.calls[0]).toEqual(['//domain/somePath?bearer_token=TOKEN', {\n        headers: {\n          Accept: 'application/json; charset=utf-8',\n        },\n      }]);\n    });\n\n    test('calls isomorphicFetch with the expected parameters (PUT)', () => {\n      fetch('//domain/somePath', { method: 'PUT' });\n      expect(isomorphicFetch).toHaveBeenCalled();\n      expect(isomorphicFetch.mock.calls[0]).toEqual(['//domain/somePath?bearer_token=TOKEN', {\n        method: 'PUT',\n        headers: {\n          Accept: 'application/json; charset=utf-8',\n          'Content-Type': 'application/json',\n        },\n      }]);\n    });\n\n    test('calls isomorphicFetch with the expected parameters (custom headers)', () => {\n      fetch('//domain/somePath', { headers: { 'X-Custom-Header': 'Content' } });\n      expect(isomorphicFetch).toHaveBeenCalled();\n      expect(isomorphicFetch.mock.calls[0]).toEqual(['//domain/somePath?bearer_token=TOKEN', {\n        headers: {\n          Accept: 'application/json; charset=utf-8',\n          'X-Custom-Header': 'Content',\n        },\n      }]);\n    });\n  });\n});\n"]}