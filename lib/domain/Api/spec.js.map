{"version":3,"sources":["domain/Api/spec.js"],"names":["describe","isomorphicFetch","importDeps","config","imports","require","spy","get","getState","singleSignOn","user","access_token","buildUrl","fetch","it","apiBase","to","equal","called","be","true","args","eql","headers","Accept","Authorization","includeBearerTokenInApiGetUrls","method"],"mappings":"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","file":"spec.js","sourcesContent":["import { Map } from 'immutable';\nimport { expect } from 'chai';\nimport Sinon from 'sinon';\n\ndescribe('Api', () => {\n  let isomorphicFetch;\n\n  const importDeps = (config = {}) => {\n    // eslint-disable-next-line global-require,import/no-webpack-loader-syntax\n    const imports = require('inject-loader?isomorphic-fetch&domain/Config&domain/Store!./')({\n      'isomorphic-fetch': isomorphicFetch = Sinon.spy(),\n      'domain/Config': new Map(config),\n      'domain/Store': {\n        get: () => ({\n          getState: () => new Map({ singleSignOn: { user: { access_token: 'TOKEN' } } }),\n        }),\n      },\n    });\n    return {\n      buildUrl: imports.buildUrl,\n      fetch: imports.fetch,\n    };\n  };\n\n  describe('#buildUrl', () => {\n    it('appends its parameter to Config.apiBase', () => {\n      const { buildUrl } = importDeps({ apiBase: 'http://host/api' });\n      expect(buildUrl('/somePath')).to.equal('http://host/api/somePath');\n    });\n  });\n\n  describe('#fetch', () => {\n    it('calls isomorphicFetch with the expected parameters (includeBearerTokenInApiGetUrls=undefined)', () => {\n      const { fetch } = importDeps();\n      fetch('https://domain/somePath');\n      expect(isomorphicFetch.called).to.be.true;\n      expect(isomorphicFetch.args[0]).to.eql(['https://domain/somePath', {\n        headers: {\n          Accept: 'application/json; charset=utf-8',\n          Authorization: 'Bearer TOKEN',\n        },\n      }]);\n    });\n\n    it('calls isomorphicFetch with the expected parameters (includeBearerTokenInApiGetUrls=true, non-https)', () => {\n      const { fetch } = importDeps({ includeBearerTokenInApiGetUrls: true });\n      fetch('http://domain/somePath');\n      expect(isomorphicFetch.called).to.be.true;\n      expect(isomorphicFetch.args[0]).to.eql(['http://domain/somePath', {\n        headers: {\n          Accept: 'application/json; charset=utf-8',\n        },\n      }]);\n    });\n\n    it('calls isomorphicFetch with the expected parameters (includeBearerTokenInApiGetUrls=true)', () => {\n      const { fetch } = importDeps({ includeBearerTokenInApiGetUrls: true });\n      fetch('https://domain/somePath');\n      expect(isomorphicFetch.called).to.be.true;\n      expect(isomorphicFetch.args[0]).to.eql(['https://domain/somePath?bearer_token=TOKEN', {\n        headers: {\n          Accept: 'application/json; charset=utf-8',\n        },\n      }]);\n    });\n\n    it('calls isomorphicFetch with the expected parameters (includeBearerTokenInApiGetUrls=true, same scheme)', () => {\n      const { fetch } = importDeps({ includeBearerTokenInApiGetUrls: true });\n      fetch('//domain/somePath');\n      expect(isomorphicFetch.called).to.be.true;\n      expect(isomorphicFetch.args[0]).to.eql(['//domain/somePath?bearer_token=TOKEN', {\n        headers: {\n          Accept: 'application/json; charset=utf-8',\n        },\n      }]);\n    });\n\n    it('calls isomorphicFetch with the expected parameters (includeBearerTokenInApiGetUrls=true, PUT)', () => {\n      const { fetch } = importDeps({ includeBearerTokenInApiGetUrls: true });\n      fetch('//domain/somePath', { method: 'PUT' });\n      expect(isomorphicFetch.called).to.be.true;\n      expect(isomorphicFetch.args[0]).to.eql(['//domain/somePath?bearer_token=TOKEN', {\n        method: 'PUT',\n        headers: {\n          Accept: 'application/json; charset=utf-8',\n          'Content-Type': 'application/json',\n        },\n      }]);\n    });\n\n    it('calls isomorphicFetch with the expected parameters (includeBearerTokenInApiGetUrls=true, custom headers)', () => {\n      const { fetch } = importDeps({ includeBearerTokenInApiGetUrls: true });\n      fetch('//domain/somePath', { headers: { 'X-Custom-Header': 'Content' } });\n      expect(isomorphicFetch.called).to.be.true;\n      expect(isomorphicFetch.args[0]).to.eql(['//domain/somePath?bearer_token=TOKEN', {\n        headers: {\n          Accept: 'application/json; charset=utf-8',\n          'X-Custom-Header': 'Content',\n        },\n      }]);\n    });\n  });\n});\n"]}