{"version":3,"sources":["domain/BreadcrumbsBuilder/spec.js"],"names":["props","params","undefined","location","routes","buildRoute","expectedItems","beforeEach","path","test","result","buildWithProps","expect","toEqual","breadcrumbLabels","label","href","clickable","backLinkHref","groupId"],"mappings":"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","file":"spec.js","sourcesContent":["import BreadcrumbsBuilder from './';\n\n// <Breadcrumbs state params location routes buildRoute>\n\nconst props = {\n  params: undefined,\n  location: undefined,\n  routes: undefined,\n  buildRoute: undefined,\n};\n\nlet expectedItems;\n\nbeforeEach(() => {\n  props.params = {};\n  props.location = {};\n  props.routes = [];\n  props.buildRoute = (path) => `/${path}`;\n  expectedItems = undefined;\n});\n\ntest('when there are no labelled route segments', () => {\n  props.routes = [{\n    path: '/group/1',\n  }];\n  const result = BreadcrumbsBuilder.buildWithProps(props);\n  expect(result).toEqual([]);\n});\n\ntest('when there is one labelled route segment', () => {\n  props.routes = [{\n    path: 'group/:groupId',\n    breadcrumbLabels: 'Group',\n  }];\n  expectedItems = [{\n    label: 'Group',\n    href: '/group/:groupId',\n    clickable: true,\n    backLinkHref: null,\n  }];\n  const result = BreadcrumbsBuilder.buildWithProps(props);\n  expect(result).toEqual(expectedItems);\n});\n\ntest('with two items when there are two labelled route segments', () => {\n  props.routes = [{\n    path: 'group/:groupId',\n    breadcrumbLabels: 'Group',\n  }, {\n    path: 'dashboard',\n  }, {\n    path: 'members',\n    breadcrumbLabels: 'Members',\n  }];\n  expectedItems = [{\n    label: 'Group',\n    href: '/group/:groupId',\n    clickable: true,\n    backLinkHref: null,\n  }, {\n    label: 'Members',\n    href: '/group/:groupId/dashboard/members',\n    clickable: false,\n    backLinkHref: null,\n  }];\n  const result = BreadcrumbsBuilder.buildWithProps(props);\n  expect(result).toEqual(expectedItems);\n});\n\ntest('with more labels than routes when label value(s) are arrays', () => {\n  props.routes = [{\n    path: 'group/:groupId',\n    breadcrumbLabels: ['Home', 'Group'],\n  }, {\n    path: 'members',\n    breadcrumbLabels: 'Members',\n  }];\n  expectedItems = [{\n    label: 'Home',\n    href: '/group/:groupId',\n    clickable: true,\n    backLinkHref: null,\n  }, {\n    label: 'Group',\n    href: '/group/:groupId',\n    clickable: true,\n    backLinkHref: null,\n  }, {\n    label: 'Members',\n    href: '/group/:groupId/members',\n    clickable: false,\n    backLinkHref: null,\n  }];\n  const result = BreadcrumbsBuilder.buildWithProps(props);\n  expect(result).toEqual(expectedItems);\n});\n\ntest('with labels that are functions', () => {\n  props.params = {\n    groupId: '10',\n  };\n  props.routes = [{\n    path: 'group/:groupId',\n    breadcrumbLabels: ({ params: { groupId } }) => `Group ${groupId}`,\n  }, {\n    path: 'members',\n    breadcrumbLabels: () => 'Members',\n  }];\n  expectedItems = [{\n    label: 'Group 10',\n    href: '/group/:groupId',\n    clickable: true,\n    backLinkHref: null,\n  }, {\n    label: 'Members',\n    href: '/group/:groupId/members',\n    clickable: false,\n    backLinkHref: null,\n  }];\n  const result = BreadcrumbsBuilder.buildWithProps(props);\n  expect(result).toEqual(expectedItems);\n});\n\ntest('with labels of mixed types containing a full object definition', () => {\n  props.params = {\n    groupId: '10',\n  };\n  props.routes = [{\n    path: 'group/:groupId',\n    breadcrumbLabels: 'Group',\n  }, {\n    path: 'members/edit',\n    breadcrumbLabels: () => [{\n      label: 'Members',\n      href: '/group/:groupId/members',\n      clickable: false,\n      backLinkHref: '/',\n    }, 'Edit'],\n  }];\n  expectedItems = [{\n    label: 'Group',\n    href: '/group/:groupId',\n    clickable: true,\n    backLinkHref: null,\n  }, {\n    label: 'Members',\n    href: '/group/:groupId/members',\n    clickable: false,\n    backLinkHref: '/',\n  }, {\n    label: 'Edit',\n    href: '/group/:groupId/members/edit',\n    clickable: false,\n    backLinkHref: null,\n  }];\n  const result = BreadcrumbsBuilder.buildWithProps(props);\n  expect(result).toEqual(expectedItems);\n});\n"]}