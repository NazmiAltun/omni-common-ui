{"version":3,"sources":["domain/log/spec.js"],"names":["log","Config","buildLogToRaven","jest","mock","fn","beforeEach","resetModules","global","console","error","describe","require","default","basicTests","test","expect","toHaveBeenCalledWith","not","toHaveBeenCalled","set","disabled","prototype","toBeDefined","testMethod","originalConsole","window","debug","toThrowError","method","toBe"],"mappings":";;;;AAAA,IAAIA,YAAJ;AACA,IAAIC,eAAJ;AACA,IAAIC,wBAAJ;;AAEAC,KAAKC,IAAL,CAAU,mBAAV,EAA+B,YAAM;AACnC,MAAMA,OAAOD,KAAKE,EAAL,EAAb;AACA,SAAO;AAAA,WAAMD,IAAN;AAAA,GAAP;AACD,CAHD;;AAKAE,WAAW,YAAM;AACfH,OAAKI,YAAL;AACAC,SAAOC,OAAP,CAAeC,KAAf,GAAuBP,KAAKE,EAAL,EAAvB;AACD,CAHD;;AAKAM,SAAS,oDAAT,EAA+D,YAAM;AACnEL,aAAW,YAAM;AACfJ,sBAAkBU,QAAQ,mBAAR,CAAlB;AACAX,aAASW,OAAT;AACAZ,UAAMY,QAAQ,IAAR,EAAcC,OAApB;AACD,GAJD;;AAMAC;;AAEAC,OAAK,6CAAL,EAAoD,YAAM;AACxDf,QAAIU,KAAJ,CAAU,UAAV;AACAM,WAAOd,iBAAP,EAA0Be,oBAA1B,CAA+C,UAA/C;AACD,GAHD;;AAKAF,OAAK,0BAAL,EAAiC,YAAM;AACrCf,QAAIU,KAAJ;AACAM,WAAOR,OAAOC,OAAP,CAAeC,KAAtB,EAA6BQ,GAA7B,CAAiCC,gBAAjC;AACD,GAHD;AAID,CAlBD;;AAoBAR,SAAS,4CAAT,EAAuD,YAAM;AAC3DL,aAAW,YAAM;AACfJ,sBAAkBU,QAAQ,mBAAR,CAAlB;AACAX,aAASW,OAAT;AACAX,WAAOmB,GAAP,CAAW,QAAX,EAAqB,EAAEC,UAAU,IAAZ,EAArB;AACArB,UAAMY,QAAQ,IAAR,EAAcC,OAApB;AACD,GALD;;AAOAC;;AAEAC,OAAK,iDAAL,EAAwD,YAAM;AAC5Df,QAAIU,KAAJ,CAAU,UAAV;AACAM,WAAOd,iBAAP,EAA0BgB,GAA1B,CAA8BC,gBAA9B;AACD,GAHD;;AAKAJ,OAAK,kBAAL,EAAyB,YAAM;AAC7Bf,QAAIU,KAAJ;AACAM,WAAOR,OAAOC,OAAP,CAAeC,KAAtB,EAA6BS,gBAA7B;AACD,GAHD;AAID,CAnBD;;AAqBA,SAASL,UAAT,GAAsB;AACpBC,OAAK,YAAL,EAAmB,YAAM;AACvBC,WAAOhB,IAAIsB,SAAX,EAAsBC,WAAtB;AACD,GAFD;;AAIAC,aAAW,OAAX;AACAA,aAAW,MAAX;AACAA,aAAW,KAAX;AACAA,aAAW,MAAX;AACAA,aAAW,OAAX;;AAEAT,OAAK,yCAAL,EAAgD,YAAM;AACpD,QAAMU,kBAAkBC,OAAOjB,OAA/B;AACA,WAAOiB,OAAOjB,OAAd;;AAEAO,WAAO;AAAA,aAAMhB,IAAI2B,KAAJ,CAAU,WAAV,CAAN;AAAA,KAAP,EAAqCT,GAArC,CAAyCU,YAAzC;;AAEAF,WAAOjB,OAAP,GAAiBgB,eAAjB;AACD,GAPD;;AASA,WAASD,UAAT,CAAoBK,MAApB,EAA4B;AAC1Bd,qBAAec,MAAf,eAAiC,YAAM;AACrCb,qBAAchB,IAAI6B,MAAJ,CAAd,GAA2BC,IAA3B,CAAgC,UAAhC;AACD,KAFD;AAGD;AACF","file":"spec.js","sourcesContent":["let log;\nlet Config;\nlet buildLogToRaven;\n\njest.mock('./buildLogToRaven', () => {\n  const mock = jest.fn();\n  return () => mock;\n});\n\nbeforeEach(() => {\n  jest.resetModules();\n  global.console.error = jest.fn();\n});\n\ndescribe('when the config does not explicitly disable Sentry', () => {\n  beforeEach(() => {\n    buildLogToRaven = require('./buildLogToRaven');\n    Config = require('domain/Config');\n    log = require('./').default;\n  });\n\n  basicTests();\n\n  test('uses the logger returned by buildLogToRaven', () => {\n    log.error('an error');\n    expect(buildLogToRaven()).toHaveBeenCalledWith('an error');\n  });\n\n  test('does not use the console', () => {\n    log.error();\n    expect(global.console.error).not.toHaveBeenCalled();\n  });\n});\n\ndescribe('when the config explicitly disables Sentry', () => {\n  beforeEach(() => {\n    buildLogToRaven = require('./buildLogToRaven');\n    Config = require('domain/Config');\n    Config.set('sentry', { disabled: true });\n    log = require('./').default;\n  });\n\n  basicTests();\n\n  test('does not the logger returned by buildLogToRaven', () => {\n    log.error('an error');\n    expect(buildLogToRaven()).not.toHaveBeenCalled();\n  });\n\n  test('uses the console', () => {\n    log.error();\n    expect(global.console.error).toHaveBeenCalled();\n  });\n});\n\nfunction basicTests() {\n  test('is a class', () => {\n    expect(log.prototype).toBeDefined();\n  });\n\n  testMethod('error');\n  testMethod('info');\n  testMethod('log');\n  testMethod('warn');\n  testMethod('debug');\n\n  test('does not crash if there is no \"console\"', () => {\n    const originalConsole = window.console;\n    delete window.console;\n\n    expect(() => log.debug('some text')).not.toThrowError();\n\n    window.console = originalConsole;\n  });\n\n  function testMethod(method) {\n    test(`has a \"${method}\" method`, () => {\n      expect(typeof log[method]).toBe('function');\n    });\n  }\n}\n"]}