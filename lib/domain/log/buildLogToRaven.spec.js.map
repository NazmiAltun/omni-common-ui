{"version":3,"sources":["domain/log/buildLogToRaven.spec.js"],"names":["RavenPkg","beforeEach","default","captureBreadcrumb","jest","fn","captureException","captureMessage","sprintf","describe","log","test","expect","mock","calls","length","toBe","toEqual","level","error","Error","message","stack"],"mappings":"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","file":"buildLogToRaven.spec.js","sourcesContent":["import buildLogToRaven from './buildLogToRaven';\nimport * as RavenPkg from 'raven-js';\nimport sprintfPkg from 'sprintf-js';\n\nbeforeEach(() => {\n  RavenPkg.default.captureBreadcrumb = jest.fn();\n  RavenPkg.default.captureException = jest.fn();\n  RavenPkg.default.captureMessage = jest.fn();\n  sprintfPkg.sprintf = jest.fn();\n});\n\ndescribe('when level is \"error\"', () => {\n  const log = buildLogToRaven('error');\n\n  describe('when not passed an error', () => {\n    test('calls Raven.captureMessage()', () => {\n      log();\n      expect(RavenPkg.default.captureMessage.mock.calls.length).toBe(1);\n    });\n\n    test('sets level as \"error\"', () => {\n      log();\n      expect(RavenPkg.default.captureMessage.mock.calls[0][1]).toEqual({ level: 'error' });\n    });\n  });\n\n  describe('when passed an error', () => {\n    let error;\n\n    beforeEach(() => {\n      error = new Error();\n      log(error);\n    });\n\n    test('calls Raven.captureException()', () => {\n      expect(RavenPkg.default.captureException.mock.calls.length).toBe(1);\n    });\n\n    test('sets level as \"error\"', () => {\n      expect(RavenPkg.default.captureException.mock.calls[0][1]).toEqual({ level: 'error' });\n    });\n\n    test('ignores all arguments except the first one', () => {\n      expect(RavenPkg.default.captureException.mock.calls[0]).toEqual([error, { level: 'error' }]);\n    });\n  });\n});\n\ndescribe('when level is \"warn\"', () => {\n  const log = buildLogToRaven('warn');\n\n  test('calls Raven.captureBreadcrumb()', () => {\n    log();\n    expect(RavenPkg.default.captureBreadcrumb.mock.calls.length).toBe(1);\n  });\n\n  test('sets level as \"warn\"', () => {\n    log();\n    expect(RavenPkg.default.captureBreadcrumb.mock.calls[0][0]).toEqual({ message: '', level: 'warn' });\n  });\n\n  describe('when not using C-style format strings', () => {\n    test('does not call sprintf', () => {\n      log('some normal string');\n      expect(sprintfPkg.sprintf.mock.calls.length).toBe(0);\n    });\n\n    test('concatenates all provided parameters', () => {\n      log('1', 2, '3');\n      expect(RavenPkg.default.captureBreadcrumb.mock.calls[0][0].message).toBe('1 2 3');\n    });\n\n    test('uses the whole stack of Errors', () => {\n      const error = new Error();\n      log('1', error, '3');\n      expect(RavenPkg.default.captureBreadcrumb.mock.calls[0][0].message).toBe(`1 ${error.stack} 3`);\n    });\n  });\n\n  describe('when using C-style format strings', () => {\n    test('calls sprintf', () => {\n      log('some formatted %s string');\n      expect(sprintfPkg.sprintf.mock.calls.length).toBe(1);\n    });\n\n    test('uses the whole stack of Errors', () => {\n      const error = new Error();\n      log('1 %s 3', error);\n      expect(sprintfPkg.sprintf.mock.calls[0]).toEqual(['1 %s 3', error.stack]);\n    });\n  });\n});\n\ndescribe('when level is not \"error\" or \"warn\"', () => {\n  const log = buildLogToRaven('whatever');\n\n  test('calls Raven.captureBreadcrumb()', () => {\n    log();\n    expect(RavenPkg.default.captureBreadcrumb.mock.calls.length).toBe(1);\n  });\n\n  test('sets level as \"info\"', () => {\n    log();\n    expect(RavenPkg.default.captureBreadcrumb.mock.calls[0][0]).toEqual({ message: '', level: 'info' });\n  });\n});\n"]}