{"version":3,"sources":["domain/log/buildLogToRaven.spec.js"],"names":["describe","Raven","sprintf","buildLogToRaven","getBuildLogToRaven","require","default","beforeEach","captureBreadcrumb","spy","captureException","captureMessage","log","context","it","called","to","be","true","args","eql","level","error","Error","message","false","equal","stack"],"mappings":"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","file":"buildLogToRaven.spec.js","sourcesContent":["import Sinon from 'sinon';\nimport { expect } from 'chai';\n\ndescribe('log', () => {\n  let Raven;\n  let sprintf;\n  let buildLogToRaven;\n\n  // eslint-disable-next-line global-require, import/no-webpack-loader-syntax\n  const getBuildLogToRaven = () => require('inject?raven-js&sprintf-js!./buildLogToRaven')({\n    'raven-js': Raven,\n    'sprintf-js': { sprintf },\n  }).default;\n\n  beforeEach(() => {\n    Raven = {\n      captureBreadcrumb: Sinon.spy(),\n      captureException: Sinon.spy(),\n      captureMessage: Sinon.spy(),\n    };\n    sprintf = Sinon.spy();\n    buildLogToRaven = getBuildLogToRaven();\n  });\n\n  describe('#buildLogToRaven()()', () => {\n    let log;\n\n    context('when level is \"error\"', () => {\n      beforeEach(() => {\n        log = buildLogToRaven('error');\n      });\n\n      context('when not passed an error', () => {\n        it('calls Raven.captureMessage()', () => {\n          log();\n          expect(Raven.captureMessage.called).to.be.true;\n        });\n\n        it('sets level as \"error\"', () => {\n          log();\n          expect(Raven.captureMessage.args[0][1]).to.eql({ level: 'error' });\n        });\n      });\n\n      context('when passed an error', () => {\n        let error;\n\n        beforeEach(() => {\n          error = new Error();\n          log(error);\n        });\n\n        it('calls Raven.captureException()', () => {\n          expect(Raven.captureException.called).to.be.true;\n        });\n\n        it('sets level as \"error\"', () => {\n          expect(Raven.captureException.args[0][1]).to.eql({ level: 'error' });\n        });\n\n        it('ignores all arguments except the first one', () => {\n          expect(Raven.captureException.args[0]).to.eql([error, { level: 'error' }]);\n        });\n      });\n    });\n\n    context('when level is \"warn\"', () => {\n      beforeEach(() => {\n        log = buildLogToRaven('warn');\n      });\n\n      it('calls Raven.captureBreadcrumb()', () => {\n        log();\n        expect(Raven.captureBreadcrumb.called).to.be.true;\n      });\n\n      it('sets level as \"warn\"', () => {\n        log();\n        expect(Raven.captureBreadcrumb.args[0][0]).to.eql({ message: '', level: 'warn' });\n      });\n\n      context('when not using C-style format strings', () => {\n        it('does not call sprintf', () => {\n          log('some normal string');\n          expect(sprintf.called).to.be.false;\n        });\n\n        it('concatenates all provided parameters', () => {\n          log('1', 2, '3');\n          expect(Raven.captureBreadcrumb.args[0][0].message).to.equal('1 2 3');\n        });\n\n        it('uses the whole stack of Errors', () => {\n          const error = new Error();\n          log('1', error, '3');\n          expect(Raven.captureBreadcrumb.args[0][0].message).to.equal(`1 ${error.stack} 3`);\n        });\n      });\n\n      context('when using C-style format strings', () => {\n        it('calls sprintf', () => {\n          log('some formatted %s string');\n          expect(sprintf.called).to.be.true;\n        });\n\n        it('uses the whole stack of Errors', () => {\n          const error = new Error();\n          log('1 %s 3', error);\n          expect(sprintf.args[0]).to.eql(['1 %s 3', error.stack]);\n        });\n      });\n    });\n\n    context('when level is not \"error\" or \"warn\"', () => {\n      beforeEach(() => {\n        log = buildLogToRaven('whatever');\n      });\n\n      it('calls Raven.captureBreadcrumb()', () => {\n        log();\n        expect(Raven.captureBreadcrumb.called).to.be.true;\n      });\n\n      it('sets level as \"info\"', () => {\n        log();\n        expect(Raven.captureBreadcrumb.args[0][0]).to.eql({ message: '', level: 'info' });\n      });\n    });\n  });\n});\n"]}