{"version":3,"sources":["domain/connect/spec.js"],"names":["jest","mock","connect","fn","createBuildRoute","bindActionCreators","arg","routerActions","push","replace","beforeEach","resetAllMocks","test","expect","toHaveBeenCalled","someProp","mapStateToProps","calls","buildRoute","toBe","toEqual","boundActions","mapDispatchToProps","toMatchObject","mergeProps","options"],"mappings":";;AAAA;;;;AACA;;AACA;;AACA;;AACA;;;;AAEAA,KAAKC,IAAL,gBAAyB;AAAA,SAAO,EAAEC,SAASF,KAAKG,EAAL,EAAX,EAAP;AAAA,CAAzB;AACAH,KAAKC,IAAL,wBAAqC;AAAA,SAAO,EAAEG,kBAAkB;AAAA,aAAM,gBAAN;AAAA,KAApB,EAAP;AAAA,CAArC;AACAJ,KAAKC,IAAL,UAAmB;AAAA,SAAO,EAAEI,oBAAoB,4BAACC,GAAD;AAAA,aAASA,GAAT;AAAA,KAAtB,EAAP;AAAA,CAAnB;AACAN,KAAKC,IAAL,uBAAgC;AAAA,SAAO,EAAEM,eAAe,EAAEC,MAAMR,KAAKG,EAAL,EAAR,EAAmBM,SAAST,KAAKG,EAAL,EAA5B,EAAjB,EAAP;AAAA,CAAhC;;AAEAO,WAAW,YAAM;AACfV,OAAKW,aAAL;AACD,CAFD;;AAIAC,KAAK,mCAAL,EAA0C,YAAM;AAC9C;AACAC,8BAAwBC,gBAAxB;AACD,CAHD;;AAKAF,KAAK,gFAAL,EAAuF,YAAM;AAC3F,kBAAQ;AAAA,WAAO,EAAEG,UAAU,WAAZ,EAAP;AAAA,GAAR;AACA,MAAMC,kBAAkB,oBAAgBf,IAAhB,CAAqBgB,KAArB,CAA2B,CAA3B,EAA8B,CAA9B,CAAxB;AACAJ,SAAOG,kBAAkBE,UAAzB,EAAqCC,IAArC,CAA0C,yCAA1C;AACAN,SAAOG,kBAAkBD,QAAzB,EAAmCI,IAAnC,CAAwC,WAAxC;AACD,CALD;;AAOAP,KAAK,kDAAL,EAAyD,YAAM;AAC7D,kBAAQ,qBAAR;AACA,MAAMI,kBAAkB,oBAAgBf,IAAhB,CAAqBgB,KAArB,CAA2B,CAA3B,EAA8B,CAA9B,CAAxB;AACAJ,SAAOG,iBAAP,EAA0BI,OAA1B,CAAkC,EAAEF,YAAY,yCAAd,EAAlC;AACD,CAJD;;AAMAN,KAAK,6FAAL,EAAoG,YAAM;AACxG,MAAMS,eAAe,+DAArB;AACA,kBAAQ,IAAR,EAAc;AAAA,WAAO,EAAEN,UAAU,WAAZ,EAAP;AAAA,GAAd;AACA,MAAMO,qBAAqB,oBAAgBrB,IAAhB,CAAqBgB,KAArB,CAA2B,CAA3B,EAA8B,CAA9B,CAA3B;AACAJ,SAAOS,oBAAP,EAA6BC,aAA7B,CAA2CF,YAA3C;AACAR,SAAOS,qBAAqBP,QAA5B,EAAsCI,IAAtC,CAA2C,WAA3C;AACD,CAND;;AAQAP,KAAK,qDAAL,EAA4D,YAAM;AAChE,MAAMS,eAAe,+DAArB;AACA,kBAAQ,IAAR,EAAc,qBAAd;AACA,MAAMC,qBAAqB,oBAAgBrB,IAAhB,CAAqBgB,KAArB,CAA2B,CAA3B,EAA8B,CAA9B,CAA3B;AACAJ,SAAOS,oBAAP,EAA6BF,OAA7B,CAAqCC,YAArC;AACD,CALD;;AAOAT,KAAK,4BAAL,EAAmC,YAAM;AACvC,MAAMY,aAAa,SAAbA,UAAa,GAAM,CAAE,CAA3B;AACA,kBAAQ,IAAR,EAAc,IAAd,EAAoBA,UAApB;AACAX,SAAO,oBAAgBZ,IAAhB,CAAqBgB,KAArB,CAA2B,CAA3B,EAA8B,CAA9B,CAAP,EAAyCE,IAAzC,CAA8CK,UAA9C;AACD,CAJD;;AAMAZ,KAAK,yBAAL,EAAgC,YAAM;AACpC,MAAMa,UAAU,EAAhB;AACA,kBAAQ,IAAR,EAAc,IAAd,EAAoB,IAApB,EAA0BA,OAA1B;AACAZ,SAAO,oBAAgBZ,IAAhB,CAAqBgB,KAArB,CAA2B,CAA3B,EAA8B,CAA9B,CAAP,EAAyCE,IAAzC,CAA8CM,OAA9C;AACD,CAJD","file":"spec.js","sourcesContent":["import connect from './';\nimport { connect as originalConnect } from 'react-redux';\nimport { createBuildRoute } from 'domain/createBuildRoute';\nimport { bindActionCreators } from 'redux';\nimport { routerActions } from 'react-router-redux';\n\njest.mock('react-redux', () => ({ connect: jest.fn() }));\njest.mock('domain/createBuildRoute', () => ({ createBuildRoute: () => 'buildRouteMock' }));\njest.mock('redux', () => ({ bindActionCreators: (arg) => arg }));\njest.mock('react-router-redux', () => ({ routerActions: { push: jest.fn(), replace: jest.fn() } }));\n\nbeforeEach(() => {\n  jest.resetAllMocks();\n});\n\ntest('calls Redux\\'s connect() function', () => {\n  connect();\n  expect(originalConnect).toHaveBeenCalled();\n});\n\ntest('passes buildRoute and any other stuff to Redux\\'s connect() in mapStateToProps', () => {\n  connect(() => ({ someProp: 'someValue' }));\n  const mapStateToProps = originalConnect.mock.calls[0][0];\n  expect(mapStateToProps().buildRoute).toBe(createBuildRoute());\n  expect(mapStateToProps().someProp).toBe('someValue');\n});\n\ntest('ignores mapStateToProps if it is not a function ', () => {\n  connect('bad mapStateToProps');\n  const mapStateToProps = originalConnect.mock.calls[0][0];\n  expect(mapStateToProps()).toEqual({ buildRoute: createBuildRoute() });\n});\n\ntest('passes bound router actions and any other stuff to Redux\\'s connect() in mapDispatchToProps', () => {\n  const boundActions = bindActionCreators(routerActions);\n  connect(null, () => ({ someProp: 'someValue' }));\n  const mapDispatchToProps = originalConnect.mock.calls[0][1];\n  expect(mapDispatchToProps()).toMatchObject(boundActions);\n  expect(mapDispatchToProps().someProp).toBe('someValue');\n});\n\ntest('ignores mapDispatchToProps if it is not a function ', () => {\n  const boundActions = bindActionCreators(routerActions);\n  connect(null, 'bad mapStateToProps');\n  const mapDispatchToProps = originalConnect.mock.calls[0][1];\n  expect(mapDispatchToProps()).toEqual(boundActions);\n});\n\ntest('passes mergeProps directly', () => {\n  const mergeProps = () => {};\n  connect(null, null, mergeProps);\n  expect(originalConnect.mock.calls[0][2]).toBe(mergeProps);\n});\n\ntest('passes options directly', () => {\n  const options = {};\n  connect(null, null, null, options);\n  expect(originalConnect.mock.calls[0][3]).toBe(options);\n});\n"]}