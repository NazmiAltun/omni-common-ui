{"version":3,"sources":["domain/parseRoutes/spec.js"],"names":["describe","test","expect","undefined","toBe","routes","component","childRoutes","toEqual","store","getState","onEnter","result"],"mappings":";;;;AAAA;;;;;;AAEAA,SAAS,+BAAT,EAA0C,YAAM;AAC9CC,OAAK,8BAAL,EAAqC,YAAM;AACzCC,WAAO,gBAAYC,SAAZ,CAAP,EAA+BC,IAA/B,CAAoCD,SAApC;AACAD,WAAO,gBAAY,IAAZ,CAAP,EAA0BE,IAA1B,CAA+B,IAA/B;AACAF,WAAO,gBAAY,CAAZ,CAAP,EAAuBE,IAAvB,CAA4B,CAA5B;AACAF,WAAO,gBAAY,OAAZ,CAAP,EAA6BE,IAA7B,CAAkC,OAAlC;AACD,GALD;AAMD,CAPD;;AASAJ,SAAS,oDAAT,EAA+D,YAAM;AACnEC,OAAK,8BAAL,EAAqC,YAAM;AACzC,QAAMI,SAAS;AACbC,iBAAW,aADE;AAEbC,mBAAa,CACX,EAAED,WAAW,aAAb,EADW,EAEX;AACEA,mBAAW,aADb;AAEEC,qBAAa,CACX,EAAED,WAAW,aAAb,EADW;AAFf,OAFW;AAFA,KAAf;;AAaAJ,WAAO,gBAAYG,MAAZ,CAAP,EAA4BG,OAA5B,CAAoCH,MAApC;AACD,GAfD;AAgBD,CAjBD;;AAmBAL,SAAS,iDAAT,EAA4D,YAAM;AAChEC,OAAK,8BAAL,EAAqC,YAAM;AACzC,QAAMQ,QAAQ,EAAEC,UAAU;AAAA,eAAM,WAAN;AAAA,OAAZ,EAAd;AACA,QAAML,SAAS,SAATA,MAAS;AAAA,UAAGK,QAAH,QAAGA,QAAH;AAAA,aAAmB;AAChCJ,mBAAW,aADqB;AAEhCK,iBAAS;AAAA,iBAAMD,UAAN;AAAA,SAFuB;AAGhCH,qBAAa,CACX,EAAED,WAAW,aAAb,EADW,EAEX;AACEA,qBAAW,aADb;AAEEC,uBAAa,CACX,EAAED,WAAW,aAAb,EADW;AAFf,SAFW;AAHmB,OAAnB;AAAA,KAAf;;AAcA,QAAMM,SAAS,gBAAYP,MAAZ,EAAoBI,KAApB,CAAf;AACAP,kBAAcU,MAAd,yCAAcA,MAAd,GAAsBR,IAAtB,CAA2B,QAA3B;AACAF,WAAOU,OAAOD,OAAP,EAAP,EAAyBP,IAAzB,CAA8BK,MAAMC,QAAN,EAA9B;AACD,GAnBD;;AAqBAT,OAAK,8BAAL,EAAqC,YAAM;AACzC,QAAMQ,QAAQ,EAAEC,UAAU;AAAA,eAAM,WAAN;AAAA,OAAZ,EAAd;AACA,QAAML,SAAS;AACbC,iBAAW,aADE;AAEbC,mBAAa,CACX;AAAA,YAAGG,QAAH,SAAGA,QAAH;AAAA,eAAmB;AACjBC,mBAAS;AAAA,mBAAMD,UAAN;AAAA,WADQ;AAEjBJ,qBAAW;AAFM,SAAnB;AAAA,OADW,EAKX;AACEA,mBAAW,aADb;AAEEC,qBAAa,CACX,EAAED,WAAW,aAAb,EADW;AAFf,OALW;AAFA,KAAf;;AAgBA,QAAMM,SAAS,gBAAYP,MAAZ,EAAoBI,KAApB,CAAf;AACAP,mBAAcU,OAAOL,WAAP,CAAmB,CAAnB,CAAd,GAAqCH,IAArC,CAA0C,QAA1C;AACAF,WAAOU,OAAOL,WAAP,CAAmB,CAAnB,EAAsBI,OAAtB,EAAP,EAAwCP,IAAxC,CAA6CK,MAAMC,QAAN,EAA7C;AACD,GArBD;AAsBD,CA5CD","file":"spec.js","sourcesContent":["import parseRoutes from './';\n\ndescribe('when receiving strange inputs', () => {\n  test('returns the same it receives', () => {\n    expect(parseRoutes(undefined)).toBe(undefined);\n    expect(parseRoutes(null)).toBe(null);\n    expect(parseRoutes(2)).toBe(2);\n    expect(parseRoutes('hello')).toBe('hello');\n  });\n});\n\ndescribe('when receiving a route structure with no functions', () => {\n  test('returns the same it receives', () => {\n    const routes = {\n      component: 'component 1',\n      childRoutes: [\n        { component: 'component 2' },\n        {\n          component: 'component 3',\n          childRoutes: [\n            { component: 'component 4' },\n          ],\n        },\n      ],\n    };\n\n    expect(parseRoutes(routes)).toEqual(routes);\n  });\n});\n\ndescribe('when receiving a route structure with functions', () => {\n  test('returns the same it receives', () => {\n    const store = { getState: () => 'the state' };\n    const routes = ({ getState }) => ({\n      component: 'component 1',\n      onEnter: () => getState(),\n      childRoutes: [\n        { component: 'component 2' },\n        {\n          component: 'component 3',\n          childRoutes: [\n            { component: 'component 4' },\n          ],\n        },\n      ],\n    });\n\n    const result = parseRoutes(routes, store);\n    expect(typeof result).toBe('object');\n    expect(result.onEnter()).toBe(store.getState());\n  });\n\n  test('returns the same it receives', () => {\n    const store = { getState: () => 'the state' };\n    const routes = {\n      component: 'component 1',\n      childRoutes: [\n        ({ getState }) => ({\n          onEnter: () => getState(),\n          component: 'component 2',\n        }),\n        {\n          component: 'component 3',\n          childRoutes: [\n            { component: 'component 4' },\n          ],\n        },\n      ],\n    };\n\n    const result = parseRoutes(routes, store);\n    expect(typeof result.childRoutes[0]).toBe('object');\n    expect(result.childRoutes[0].onEnter()).toBe(store.getState());\n  });\n});\n"]}