{"version":3,"sources":["domain/parseRoutes/spec.js"],"names":["describe","context","it","undefined","to","equal","routes","component","childRoutes","eql","store","getState","onEnter","result","be","a"],"mappings":";;AAAA;;AACA;;;;;;AAEAA,SAAS,eAAT,EAA0B,YAAM;AAC9BC,UAAQ,+BAAR,EAAyC,YAAM;AAC7CC,OAAG,8BAAH,EAAmC,YAAM;AACvC,wBAAO,gBAAYC,SAAZ,CAAP,EAA+BC,EAA/B,CAAkCC,KAAlC,CAAwCF,SAAxC,EAAmD,qBAAnD;AACA,wBAAO,gBAAY,IAAZ,CAAP,EAA0BC,EAA1B,CAA6BC,KAA7B,CAAmC,IAAnC,EAAyC,gBAAzC;AACA,wBAAO,gBAAY,CAAZ,CAAP,EAAuBD,EAAvB,CAA0BC,KAA1B,CAAgC,CAAhC,EAAmC,oBAAnC;AACA,wBAAO,gBAAY,OAAZ,CAAP,EAA6BD,EAA7B,CAAgCC,KAAhC,CAAsC,OAAtC,EAA+C,oBAA/C;AACD,KALD;AAMD,GAPD;;AASAJ,UAAQ,oDAAR,EAA8D,YAAM;AAClEC,OAAG,8BAAH,EAAmC,YAAM;AACvC,UAAMI,SAAS;AACbC,mBAAW,aADE;AAEbC,qBAAa,CACX,EAAED,WAAW,aAAb,EADW,EAEX;AACEA,qBAAW,aADb;AAEEC,uBAAa,CACX,EAAED,WAAW,aAAb,EADW;AAFf,SAFW;AAFA,OAAf;;AAaA,wBAAO,gBAAYD,MAAZ,CAAP,EAA4BF,EAA5B,CAA+BK,GAA/B,CAAmCH,MAAnC;AACD,KAfD;AAgBD,GAjBD;;AAmBAL,UAAQ,iDAAR,EAA2D,YAAM;AAC/DC,OAAG,8BAAH,EAAmC,YAAM;AACvC,UAAMQ,QAAQ,EAAEC,UAAU;AAAA,iBAAM,WAAN;AAAA,SAAZ,EAAd;AACA,UAAML,SAAS,SAATA,MAAS;AAAA,YAAGK,QAAH,QAAGA,QAAH;AAAA,eAAmB;AAChCJ,qBAAW,aADqB;AAEhCK,mBAAS;AAAA,mBAAMD,UAAN;AAAA,WAFuB;AAGhCH,uBAAa,CACX,EAAED,WAAW,aAAb,EADW,EAEX;AACEA,uBAAW,aADb;AAEEC,yBAAa,CACX,EAAED,WAAW,aAAb,EADW;AAFf,WAFW;AAHmB,SAAnB;AAAA,OAAf;;AAcA,UAAMM,SAAS,gBAAYP,MAAZ,EAAoBI,KAApB,CAAf;AACA,wBAAOG,MAAP,EAAeT,EAAf,CAAkBU,EAAlB,CAAqBC,CAArB,CAAuB,QAAvB;AACA,wBAAOF,OAAOD,OAAP,EAAP,EAAyBR,EAAzB,CAA4BC,KAA5B,CAAkCK,MAAMC,QAAN,EAAlC;AACD,KAnBD;;AAqBAT,OAAG,8BAAH,EAAmC,YAAM;AACvC,UAAMQ,QAAQ,EAAEC,UAAU;AAAA,iBAAM,WAAN;AAAA,SAAZ,EAAd;AACA,UAAML,SAAS;AACbC,mBAAW,aADE;AAEbC,qBAAa,CACX;AAAA,cAAGG,QAAH,SAAGA,QAAH;AAAA,iBAAmB;AACjBC,qBAAS;AAAA,qBAAMD,UAAN;AAAA,aADQ;AAEjBJ,uBAAW;AAFM,WAAnB;AAAA,SADW,EAKX;AACEA,qBAAW,aADb;AAEEC,uBAAa,CACX,EAAED,WAAW,aAAb,EADW;AAFf,SALW;AAFA,OAAf;;AAgBA,UAAMM,SAAS,gBAAYP,MAAZ,EAAoBI,KAApB,CAAf;AACA,wBAAOG,OAAOL,WAAP,CAAmB,CAAnB,CAAP,EAA8BJ,EAA9B,CAAiCU,EAAjC,CAAoCC,CAApC,CAAsC,QAAtC;AACA,wBAAOF,OAAOL,WAAP,CAAmB,CAAnB,EAAsBI,OAAtB,EAAP,EAAwCR,EAAxC,CAA2CC,KAA3C,CAAiDK,MAAMC,QAAN,EAAjD;AACD,KArBD;AAsBD,GA5CD;AA6CD,CA1ED","file":"spec.js","sourcesContent":["import { expect } from 'chai';\nimport parseRoutes from './';\n\ndescribe('parseRoutes()', () => {\n  context('when receiving strange inputs', () => {\n    it('returns the same it receives', () => {\n      expect(parseRoutes(undefined)).to.equal(undefined, 'routes is undefined');\n      expect(parseRoutes(null)).to.equal(null, 'routes is null');\n      expect(parseRoutes(2)).to.equal(2, 'routes is a number');\n      expect(parseRoutes('hello')).to.equal('hello', 'routes is a string');\n    });\n  });\n\n  context('when receiving a route structure with no functions', () => {\n    it('returns the same it receives', () => {\n      const routes = {\n        component: 'component 1',\n        childRoutes: [\n          { component: 'component 2' },\n          {\n            component: 'component 3',\n            childRoutes: [\n              { component: 'component 4' },\n            ],\n          },\n        ],\n      };\n\n      expect(parseRoutes(routes)).to.eql(routes);\n    });\n  });\n\n  context('when receiving a route structure with functions', () => {\n    it('returns the same it receives', () => {\n      const store = { getState: () => 'the state' };\n      const routes = ({ getState }) => ({\n        component: 'component 1',\n        onEnter: () => getState(),\n        childRoutes: [\n          { component: 'component 2' },\n          {\n            component: 'component 3',\n            childRoutes: [\n              { component: 'component 4' },\n            ],\n          },\n        ],\n      });\n\n      const result = parseRoutes(routes, store);\n      expect(result).to.be.a('object');\n      expect(result.onEnter()).to.equal(store.getState());\n    });\n\n    it('returns the same it receives', () => {\n      const store = { getState: () => 'the state' };\n      const routes = {\n        component: 'component 1',\n        childRoutes: [\n          ({ getState }) => ({\n            onEnter: () => getState(),\n            component: 'component 2',\n          }),\n          {\n            component: 'component 3',\n            childRoutes: [\n              { component: 'component 4' },\n            ],\n          },\n        ],\n      };\n\n      const result = parseRoutes(routes, store);\n      expect(result.childRoutes[0]).to.be.a('object');\n      expect(result.childRoutes[0].onEnter()).to.equal(store.getState());\n    });\n  });\n});\n"]}