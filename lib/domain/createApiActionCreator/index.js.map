{"version":3,"sources":["domain/createApiActionCreator/index.js"],"names":["createApiActionCreator","actionObjectName","url","method","dispatch","prefix","toUpperCase","upperActionObjectName","createFetchRequestAction","payload","then","response","createFetchSuccessAction","catch","error","createFetchFailureAction","type","createAction","curried","args","length","apply","rest","concat"],"mappings":";;;;;;AAAA;;AACA;;;;;;AAEA;;;;;;;;;;AAUA,IAAMA,yBAAyB,SAAzBA,sBAAyB,CAACC,gBAAD,EAAmBC,GAAnB;AAAA,MAAwBC,MAAxB,uEAAiC,KAAjC;AAAA,SAC7B,UAACC,QAAD,EAAc;AACZ,QAAMC,SAAU,YAAM;AACpB,cAAQF,OAAOG,WAAP,EAAR;AACE,aAAK,QAAL;AAAe,iBAAO,SAAP;AACf,aAAK,MAAL,CAAa,KAAK,KAAL;AAAY,iBAAO,SAAP;AACzB,aAAK,KAAL,CAAY;AAAS,iBAAO,QAAP;AAHvB;AAKD,KANc,EAAf;;AAQA,QAAMC,wBAAwBN,iBAAiBK,WAAjB,EAA9B;;AAEA,WAAOF,SAASI,0BAAT,EAAqCC,OAArC,CACJC,IADI,CACC,UAACC,QAAD;AAAA,aAAcP,SAASQ,yBAAyBD,QAAzB,CAAT,CAAd;AAAA,KADD,EAEJE,KAFI,CAEE,UAACC,KAAD;AAAA,aAAWV,SAASW,yBAAyBD,KAAzB,CAAT,CAAX;AAAA,KAFF,CAAP;;AAIA,aAASN,wBAAT,GAAoC;AAClC,UAAMQ,YAAUX,MAAV,GAAmBE,qBAAnB,aAAN;AACA,aAAO,mBAAQU,YAAR,CAAqB;AAC1BD,kBAD0B,EACpBd,QADoB,EACfC,cADe,EACPM,SAAS,gBAAMP,GAAN;AADF,OAArB,CAAP;AAGD;;AAED,aAASU,wBAAT,CAAkCD,QAAlC,EAA4C;AAC1C,UAAMK,YAAUX,MAAV,GAAmBE,qBAAnB,aAAN;AACA,aAAO,mBAAQU,YAAR,CAAqB;AAC1BD,kBAD0B,EACpBd,QADoB,EACfC,cADe,EACPM,SAASE;AADF,OAArB,CAAP;AAGD;;AAED,aAASI,wBAAT,CAAkCD,KAAlC,EAAyC;AACvC,UAAME,YAAUX,MAAV,GAAmBE,qBAAnB,aAAN;AACA,aAAO,mBAAQU,YAAR,CAAqB;AAC1BD,kBAD0B,EACpBd,QADoB,EACfC,cADe,EACPW;AADO,OAArB,CAAP;AAGD;AACF,GApC4B;AAAA,CAA/B;;AAsCA,IAAMI,UAAU,SAAVA,OAAU,GAAa;AAAA,oCAATC,IAAS;AAATA,QAAS;AAAA;;AAC3B,MAAIA,KAAKC,MAAL,IAAepB,uBAAuBoB,MAA1C,EAAkD;AAChD,WAAOpB,uBAAuBqB,KAAvB,YAAmCF,IAAnC,CAAP;AACD;AACD,SAAO;AAAA,uCAAIG,IAAJ;AAAIA,UAAJ;AAAA;;AAAA,WAAaJ,QAAQG,KAAR,YAAoBF,KAAKI,MAAL,CAAYD,IAAZ,CAApB,CAAb;AAAA,GAAP;AACD,CALD;;kBAOeJ,O","file":"index.js","sourcesContent":["import { fetch } from 'domain/Api';\nimport ApiCall from 'containers/ApiCalls';\n\n/*\n * Supports currying so that args can be recycled more conveniently.\n * A contrived example:\n * ```\n * const createCreatorForX = createApiActionCreator('NOTIFICATION', 'http://...');\n * const getXActionCreator = createCreatorForX('GET');\n * const postXActionCreator = createCreatorForX('POST');\n * ```\n */\n\nconst createApiActionCreator = (actionObjectName, url, method = 'GET') =>\n  (dispatch) => {\n    const prefix = (() => {\n      switch (method.toUpperCase()) {\n        case 'DELETE': return 'DELETE_';\n        case 'POST': case 'PUT': return 'SUBMIT_';\n        case 'GET': default: return 'FETCH_';\n      }\n    })();\n\n    const upperActionObjectName = actionObjectName.toUpperCase();\n\n    return dispatch(createFetchRequestAction()).payload\n      .then((response) => dispatch(createFetchSuccessAction(response)))\n      .catch((error) => dispatch(createFetchFailureAction(error)));\n\n    function createFetchRequestAction() {\n      const type = `${prefix}${upperActionObjectName}_REQUEST`;\n      return ApiCall.createAction({\n        type, url, method, payload: fetch(url),\n      });\n    }\n\n    function createFetchSuccessAction(response) {\n      const type = `${prefix}${upperActionObjectName}_SUCCESS`;\n      return ApiCall.createAction({\n        type, url, method, payload: response,\n      });\n    }\n\n    function createFetchFailureAction(error) {\n      const type = `${prefix}${upperActionObjectName}_FAILURE`;\n      return ApiCall.createAction({\n        type, url, method, error,\n      });\n    }\n  };\n\nconst curried = (...args) => {\n  if (args.length >= createApiActionCreator.length) {\n    return createApiActionCreator.apply(this, args);\n  }\n  return (...rest) => curried.apply(this, args.concat(rest));\n};\n\nexport default curried;\n"]}