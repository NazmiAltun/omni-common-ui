{"version":3,"sources":["domain/createApiActionCreator/index.js"],"names":["createApiActionCreator","requestActionType","successActionType","failureActionType","url","method","dispatch","createFetchRequestAction","payload","then","response","createFetchSuccessAction","catch","error","createFetchFailureAction","createAction","type","curried","args","length","apply","rest","concat"],"mappings":";;;;;;AAAA;;AACA;;;;;;AAEA;;;;;;;;;;;AAWA,IAAMA,yBAAyB,SAAzBA,sBAAyB,CAC3BC,iBAD2B,EACRC,iBADQ,EACWC,iBADX,EAC8BC,GAD9B;AAAA,MACmCC,MADnC,uEAC4C,KAD5C;AAAA,SAE7B,UAACC,QAAD,EAAc;AACZ,WAAOA,SAASC,0BAAT,EAAqCC,OAArC,CACJC,IADI,CACC,UAACC,QAAD;AAAA,aAAcJ,SAASK,yBAAyBD,QAAzB,CAAT,CAAd;AAAA,KADD,EAEJE,KAFI,CAEE,UAACC,KAAD;AAAA,aAAWP,SAASQ,yBAAyBD,KAAzB,CAAT,CAAX;AAAA,KAFF,CAAP;;AAIA,aAASN,wBAAT,GAAoC;AAClC,aAAO,mBAAQQ,YAAR,CAAqB;AAC1BC,cAAMf,iBADoB;AAE1BO,iBAAS,gBAAMJ,GAAN,CAFiB;AAG1BA,gBAH0B;AAI1BC;AAJ0B,OAArB,CAAP;AAMD;;AAED,aAASM,wBAAT,CAAkCD,QAAlC,EAA4C;AAC1C,aAAO,mBAAQK,YAAR,CAAqB;AAC1BC,cAAMd,iBADoB;AAE1BM,iBAASE,QAFiB;AAG1BN,gBAH0B;AAI1BC;AAJ0B,OAArB,CAAP;AAMD;;AAED,aAASS,wBAAT,CAAkCD,KAAlC,EAAyC;AACvC,aAAO,mBAAQE,YAAR,CAAqB;AAC1BC,cAAMb,iBADoB;AAE1BU,oBAF0B;AAG1BT,gBAH0B;AAI1BC;AAJ0B,OAArB,CAAP;AAMD;AACF,GAjC4B;AAAA,CAA/B;;AAmCA,IAAMY,UAAU,SAAVA,OAAU,GAAa;AAAA,oCAATC,IAAS;AAATA,QAAS;AAAA;;AAC3B,MAAIA,KAAKC,MAAL,IAAenB,uBAAuBmB,MAA1C,EAAkD;AAChD,WAAOnB,uBAAuBoB,KAAvB,YAAmCF,IAAnC,CAAP;AACD;AACD,SAAO;AAAA,uCAAIG,IAAJ;AAAIA,UAAJ;AAAA;;AAAA,WAAaJ,QAAQG,KAAR,YAAoBF,KAAKI,MAAL,CAAYD,IAAZ,CAApB,CAAb;AAAA,GAAP;AACD,CALD;;kBAOeJ,O","file":"index.js","sourcesContent":["import { fetch } from 'domain/Api';\nimport ApiCall from 'containers/ApiCalls';\n\n/*\n * Supports currying so that args can be recycled more conveniently.\n * A contrived example:\n * ```\n * const createCreatorForX =\n *    createApiActionCreator('X_REQUEST', 'X_SUCCESS', 'X_FAILURE', 'http://...');\n * const getXActionCreator = createCreatorForX('GET');\n * const postXActionCreator = createCreatorForX('POST');\n * ```\n */\n\nconst createApiActionCreator = (\n    requestActionType, successActionType, failureActionType, url, method = 'GET') =>\n  (dispatch) => {\n    return dispatch(createFetchRequestAction()).payload\n      .then((response) => dispatch(createFetchSuccessAction(response)))\n      .catch((error) => dispatch(createFetchFailureAction(error)));\n\n    function createFetchRequestAction() {\n      return ApiCall.createAction({\n        type: requestActionType,\n        payload: fetch(url),\n        url,\n        method,\n      });\n    }\n\n    function createFetchSuccessAction(response) {\n      return ApiCall.createAction({\n        type: successActionType,\n        payload: response,\n        url,\n        method,\n      });\n    }\n\n    function createFetchFailureAction(error) {\n      return ApiCall.createAction({\n        type: failureActionType,\n        error,\n        url,\n        method,\n      });\n    }\n  };\n\nconst curried = (...args) => {\n  if (args.length >= createApiActionCreator.length) {\n    return createApiActionCreator.apply(this, args);\n  }\n  return (...rest) => curried.apply(this, args.concat(rest));\n};\n\nexport default curried;\n"]}