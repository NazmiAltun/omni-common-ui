{"version":3,"sources":["domain/createApiActionCreator/index.js"],"names":["REQUIRED_ARGS_COUNT","createApiActionCreator","actionObjectName","url","method","requestExtras","successExtras","failureExtras","dispatch","prefix","toUpperCase","upperActionObjectName","createFetchRequestAction","payload","then","response","createFetchSuccessAction","catch","error","createFetchFailureAction","type","action","createAction","curried","args","length","apply","object","options","call","rest","concat"],"mappings":";;;;;;;;AAAA;;;;AACA;;AACA;;;;;;AAEA;;;;;;;;;;AAUA,IAAMA,sBAAsB,CAA5B;;AAEA,IAAMC,yBAAyB,SAAzBA,sBAAyB,CAACC,gBAAD,EAC3BC,GAD2B;AAAA,MACtBC,MADsB,uEACb,KADa;AAAA,MAE3BC,aAF2B,uEAEX,EAFW;AAAA,MAEPC,aAFO,uEAES,EAFT;AAAA,MAEaC,aAFb,uEAE6B,EAF7B;AAAA,SAEqC;;AAElE,cAACC,QAAD,EAAc;AACZ,UAAMC,SAAU,YAAM;AACpB,gBAAQL,OAAOM,WAAP,EAAR;AACE,eAAK,QAAL;AAAe,mBAAO,SAAP;AACf,eAAK,MAAL,CAAa,KAAK,KAAL;AAAY,mBAAO,SAAP;AACzB,eAAK,KAAL,CAAY;AAAS,mBAAO,QAAP;AAHvB;AAKD,OANc,EAAf;;AAQA,UAAMC,wBAAwBT,iBAAiBQ,WAAjB,EAA9B;;AAEA,aAAOF,SAASI,0BAAT,EAAqCC,OAArC,CACJC,IADI,CACC,UAACC,QAAD;AAAA,eAAcP,SAASQ,yBAAyBD,QAAzB,CAAT,CAAd;AAAA,OADD,EAEJE,KAFI,CAEE,UAACC,KAAD;AAAA,eAAWV,SAASW,yBAAyBD,KAAzB,CAAT,CAAX;AAAA,OAFF,CAAP;;AAIA,eAASN,wBAAT,GAAoC;AAClC,YAAMQ,YAAUX,MAAV,GAAmBE,qBAAnB,aAAN;AACA,YAAMU;AACJD,oBADI,EACEjB,QADF,EACOC,cADP,IACkBC,aADlB,CAAN;AAGA;AACA,YAAI,CAAEA,cAAcQ,OAApB,EAA6B;AAC3BQ,iBAAOR,OAAP,GAAiB,gBAAMV,GAAN,CAAjB;AACD;AACD,eAAO,mBAAQmB,YAAR,CAAqBD,MAArB,CAAP;AACD;;AAED,eAASL,wBAAT,CAAkCD,QAAlC,EAA4C;AAC1C,YAAMK,YAAUX,MAAV,GAAmBE,qBAAnB,aAAN;AACA,eAAO,mBAAQW,YAAR;AACLF,oBADK,EACCjB,QADD,EACMC,cADN,EACcS,SAASE,QADvB,IACoCT,aADpC,EAAP;AAGD;;AAED,eAASa,wBAAT,CAAkCD,KAAlC,EAAyC;AACvC,YAAME,YAAUX,MAAV,GAAmBE,qBAAnB,aAAN;AACA,eAAO,mBAAQW,YAAR;AACLF,oBADK,EACCjB,QADD,EACMC,cADN,EACcc,YADd,IACwBX,aADxB,EAAP;AAGD;AACF;AA5C4B;AAAA,CAA/B;;AA8CA,IAAMgB,UAAU,SAAVA,OAAU,GAAa;AAAA,oCAATC,IAAS;AAATA,QAAS;AAAA;;AAC3B,MAAIA,KAAKC,MAAL,IAAezB,mBAAnB,EAAwC;AACtC,WAAOC,uBAAuByB,KAAvB,YAAmCF,IAAnC,CAAP;AACD;AACD,MAAIA,KAAKC,MAAL,KAAgB,CAAhB,IAAqB,gBAAGE,MAAH,CAAUH,KAAK,CAAL,CAAV,CAAzB,EAA6C;AAAG;AAC9C,QAAMI,UAAUJ,KAAK,CAAL,CAAhB;AACA,WAAOvB,uBAAuB4B,IAAvB,YACHD,QAAQ1B,gBADL,EAEH0B,QAAQzB,GAFL,EAGHyB,QAAQxB,MAHL,EAIHwB,QAAQvB,aAJL,EAKHuB,QAAQtB,aALL,EAMHsB,QAAQrB,aANL,CAAP;AAOD;AACD,SAAO;AAAA,uCAAIuB,IAAJ;AAAIA,UAAJ;AAAA;;AAAA,WACLP,QAAQG,KAAR,YAAoBF,KAAKO,MAAL,CAAYD,IAAZ,CAApB,CADK;AAAA,GAAP;AAED,CAhBD;;kBAkBeP,O","file":"index.js","sourcesContent":["import is from 'is_js';\nimport { fetch } from 'domain/Api';\nimport ApiCall from 'containers/ApiCalls';\n\n/*\n * Supports currying so that args can be recycled more conveniently.\n * A contrived example:\n * ```\n * const createCreatorForX = createApiActionCreator('NOTIFICATION', 'http://...');\n * const getXActionCreator = createCreatorForX('GET');\n * const postXActionCreator = createCreatorForX('POST');\n * ```\n */\n\nconst REQUIRED_ARGS_COUNT = 3;\n\nconst createApiActionCreator = (actionObjectName,\n    url, method = 'GET',\n    requestExtras = {}, successExtras = {}, failureExtras = {}) =>  // these are optional!\n\n  (dispatch) => {\n    const prefix = (() => {\n      switch (method.toUpperCase()) {\n        case 'DELETE': return 'DELETE_';\n        case 'POST': case 'PUT': return 'SUBMIT_';\n        case 'GET': default: return 'FETCH_';\n      }\n    })();\n\n    const upperActionObjectName = actionObjectName.toUpperCase();\n\n    return dispatch(createFetchRequestAction()).payload\n      .then((response) => dispatch(createFetchSuccessAction(response)))\n      .catch((error) => dispatch(createFetchFailureAction(error)));\n\n    function createFetchRequestAction() {\n      const type = `${prefix}${upperActionObjectName}_REQUEST`;\n      const action = {\n        type, url, method, ...requestExtras,\n      };\n      // do a bog standard GET if `payload` was not supplied in the extras\n      if (! requestExtras.payload) {\n        action.payload = fetch(url);\n      }\n      return ApiCall.createAction(action);\n    }\n\n    function createFetchSuccessAction(response) {\n      const type = `${prefix}${upperActionObjectName}_SUCCESS`;\n      return ApiCall.createAction({\n        type, url, method, payload: response, ...successExtras,\n      });\n    }\n\n    function createFetchFailureAction(error) {\n      const type = `${prefix}${upperActionObjectName}_FAILURE`;\n      return ApiCall.createAction({\n        type, url, method, error, ...failureExtras,\n      });\n    }\n  };\n\nconst curried = (...args) => {\n  if (args.length >= REQUIRED_ARGS_COUNT) {\n    return createApiActionCreator.apply(this, args);\n  }\n  if (args.length === 1 && is.object(args[0])) {  // allow first arg to be an options hash\n    const options = args[0];\n    return createApiActionCreator.call(this,\n        options.actionObjectName,\n        options.url,\n        options.method,\n        options.requestExtras,\n        options.successExtras,\n        options.failureExtras);\n  }\n  return (...rest) =>\n    curried.apply(this, args.concat(rest));\n};\n\nexport default curried;\n"]}