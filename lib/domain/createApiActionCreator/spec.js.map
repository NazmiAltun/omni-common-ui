{"version":3,"sources":["domain/createApiActionCreator/spec.js"],"names":["jest","mock","fetch","url","createAction","param","test","expect","function","toBe","describe","satisfied","length","thunk","fetchRequestAction","toEqual","type","method","payload","then","catch","spyOn","mockImplementation","mockClear","calls"],"mappings":"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","file":"spec.js","sourcesContent":["import is from 'is_js';\nimport Api from 'domain/Api';\nimport createApiActionCreator from './';\n\njest.mock('domain/Api', () => ({\n  fetch: (url) => url,\n}));\njest.mock('containers/ApiCalls', () => ({\n  createAction: (param) => param,\n}));\n\ntest('is a function', () => {\n  expect(is.function(createApiActionCreator)).toBe(true);\n});\n\ndescribe('curry test', () => {\n  test('returns a function if given an incomplete set of args', () => {\n    expect(is.function(createApiActionCreator('object'))).toBe(true);\n  });\n\n  test('returns a function accepting a single dispatch arg if given all args', () => {\n    const satisfied = createApiActionCreator('object', 'url', 'method');\n    expect(satisfied.length).toBe(1);\n  });\n\n  test('returns a function accepting a single dispatch arg if given an object arg', () => {\n    const satisfied = createApiActionCreator({});\n    expect(satisfied.length).toBe(1);\n  });\n});\n\ntest('creates some actions!', () => {\n  const thunk = createApiActionCreator('object', 'url', 'method');\n  thunk((fetchRequestAction) => {\n    expect(fetchRequestAction).toEqual({\n      type: 'FETCH_OBJECT_REQUEST',\n      url: 'url',\n      method: 'method',\n      payload: 'url',\n    });\n    return {\n      payload: {\n        then: () => ({\n          catch: () => {},\n        }),\n      },\n    };\n  });\n});\n\ntest('calls basic fetch once when a `payload` was not supplied', () => {\n  const thunk = createApiActionCreator('object', 'url', 'method');\n  const fetch = jest.spyOn(Api, 'fetch')\n      .mockImplementation((url) => url);\n  fetch.mockClear();\n  thunk(() => {\n    expect(fetch.mock.calls.length).toBe(1);\n    expect(fetch.mock.calls[0]).toEqual(['url']);\n    return {\n      payload: {\n        then: () => ({\n          catch: () => {},\n        }),\n      },\n    };\n  });\n});\n\ntest('calls supplied fetch once when a `payload` was supplied', () => {\n  const fetch = jest.spyOn(Api, 'fetch')\n      .mockImplementation((url) => url);\n  fetch.mockClear();\n  const thunk = createApiActionCreator('object', 'url', 'method', {\n    payload: fetch('url2', { method: 'PUT' }),\n  });\n  thunk(() => {\n    expect(fetch.mock.calls.length).toBe(1);\n    expect(fetch.mock.calls[0]).toEqual(['url2', { method: 'PUT' }]);\n    return {\n      payload: {\n        then: () => ({\n          catch: () => {},\n        }),\n      },\n    };\n  });\n});\n"]}