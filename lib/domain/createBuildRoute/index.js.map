{"version":3,"sources":["domain/createBuildRoute/index.js"],"names":["normalizeUrl","createBuildRoute","ownProps","args","route","getRoute","params","getParams","not","object","empty","location","pathname","newRoute","routes","forEach","routePiece","string","path","finalParams","Object","assign","replace","length","undefined","url","result","newResult"],"mappings":";;;;;;QA4CgBA,Y,GAAAA,Y;;AA5ChB;;;;AAEA;;;;AAEO,IAAMC,8CAAmB,SAAnBA,gBAAmB,CAACC,QAAD;AAAA,SAAc,YAAa;AAAA,sCAATC,IAAS;AAATA,UAAS;AAAA;;AACzD,QAAMC,QAAQC,SAASF,IAAT,CAAd;AACA,QAAMG,SAASC,UAAUJ,IAAV,CAAf;AACA,QAAI,gBAAGK,GAAH,CAAOC,MAAP,CAAcH,MAAd,KAAyB,gBAAGI,KAAH,CAASJ,MAAT,CAA7B,EAA+C;AAC7C,aAAON,mBAAiBE,SAASS,QAAT,CAAkBC,QAAnC,SAA+CR,KAA/C,CAAP;AACD;;AAED,QAAIS,WAAW,EAAf;AACAX,aAASY,MAAT,CAAgBC,OAAhB,CAAwB,UAACC,UAAD,EAAgB;AACtC,UAAI,gBAAGR,GAAH,CAAOS,MAAP,CAAcD,WAAWE,IAAzB,CAAJ,EAAoC;AAClC;AACD;;AAEDL,iBAAcA,QAAd,SAA0BG,WAAWE,IAArC;AACD,KAND;;AAQAL,eAAWb,mBAAiBa,QAAjB,SAA6BT,KAA7B,CAAX;;AAEA,QAAMe,cAAcC,OAAOC,MAAP,CAAc,EAAd,EAAkBnB,SAASI,MAA3B,EAAmCA,MAAnC,CAApB;AACAO,eAAW,gCAAcA,QAAd,EAAwBM,WAAxB,CAAX;;AAEA,WAAON,SAASS,OAAT,CAAiB,KAAjB,EAAwB,EAAxB,CAAP;AACD,GAtB+B;AAAA,CAAzB;;AAwBP,SAASjB,QAAT,CAAkBF,IAAlB,EAAwB;AACtB,SAAO,gBAAGc,MAAH,CAAUd,KAAK,CAAL,CAAV,IAAqBA,KAAK,CAAL,CAArB,GAA+B,EAAtC;AACD;;AAED,SAASI,SAAT,CAAmBJ,IAAnB,EAAyB;AACvB,MAAIA,KAAKoB,MAAL,KAAgB,CAAhB,IAAqB,gBAAGd,MAAH,CAAUN,KAAK,CAAL,CAAV,CAAzB,EAA6C;AAC3C,WAAOA,KAAK,CAAL,CAAP;AACD;;AAED,MAAIA,KAAKoB,MAAL,GAAc,CAAlB,EAAqB;AACnB,WAAOpB,KAAK,CAAL,CAAP;AACD;;AAED,SAAOqB,SAAP;AACD;;AAEM,SAASxB,YAAT,CAAsByB,GAAtB,EAA2B;AAChC,MAAIC,SAASD,IAAIH,OAAJ,CAAY,gBAAZ,EAA8B,KAA9B,CAAb,CADgC,CACmB;AACnD,SAAO,IAAP,EAAa;AAAE;AACb,QAAMK,YAAYD,OAAOJ,OAAP,CAAe,2BAAf,EAA4C,IAA5C,CAAlB;AACA,QAAII,WAAWC,SAAf,EAA0B;AACxB;AACD;;AAEDD,aAASC,SAAT;AACD;AACDD,WAASA,OAAOJ,OAAP,CAAe,OAAf,EAAwB,EAAxB,CAAT,CAVgC,CAUM;;AAEtC,SAAOI,MAAP;AACD;;kBAEczB,gB","file":"index.js","sourcesContent":["import is from 'is_js';\n\nimport { formatPattern } from 'react-router';\n\nexport const createBuildRoute = (ownProps) => (...args) => {\n  const route = getRoute(args);\n  const params = getParams(args);\n  if (is.not.object(params) || is.empty(params)) {\n    return normalizeUrl(`/${ownProps.location.pathname}/${route}`);\n  }\n\n  let newRoute = '';\n  ownProps.routes.forEach((routePiece) => {\n    if (is.not.string(routePiece.path)) {\n      return;\n    }\n\n    newRoute = `${newRoute}/${routePiece.path}`;\n  });\n\n  newRoute = normalizeUrl(`/${newRoute}/${route}`);\n\n  const finalParams = Object.assign({}, ownProps.params, params);\n  newRoute = formatPattern(newRoute, finalParams);\n\n  return newRoute.replace(/\\/$/, '');\n};\n\nfunction getRoute(args) {\n  return is.string(args[0]) ? args[0] : '';\n}\n\nfunction getParams(args) {\n  if (args.length === 1 && is.object(args[0])) {\n    return args[0];\n  }\n\n  if (args.length > 1) {\n    return args[1];\n  }\n\n  return undefined;\n}\n\nexport function normalizeUrl(url) {\n  let result = url.replace(/(^|[\\w-])\\/+/gi, '$1/'); // Gets rid of duplicated slashes (//)\n  while (true) { // Interprets two dots (..), going up in the path for each occurrence\n    const newResult = result.replace(/((^\\/)|[\\w-]*\\/)\\.\\.\\/?/gi, '$2');\n    if (result === newResult) {\n      break;\n    }\n\n    result = newResult;\n  }\n  result = result.replace(/\\.\\//g, ''); // Gets rid of ./\n\n  return result;\n}\n\nexport default createBuildRoute;\n"]}