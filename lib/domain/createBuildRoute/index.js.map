{"version":3,"sources":["domain/createBuildRoute/index.js"],"names":["normalizeUrl","createBuildRoute","ownProps","args","route","getRoute","params","getParams","root","test","getRoot","routes","finalParams","Object","assign","string","length","object","undefined","newRoute","forEach","routePiece","not","path","url","result","replace","newResult"],"mappings":";;;;;;QAyCgBA,Y,GAAAA,Y;;AAzChB;;;;AAEA;;;;AAEO,IAAMC,8CAAmB,SAAnBA,gBAAmB,CAACC,QAAD;AAAA,SAAc,YAAa;AAAA,sCAATC,IAAS;AAATA,UAAS;AAAA;;AACzD,QAAMC,QAAQC,SAASF,IAAT,CAAd;AACA,QAAMG,SAASC,UAAUJ,IAAV,CAAf;AACA,QAAMK,OAAO,MAAMC,IAAN,CAAWL,KAAX,IAAoB,GAApB,GAA0BM,QAAQR,SAASS,MAAjB,CAAvC;AACA,QAAMC,cAAcC,OAAOC,MAAP,CAAc,EAAd,EAAkBZ,SAASI,MAA3B,EAAmCA,MAAnC,CAApB;AACA,WAAON,aAAa,sCAAkBQ,IAAlB,SAA0BJ,KAA1B,EAAmCQ,WAAnC,CAAb,CAAP;AACD,GAN+B;AAAA,CAAzB;;AAQP,SAASP,QAAT,CAAkBF,IAAlB,EAAwB;AACtB,SAAO,gBAAGY,MAAH,CAAUZ,KAAK,CAAL,CAAV,IAAqBA,KAAK,CAAL,CAArB,GAA+B,EAAtC;AACD;;AAED,SAASI,SAAT,CAAmBJ,IAAnB,EAAyB;AACvB,MAAIA,KAAKa,MAAL,KAAgB,CAAhB,IAAqB,gBAAGC,MAAH,CAAUd,KAAK,CAAL,CAAV,CAAzB,EAA6C;AAC3C,WAAOA,KAAK,CAAL,CAAP;AACD;;AAED,MAAIA,KAAKa,MAAL,GAAc,CAAlB,EAAqB;AACnB,WAAOb,KAAK,CAAL,CAAP;AACD;;AAED,SAAOe,SAAP;AACD;;AAED,SAASR,OAAT,GAA8B;AAAA,MAAbC,MAAa,uEAAJ,EAAI;;AAC5B,MAAIQ,WAAW,EAAf;AACAR,SAAOS,OAAP,CAAe,UAACC,UAAD,EAAgB;AAC7B,QAAI,gBAAGC,GAAH,CAAOP,MAAP,CAAcM,WAAWE,IAAzB,CAAJ,EAAoC;AAClC;AACD;;AAEDJ,eAAcA,QAAd,SAA0BE,WAAWE,IAArC;AACD,GAND;;AAQA,SAAOJ,QAAP;AACD;;AAEM,SAASnB,YAAT,CAAsBwB,GAAtB,EAA2B;AAChC,MAAIC,SAASD,IAAIE,OAAJ,CAAY,gBAAZ,EAA8B,KAA9B,CAAb,CADgC,CACmB;AACnD,SAAO,IAAP,EAAa;AAAE;AACb,QAAMC,YAAYF,OAAOC,OAAP,CAAe,2BAAf,EAA4C,IAA5C,CAAlB;AACA,QAAID,WAAWE,SAAf,EAA0B;AACxB;AACD;;AAEDF,aAASE,SAAT;AACD;AACDF,WAASA,OAAOC,OAAP,CAAe,cAAf,EAA+B,EAA/B,CAAT,CAVgC,CAUa;AAC7CD,WAASA,OAAOC,OAAP,CAAe,KAAf,EAAsB,EAAtB,CAAT;;AAEA,SAAOD,MAAP;AACD;;kBAEcxB,gB","file":"index.js","sourcesContent":["import is from 'is_js';\n\nimport { formatPattern } from 'react-router';\n\nexport const createBuildRoute = (ownProps) => (...args) => {\n  const route = getRoute(args);\n  const params = getParams(args);\n  const root = /^\\//.test(route) ? '/' : getRoot(ownProps.routes);\n  const finalParams = Object.assign({}, ownProps.params, params);\n  return normalizeUrl(formatPattern(`/${root}/${route}`, finalParams));\n};\n\nfunction getRoute(args) {\n  return is.string(args[0]) ? args[0] : '';\n}\n\nfunction getParams(args) {\n  if (args.length === 1 && is.object(args[0])) {\n    return args[0];\n  }\n\n  if (args.length > 1) {\n    return args[1];\n  }\n\n  return undefined;\n}\n\nfunction getRoot(routes = []) {\n  let newRoute = '';\n  routes.forEach((routePiece) => {\n    if (is.not.string(routePiece.path)) {\n      return;\n    }\n\n    newRoute = `${newRoute}/${routePiece.path}`;\n  });\n\n  return newRoute;\n}\n\nexport function normalizeUrl(url) {\n  let result = url.replace(/(^|[\\w-])\\/+/gi, '$1/'); // Gets rid of duplicated slashes (//)\n  while (true) { // Interprets two dots (..), going up in the path for each occurrence\n    const newResult = result.replace(/((^\\/)|[\\w-]*\\/)\\.\\.\\/?/gi, '$2');\n    if (result === newResult) {\n      break;\n    }\n\n    result = newResult;\n  }\n  result = result.replace(/(\\/\\.|\\.\\/)/g, ''); // Gets rid of ./\n  result = result.replace(/\\/$/, '');\n\n  return result;\n}\n\nexport default createBuildRoute;\n"]}