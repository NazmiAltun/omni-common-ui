{"version":3,"sources":["domain/createBuildRoute/spec.js"],"names":["describe","it","to","be","a","ownProps","location","pathname","buildRoute","equal","routes","path","param","context","params","groupId","otherParam","view","mode","throw"],"mappings":"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","file":"spec.js","sourcesContent":["import { expect } from 'chai';\nimport { createBuildRoute } from './';\n\ndescribe('createBuildRoute', () => {\n  it('is a function', () => {\n    expect(createBuildRoute).to.be.a('function');\n  });\n\n  it('returns a function', () => {\n    expect(createBuildRoute()).to.be.a('function');\n  });\n\n  describe('buildRoute', () => {\n    it('joins a simple route', () => {\n      const ownProps = { location: { pathname: 'oldpathname' } };\n      const buildRoute = createBuildRoute(ownProps);\n      expect(buildRoute('newroute')).to.equal('/oldpathname/newroute');\n    });\n\n    it('interprets ../ in the route', () => {\n      const ownProps = { location: { pathname: 'old/path/name' } };\n      const buildRoute = createBuildRoute(ownProps);\n      expect(buildRoute('../newroute')).to.equal('/old/path/newroute');\n      expect(buildRoute('../../newroute')).to.equal('/old/newroute');\n      expect(buildRoute('../useless/../route')).to.equal('/old/path/route');\n    });\n\n    it('interprets routes starting with /', () => {\n      const ownProps = { location: { pathname: 'old/path/name' } };\n      const buildRoute = createBuildRoute(ownProps);\n      expect(buildRoute('/newroute')).to.equal('/newroute');\n    });\n\n    describe('when provided with an object with route parameters', () => {\n      it('joins a simple route', () => {\n        const ownProps = { routes: [{ path: 'old' }, { path: 'path' }] };\n        const buildRoute = createBuildRoute(ownProps);\n        expect(buildRoute('newroute', { param: 'param1' })).to.equal('/old/path/newroute');\n      });\n\n      it('interprets ../ in the route', () => {\n        const ownProps = { routes: [{ path: 'old' }, { path: 'path' }, { path: 'name' }] };\n        const buildRoute = createBuildRoute(ownProps);\n        expect(buildRoute('../newroute', { param: 'param1' })).to.equal('/old/path/newroute');\n        expect(buildRoute('../../newroute', { param: 'param1' })).to.equal('/old/newroute');\n        expect(buildRoute('../useless/../route', { param: 'param1' })).to.equal('/old/path/route');\n      });\n\n      it('interprets routes starting with /', () => {\n        const ownProps = { routes: [{ path: 'old' }, { path: 'path' }] };\n        const buildRoute = createBuildRoute(ownProps);\n        expect(buildRoute('/newroute', { param: 'param1' })).to.equal('/newroute');\n      });\n\n      context('simple param syntax', () => {\n        it('keeps the old route parameters if no new value is given', () => {\n          const ownProps = { routes: [{ path: 'group/:groupId' }], params: { groupId: '1' } };\n          const buildRoute = createBuildRoute(ownProps);\n          expect(buildRoute('sessions', { param: 'param1' })).to.equal('/group/1/sessions');\n        });\n\n        it('updates the old route parameters if a new value is given', () => {\n          const ownProps = { routes: [{ path: 'group/:groupId' }], params: { groupId: '1' } };\n          const buildRoute = createBuildRoute(ownProps);\n          expect(buildRoute('sessions', { groupId: '2' })).to.equal('/group/2/sessions');\n        });\n\n        it('allows use without a route parameter', () => {\n          const ownProps = { routes: [{ path: 'group/:groupId' }], params: { groupId: '1' } };\n          const buildRoute = createBuildRoute(ownProps);\n          expect(buildRoute({ groupId: '2' })).to.equal('/group/2');\n        });\n\n        it('does not explode when there is a param omitted', () => {\n          const ownProps = {\n            routes: [{ path: 'group/:groupId/attendance' }], params: { groupId: '1' },\n          };\n          const buildRoute = createBuildRoute(ownProps);\n          expect(buildRoute({ otherParam: '2' })).to.equal('/group/1/attendance');\n        });\n      });\n\n      context('optional param syntax', () => {\n        it('keeps the old route parameters if no new value is given', () => {\n          const ownProps = { routes: [{ path: 'group(/:groupId)' }], params: { groupId: '1' } };\n          const buildRoute = createBuildRoute(ownProps);\n          expect(buildRoute('sessions', { param: 'param1' })).to.equal('/group/1/sessions');\n        });\n\n        it('updates the old route parameters if a new value is given', () => {\n          const ownProps = { routes: [{ path: 'group(/:groupId)' }], params: { groupId: '1' } };\n          const buildRoute = createBuildRoute(ownProps);\n          expect(buildRoute('sessions', { groupId: '2' })).to.equal('/group/2/sessions');\n        });\n\n        it('allows use without a route parameter', () => {\n          const ownProps = { routes: [{ path: 'group(/:groupId)' }], params: { groupId: '1' } };\n          const buildRoute = createBuildRoute(ownProps);\n          expect(buildRoute({ groupId: '2' })).to.equal('/group/2');\n        });\n\n        it('does not explode when there is an optional param omitted', () => {\n          const ownProps = {\n            routes: [{ path: 'group(/:groupId)/session(/:sessionId)' }], params: { groupId: '1' },\n          };\n          const buildRoute = createBuildRoute(ownProps);\n          expect(buildRoute({ groupId: '2' })).to.equal('/group/2/session');\n        });\n      });\n\n      context('mixed param syntax', () => {\n        it('allows use when there are simple and optional params together', () => {\n          const ownProps = {\n            routes: [{ path: 'group/:view(/:mode)' }], params: { view: 'day', mode: 'marking' },\n          };\n          const buildRoute = createBuildRoute(ownProps);\n          expect(buildRoute({ mode: '' })).to.equal('/group/day');\n        });\n\n        it('allows use with a relative path passed as a string', () => {\n          const ownProps = {\n            routes: [{ path: 'group/:view(/:mode)' }],\n            params: { view: 'day', mode: '' },\n            location: { pathname: '/group/day' },\n          };\n          const buildRoute = createBuildRoute(ownProps);\n          expect(buildRoute('./marking')).to.equal('/group/day/marking');\n        });\n\n        it('explodes when there is a mandatory param omitted', () => {\n          const ownProps = {\n            routes: [{ path: 'group/:view(/:mode)' }],\n            params: { },\n            location: { pathname: '/group/day' },\n          };\n          const buildRoute = createBuildRoute(ownProps);\n          expect(() => buildRoute({ mode: 'marking' })).to.throw();\n        });\n      });\n    });\n  });\n});\n"]}