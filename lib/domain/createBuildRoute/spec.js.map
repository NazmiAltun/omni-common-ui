{"version":3,"sources":["domain/createBuildRoute/spec.js"],"names":["test","expect","toBe","describe","ownProps","routes","path","buildRoute","param","params","groupId","otherParam","view","mode","toThrowError"],"mappings":"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","file":"spec.js","sourcesContent":["import { createBuildRoute, normalizeUrl } from './';\n\ntest('is a function', () => {\n  expect(typeof createBuildRoute).toBe('function');\n});\n\ntest('returns a function', () => {\n  expect(typeof createBuildRoute()).toBe('function');\n});\n\ndescribe('buildRoute', () => {\n  test('joins a simple route', () => {\n    const ownProps = { routes: [{ path: 'oldpathname' }] };\n    const buildRoute = createBuildRoute(ownProps);\n    expect(buildRoute('newroute')).toBe('/oldpathname/newroute');\n  });\n\n  test('interprets ../ in the route', () => {\n    const ownProps = { routes: [{ path: 'old/path/name' }] };\n    const buildRoute = createBuildRoute(ownProps);\n    expect(buildRoute('..')).toBe('/old/path');\n    expect(buildRoute('../newroute')).toBe('/old/path/newroute');\n    expect(buildRoute('../../newroute')).toBe('/old/newroute');\n    expect(buildRoute('../useless/../route')).toBe('/old/path/route');\n  });\n\n  test('interprets routes starting with /', () => {\n    const ownProps = { routes: [{ path: 'old/path/name' }] };\n    const buildRoute = createBuildRoute(ownProps);\n    expect(buildRoute('/newroute')).toBe('/newroute');\n  });\n\n  test('does not break if no routes array is provided', () => {\n    const buildRoute = createBuildRoute({});\n    expect(buildRoute('newroute')).toBe('/newroute');\n  });\n\n  describe('when provided with an object with route parameters', () => {\n    test('joins a simple route', () => {\n      const ownProps = { routes: [{ path: 'old' }, { path: 'path' }] };\n      const buildRoute = createBuildRoute(ownProps);\n      expect(buildRoute('newroute', { param: 'param1' })).toBe('/old/path/newroute');\n    });\n\n    test('interprets ../ in the route', () => {\n      const ownProps = { routes: [{ path: 'old' }, { path: 'path' }, { path: 'name' }] };\n      const buildRoute = createBuildRoute(ownProps);\n      expect(buildRoute('../newroute', { param: 'param1' })).toBe('/old/path/newroute');\n      expect(buildRoute('../../newroute', { param: 'param1' })).toBe('/old/newroute');\n      expect(buildRoute('../useless/../route', { param: 'param1' })).toBe('/old/path/route');\n    });\n\n    test('interprets routes starting with /', () => {\n      const ownProps = { routes: [{ path: 'old' }, { path: 'path' }] };\n      const buildRoute = createBuildRoute(ownProps);\n      expect(buildRoute('/newroute', { param: 'param1' })).toBe('/newroute');\n    });\n\n    describe('simple param syntax', () => {\n      test('keeps the old route parameters if no new value is given', () => {\n        const ownProps = { routes: [{ path: 'group/:groupId' }], params: { groupId: '1' } };\n        const buildRoute = createBuildRoute(ownProps);\n        expect(buildRoute('sessions', { param: 'param1' })).toBe('/group/1/sessions');\n      });\n\n      test('updates the old route parameters if a new value is given', () => {\n        const ownProps = { routes: [{ path: 'group/:groupId' }], params: { groupId: '1' } };\n        const buildRoute = createBuildRoute(ownProps);\n        expect(buildRoute('sessions', { groupId: '2' })).toBe('/group/2/sessions');\n      });\n\n      test('allows use without a route parameter', () => {\n        const ownProps = { routes: [{ path: 'group/:groupId' }], params: { groupId: '1' } };\n        const buildRoute = createBuildRoute(ownProps);\n        expect(buildRoute({ groupId: '2' })).toBe('/group/2');\n      });\n\n      test('does not explode when there is a param omitted', () => {\n        const ownProps = {\n          routes: [{ path: 'group/:groupId/attendance' }], params: { groupId: '1' },\n        };\n        const buildRoute = createBuildRoute(ownProps);\n        expect(buildRoute({ otherParam: '2' })).toBe('/group/1/attendance');\n      });\n    });\n\n    describe('optional param syntax', () => {\n      test('keeps the old route parameters if no new value is given', () => {\n        const ownProps = { routes: [{ path: 'group(/:groupId)' }], params: { groupId: '1' } };\n        const buildRoute = createBuildRoute(ownProps);\n        expect(buildRoute('sessions', { param: 'param1' })).toBe('/group/1/sessions');\n      });\n\n      test('updates the old route parameters if a new value is given', () => {\n        const ownProps = { routes: [{ path: 'group(/:groupId)' }], params: { groupId: '1' } };\n        const buildRoute = createBuildRoute(ownProps);\n        expect(buildRoute('sessions', { groupId: '2' })).toBe('/group/2/sessions');\n      });\n\n      test('allows use without a route parameter', () => {\n        const ownProps = { routes: [{ path: 'group(/:groupId)' }], params: { groupId: '1' } };\n        const buildRoute = createBuildRoute(ownProps);\n        expect(buildRoute({ groupId: '2' })).toBe('/group/2');\n      });\n\n      test('does not explode when there is an optional param omitted', () => {\n        const ownProps = {\n          routes: [{ path: 'group(/:groupId)/session(/:sessionId)' }], params: { groupId: '1' },\n        };\n        const buildRoute = createBuildRoute(ownProps);\n        expect(buildRoute({ groupId: '2' })).toBe('/group/2/session');\n      });\n    });\n\n    describe('mixed param syntax', () => {\n      test('allows use when there are simple and optional params together', () => {\n        const ownProps = {\n          routes: [{ path: 'group/:view(/:mode)' }], params: { view: 'day', mode: 'marking' },\n        };\n        const buildRoute = createBuildRoute(ownProps);\n        expect(buildRoute({ mode: '' })).toBe('/group/day');\n      });\n\n      test('allows use with a relative path passed as a string', () => {\n        const ownProps = {\n          routes: [{ path: 'group/:view(/:mode)' }],\n          params: { view: 'day', mode: '' },\n        };\n        const buildRoute = createBuildRoute(ownProps);\n        expect(buildRoute('./marking')).toBe('/group/day/marking');\n      });\n\n      test('explodes when there is a mandatory param omitted', () => {\n        const ownProps = {\n          routes: [{ path: 'group/:view(/:mode)' }],\n          params: { },\n        };\n        const buildRoute = createBuildRoute(ownProps);\n        expect(() => buildRoute({ mode: 'marking' })).toThrowError();\n      });\n    });\n  });\n});\n\ndescribe('normalizeUrl()', () => {\n  test('supports file:// protocol', () => {\n    expect(normalizeUrl('file:///test/path')).toBe('file:///test/path');\n  });\n\n  test('removes duplicated slashes', () => {\n    expect(normalizeUrl('/test//path')).toBe('/test/path');\n    expect(normalizeUrl('/test///path')).toBe('/test/path');\n    expect(normalizeUrl('/test_///path')).toBe('/test_/path');\n    expect(normalizeUrl('/test9///path')).toBe('/test9/path');\n    expect(normalizeUrl('/test-///path')).toBe('/test-/path');\n  });\n\n  test('resolves two dots going up one level', () => {\n    expect(normalizeUrl('/test/../path')).toBe('/path');\n    expect(normalizeUrl('/test/path/..')).toBe('/test');\n    expect(normalizeUrl('/test/path9/..')).toBe('/test');\n    expect(normalizeUrl('/test/path_/..')).toBe('/test');\n    expect(normalizeUrl('/test/path-/..')).toBe('/test');\n    expect(normalizeUrl('/test/sublevel/../path')).toBe('/test/path');\n    expect(normalizeUrl('/../test/path')).toBe('/test/path');\n  });\n\n  test('gets rid of \".\" items', () => {\n    expect(normalizeUrl('/test/./path')).toBe('/test/path');\n    expect(normalizeUrl('/test/path/.')).toBe('/test/path');\n    expect(normalizeUrl('/./test/path')).toBe('/test/path');\n    expect(normalizeUrl('./test/path')).toBe('test/path');\n    expect(normalizeUrl('./test/././path')).toBe('test/path');\n  });\n});\n"]}