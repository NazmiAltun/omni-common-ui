{"version":3,"sources":["domain/createBuildRoute/spec.js"],"names":["test","expect","toBe","describe","ownProps","location","pathname","buildRoute","toMatch","routes","path","param","params","groupId","otherParam","view","mode","toThrowError"],"mappings":"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","file":"spec.js","sourcesContent":["import { createBuildRoute, normalizeUrl } from './';\n\ntest('is a function', () => {\n  expect(typeof createBuildRoute).toBe('function');\n});\n\ntest('returns a function', () => {\n  expect(typeof createBuildRoute()).toBe('function');\n});\n\ndescribe('buildRoute', () => {\n  test('joins a simple route', () => {\n    const ownProps = { location: { pathname: 'oldpathname' } };\n    const buildRoute = createBuildRoute(ownProps);\n    expect(buildRoute('newroute')).toMatch('/oldpathname/newroute');\n  });\n\n  test('interprets ../ in the route', () => {\n    const ownProps = { location: { pathname: 'old/path/name' } };\n    const buildRoute = createBuildRoute(ownProps);\n    expect(buildRoute('..')).toMatch('/old/path');\n    expect(buildRoute('../newroute')).toMatch('/old/path/newroute');\n    expect(buildRoute('../../newroute')).toMatch('/old/newroute');\n    expect(buildRoute('../useless/../route')).toMatch('/old/path/route');\n  });\n\n  test('interprets routes starting with /', () => {\n    const ownProps = { location: { pathname: 'old/path/name' } };\n    const buildRoute = createBuildRoute(ownProps);\n    expect(buildRoute('/newroute')).toMatch('/newroute');\n  });\n\n  describe('when provided with an object with route parameters', () => {\n    test('joins a simple route', () => {\n      const ownProps = { routes: [{ path: 'old' }, { path: 'path' }] };\n      const buildRoute = createBuildRoute(ownProps);\n      expect(buildRoute('newroute', { param: 'param1' })).toMatch('/old/path/newroute');\n    });\n\n    test('interprets ../ in the route', () => {\n      const ownProps = { routes: [{ path: 'old' }, { path: 'path' }, { path: 'name' }] };\n      const buildRoute = createBuildRoute(ownProps);\n      expect(buildRoute('../newroute', { param: 'param1' })).toMatch('/old/path/newroute');\n      expect(buildRoute('../../newroute', { param: 'param1' })).toMatch('/old/newroute');\n      expect(buildRoute('../useless/../route', { param: 'param1' })).toMatch('/old/path/route');\n    });\n\n    test('interprets routes starting with /', () => {\n      const ownProps = { routes: [{ path: 'old' }, { path: 'path' }] };\n      const buildRoute = createBuildRoute(ownProps);\n      expect(buildRoute('/newroute', { param: 'param1' })).toMatch('/newroute');\n    });\n\n    describe('simple param syntax', () => {\n      test('keeps the old route parameters if no new value is given', () => {\n        const ownProps = { routes: [{ path: 'group/:groupId' }], params: { groupId: '1' } };\n        const buildRoute = createBuildRoute(ownProps);\n        expect(buildRoute('sessions', { param: 'param1' })).toMatch('/group/1/sessions');\n      });\n\n      test('updates the old route parameters if a new value is given', () => {\n        const ownProps = { routes: [{ path: 'group/:groupId' }], params: { groupId: '1' } };\n        const buildRoute = createBuildRoute(ownProps);\n        expect(buildRoute('sessions', { groupId: '2' })).toMatch('/group/2/sessions');\n      });\n\n      test('allows use without a route parameter', () => {\n        const ownProps = { routes: [{ path: 'group/:groupId' }], params: { groupId: '1' } };\n        const buildRoute = createBuildRoute(ownProps);\n        expect(buildRoute({ groupId: '2' })).toMatch('/group/2');\n      });\n\n      test('does not explode when there is a param omitted', () => {\n        const ownProps = {\n          routes: [{ path: 'group/:groupId/attendance' }], params: { groupId: '1' },\n        };\n        const buildRoute = createBuildRoute(ownProps);\n        expect(buildRoute({ otherParam: '2' })).toMatch('/group/1/attendance');\n      });\n    });\n\n    describe('optional param syntax', () => {\n      test('keeps the old route parameters if no new value is given', () => {\n        const ownProps = { routes: [{ path: 'group(/:groupId)' }], params: { groupId: '1' } };\n        const buildRoute = createBuildRoute(ownProps);\n        expect(buildRoute('sessions', { param: 'param1' })).toMatch('/group/1/sessions');\n      });\n\n      test('updates the old route parameters if a new value is given', () => {\n        const ownProps = { routes: [{ path: 'group(/:groupId)' }], params: { groupId: '1' } };\n        const buildRoute = createBuildRoute(ownProps);\n        expect(buildRoute('sessions', { groupId: '2' })).toMatch('/group/2/sessions');\n      });\n\n      test('allows use without a route parameter', () => {\n        const ownProps = { routes: [{ path: 'group(/:groupId)' }], params: { groupId: '1' } };\n        const buildRoute = createBuildRoute(ownProps);\n        expect(buildRoute({ groupId: '2' })).toMatch('/group/2');\n      });\n\n      test('does not explode when there is an optional param omitted', () => {\n        const ownProps = {\n          routes: [{ path: 'group(/:groupId)/session(/:sessionId)' }], params: { groupId: '1' },\n        };\n        const buildRoute = createBuildRoute(ownProps);\n        expect(buildRoute({ groupId: '2' })).toMatch('/group/2/session');\n      });\n    });\n\n    describe('mixed param syntax', () => {\n      test('allows use when there are simple and optional params together', () => {\n        const ownProps = {\n          routes: [{ path: 'group/:view(/:mode)' }], params: { view: 'day', mode: 'marking' },\n        };\n        const buildRoute = createBuildRoute(ownProps);\n        expect(buildRoute({ mode: '' })).toMatch('/group/day');\n      });\n\n      test('allows use with a relative path passed as a string', () => {\n        const ownProps = {\n          routes: [{ path: 'group/:view(/:mode)' }],\n          params: { view: 'day', mode: '' },\n          location: { pathname: '/group/day' },\n        };\n        const buildRoute = createBuildRoute(ownProps);\n        expect(buildRoute('./marking')).toMatch('/group/day/marking');\n      });\n\n      test('explodes when there is a mandatory param omitted', () => {\n        const ownProps = {\n          routes: [{ path: 'group/:view(/:mode)' }],\n          params: { },\n          location: { pathname: '/group/day' },\n        };\n        const buildRoute = createBuildRoute(ownProps);\n        expect(() => buildRoute({ mode: 'marking' })).toThrowError();\n      });\n    });\n  });\n});\n\ndescribe('normalizeUrl()', () => {\n  test('supports file:// protocol', () => {\n    expect(normalizeUrl('file:///test/path')).toMatch('file:///test/path');\n  });\n\n  test('removes duplicated slashes', () => {\n    expect(normalizeUrl('/test//path')).toMatch('/test/path');\n    expect(normalizeUrl('/test///path')).toMatch('/test/path');\n    expect(normalizeUrl('/test_///path')).toMatch('/test_/path');\n    expect(normalizeUrl('/test9///path')).toMatch('/test9/path');\n    expect(normalizeUrl('/test-///path')).toMatch('/test-/path');\n  });\n\n  test('resolves two dots going up one level', () => {\n    expect(normalizeUrl('/test/../path')).toMatch('/path');\n    expect(normalizeUrl('/test/path/..')).toMatch('/test');\n    expect(normalizeUrl('/test/path9/..')).toMatch('/test');\n    expect(normalizeUrl('/test/path_/..')).toMatch('/test');\n    expect(normalizeUrl('/test/path-/..')).toMatch('/test');\n    expect(normalizeUrl('/test/sublevel/../path')).toMatch('/test/path');\n    expect(normalizeUrl('/../test/path')).toMatch('/test/path');\n  });\n\n  test('gets rid of \".\" items', () => {\n    expect(normalizeUrl('/test/./path')).toMatch('/test/path');\n    expect(normalizeUrl('/test/path/.')).toMatch('/test/path');\n    expect(normalizeUrl('/./test/path')).toMatch('/test/path');\n    expect(normalizeUrl('./test/path')).toMatch('test/path');\n    expect(normalizeUrl('./test/././path')).toMatch('test/path');\n  });\n});\n"]}