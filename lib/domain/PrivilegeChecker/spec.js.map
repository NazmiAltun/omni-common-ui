{"version":3,"sources":["domain/PrivilegeChecker/spec.js"],"names":["requireChecker","Config","require","merge","default","describe","PrivilegeChecker","state","beforeEach","privileges","items","featureLogin","it","hasPrivilege","to","be","false","throw","true","context"],"mappings":";;AAAA;;AACA;;;;AACA;;;;AAEA;AACA,IAAMA,iBAAiB,SAAjBA,cAAiB,CAACC,MAAD;AAAA,SAAYC,QAAQ,gCAAR,EAA0C;AAC3E,qBAAiB,iBAAQC,KAAR,CAAcF,MAAd;AAD0D,GAA1C,EAEhCG,OAFoB;AAAA,CAAvB;;AAIAC,SAAS,kBAAT,EAA6B,YAAM;AACjC,MAAIC,yBAAJ;AACA,MAAIC,cAAJ;;AAEAC,aAAW,YAAM;AACfD,YAAQ,mBAAQ,EAAEE,YAAY,EAAEC,OAAO,oBAAS,CAAC,KAAD,EAAQ,KAAR,EAAe,YAAf,CAAT,CAAT,EAAd,EAAR,CAAR;AACAJ,uBAAmBN,eAAe,EAAEW,cAAc,IAAhB,EAAf,CAAnB;AACD,GAHD;;AAKAC,KAAG,gDAAH,EAAqD,YAAM;AACzD,sBAAON,iBAAiBO,YAAjB,CAA8BN,KAA9B,EAAqC,CAArC,CAAP,EAAgDO,EAAhD,CAAmDC,EAAnD,CAAsDC,KAAtD;AACD,GAFD;;AAIAJ,KAAG,mEAAH,EAAwE,YAAM;AAC5E,sBAAO;AAAA,aAAMN,iBAAiBO,YAAjB,CAA8B,EAA9B,EAAkC,EAAlC,CAAN;AAAA,KAAP,EAAoDC,EAApD,CAAuDG,KAAvD;AACD,GAFD;;AAIAL,KAAG,yCAAH,EAA8C,YAAM;AAClD,sBAAON,iBAAiBO,YAAjB,CAA8B,qBAA9B,EAAqC,KAArC,CAAP,EAAoDC,EAApD,CAAuDC,EAAvD,CAA0DC,KAA1D;AACA,sBAAOV,iBAAiBO,YAAjB,CAA8B,oBAAI,EAAEJ,YAAY,IAAd,EAAJ,CAA9B,EAAyD,KAAzD,CAAP,EAAwEK,EAAxE,CAA2EC,EAA3E,CAA8EC,KAA9E;AACA,sBAAOV,iBAAiBO,YAAjB,CAA8B,oBAAI,EAAEJ,YAAY,qBAAd,EAAJ,CAA9B,EAA0D,KAA1D,CAAP,EAAyEK,EAAzE,CAA4EC,EAA5E,CAA+EC,KAA/E;AACD,GAJD;;AAMAJ,KAAG,8DAAH,EAAmE,YAAM;AACvE,sBAAON,iBAAiBO,YAAjB,CAA8BN,KAA9B,EAAqC,KAArC,CAAP,EAAoDO,EAApD,CAAuDC,EAAvD,CAA0DG,IAA1D;AACD,GAFD;;AAIAN,KAAG,sEAAH,EAA2E,YAAM;AAC/E,sBAAON,iBAAiBO,YAAjB,CAA8BN,KAA9B,EAAqC,KAArC,CAAP,EAAoDO,EAApD,CAAuDC,EAAvD,CAA0DG,IAA1D;AACD,GAFD;;AAIAN,KAAG,qFAAH,EAA0F,YAAM;AAC9F,sBAAON,iBAAiBO,YAAjB,CAA8BN,KAA9B,EAAqC,KAArC,CAAP,EAAoDO,EAApD,CAAuDC,EAAvD,CAA0DG,IAA1D;AACD,GAFD;;AAIAC,UAAQ,+BAAR,EAAyC,YAAM;AAC7CX,eAAW,YAAM;AACfF,yBAAmBN,eAAe,EAAEW,cAAc,KAAhB,EAAf,CAAnB;AACD,KAFD;;AAIAC,OAAG,cAAH,EAAmB,YAAM;AACvB,wBAAON,iBAAiBO,YAAjB,EAAP,EAAwCC,EAAxC,CAA2CC,EAA3C,CAA8CG,IAA9C;AACD,KAFD;AAGD,GARD;AASD,CA5CD","file":"spec.js","sourcesContent":["import { expect } from 'chai';\nimport _Config from 'domain/Config';\nimport { Map, List } from 'immutable';\n\n// eslint-disable-next-line import/no-webpack-loader-syntax, global-require\nconst requireChecker = (Config) => require('inject-loader?domain/Config!./')({\n  'domain/Config': _Config.merge(Config),\n}).default;\n\ndescribe('PrivilegeChecker', () => {\n  let PrivilegeChecker;\n  let state;\n\n  beforeEach(() => {\n    state = new Map({ privileges: { items: new List(['pr1', 'pr2', 'PREFIX_pr3']) } });\n    PrivilegeChecker = requireChecker({ featureLogin: true });\n  });\n\n  it('returns false if the privilege is not a string', () => {\n    expect(PrivilegeChecker.hasPrivilege(state, 1)).to.be.false;\n  });\n\n  it('throws if something else rather than a Map is provided as a state', () => {\n    expect(() => PrivilegeChecker.hasPrivilege({}, '')).to.throw;\n  });\n\n  it('returns false if the state is malformed', () => {\n    expect(PrivilegeChecker.hasPrivilege(Map(), 'pr1')).to.be.false;\n    expect(PrivilegeChecker.hasPrivilege(Map({ privileges: null }), 'pr1')).to.be.false;\n    expect(PrivilegeChecker.hasPrivilege(Map({ privileges: Map() }), 'pr1')).to.be.false;\n  });\n\n  it('returns true if the privilege is found in the privilege list', () => {\n    expect(PrivilegeChecker.hasPrivilege(state, 'pr1')).to.be.true;\n  });\n\n  it('returns true even if the privilege is provided with a different case', () => {\n    expect(PrivilegeChecker.hasPrivilege(state, 'PR1')).to.be.true;\n  });\n\n  it('returns true if there is a privilege in the list that ends with the provided string', () => {\n    expect(PrivilegeChecker.hasPrivilege(state, 'pr3')).to.be.true;\n  });\n\n  context('when featureLogin is not true', () => {\n    beforeEach(() => {\n      PrivilegeChecker = requireChecker({ featureLogin: false });\n    });\n\n    it('returns true', () => {\n      expect(PrivilegeChecker.hasPrivilege()).to.be.true;\n    });\n  });\n});\n"]}