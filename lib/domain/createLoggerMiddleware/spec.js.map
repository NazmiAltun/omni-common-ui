{"version":3,"sources":["domain/createLoggerMiddleware/spec.js"],"names":["jest","mock","createLogger","fn","debug","warn","beforeEach","resetAllMocks","describe","next","remove","test","expect","not","toHaveBeenCalled","action","toHaveBeenCalledWith","obj2","obj1","undefined","set","disabled"],"mappings":";;AAAA;;AACA;;AACA;;;;AACA;;;;;;AAEAA,KAAKC,IAAL,iBAA0B;AAAA,SAAO,EAAEC,cAAcF,KAAKG,EAAL,EAAhB,EAAP;AAAA,CAA1B;AACAH,KAAKC,IAAL,WAAwB;AAAA,SAAO,EAAEG,OAAOJ,KAAKG,EAAL,EAAT,EAAoBE,MAAML,KAAKG,EAAL,EAA1B,EAAP;AAAA,CAAxB;;AAEAG,WAAW,YAAM;AACfN,OAAKO,aAAL;AACD,CAFD;;AAIAC,SAAS,oDAAT,EAA+D,YAAM;AACnE,MAAIC,aAAJ;;AAEAH,aAAW,YAAM;AACf,qBAAOI,MAAP,CAAc,QAAd;AACAD,WAAOT,KAAKG,EAAL,EAAP;AACD,GAHD;;AAKAQ,OAAK,2BAAL,EAAkC,YAAM;AACtC;AACAC,sCAAqBC,GAArB,CAAyBC,gBAAzB;AACD,GAHD;;AAKAH,OAAK,mBAAL,EAA0B,YAAM;AAC9B,QAAMI,SAAS,aAAf;AACA,sCAA2BN,IAA3B,EAAiCM,MAAjC;AACAH,WAAO,cAAIR,KAAX,EAAkBY,oBAAlB,CAAuC,oBAAvC,QAAiED,MAAjE;AACAH,WAAOH,IAAP,EAAaO,oBAAb,CAAkCD,MAAlC;AACD,GALD;;AAOAJ,OAAK,0CAAL,EAAiD,YAAM;AACrD;AACA,QAAMI,SAAS,EAAEE,MAAM,EAAEC,MAAMC,SAAR,EAAR,EAAf;AACAJ,WAAOE,IAAP,CAAYC,IAAZ,GAAmBH,MAAnB;;AAEA,sCAA2BN,IAA3B,EAAiCM,MAAjC;AACAH,WAAO,cAAIP,IAAX,EAAiBS,gBAAjB;AACAF,WAAOH,IAAP,EAAaO,oBAAb,CAAkCD,MAAlC;AACD,GARD;AASD,CA7BD;;AA+BAP,SAAS,4CAAT,EAAuD,YAAM;AAC3DF,aAAW,YAAM;AACf,qBAAOc,GAAP,CAAW,QAAX,EAAqB,EAAEC,UAAU,IAAZ,EAArB;AACD,GAFD;;AAIAV,OAAK,4BAAL,EAAmC,YAAM;AACvC;AACAC,sCAAqBE,gBAArB;AACD,GAHD;AAID,CATD","file":"spec.js","sourcesContent":["import { createLoggerMiddleware } from './';\nimport { createLogger } from 'redux-logger';\nimport log from 'domain/log';\nimport Config from 'domain/Config';\n\njest.mock('redux-logger', () => ({ createLogger: jest.fn() }));\njest.mock('domain/log', () => ({ debug: jest.fn(), warn: jest.fn() }));\n\nbeforeEach(() => {\n  jest.resetAllMocks();\n});\n\ndescribe('when the config does not explicitly disable Sentry', () => {\n  let next;\n\n  beforeEach(() => {\n    Config.remove('sentry');\n    next = jest.fn();\n  });\n\n  test('does not use redux-logger', () => {\n    createLoggerMiddleware();\n    expect(createLogger).not.toHaveBeenCalled();\n  });\n\n  test('logs every action', () => {\n    const action = 'some action';\n    createLoggerMiddleware()()(next)(action);\n    expect(log.debug).toHaveBeenCalledWith('Dispatched action:', `\"${action}\"`);\n    expect(next).toHaveBeenCalledWith(action);\n  });\n\n  test('logs error if an action cannot be logged', () => {\n    // This creates a circular object, so that JSON.stringify() crashes\n    const action = { obj2: { obj1: undefined } };\n    action.obj2.obj1 = action;\n\n    createLoggerMiddleware()()(next)(action);\n    expect(log.warn).toHaveBeenCalled();\n    expect(next).toHaveBeenCalledWith(action);\n  });\n});\n\ndescribe('when the config explicitly disables Sentry', () => {\n  beforeEach(() => {\n    Config.set('sentry', { disabled: true });\n  });\n\n  test('uses redux-logger directly', () => {\n    createLoggerMiddleware();\n    expect(createLogger).toHaveBeenCalled();\n  });\n});\n"]}